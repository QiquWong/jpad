// Autogenerated code. Do not modify.
package standaloneutils.launchers.avl;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import java.util.EnumSet;
import java.util.Objects;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link AVLWingSectionControlSurface.Builder},
 * derived from the API of {@link AVLWingSectionControlSurface}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class AVLWingSectionControlSurface_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static AVLWingSectionControlSurface.Builder from(AVLWingSectionControlSurface value) {
    return new AVLWingSectionControlSurface.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    DESCRIPTION("description"),
    GAIN("gain"),
    X_HINGE("XHinge"),
    HINGE_VECTOR("hingeVector"),
    SIGN_DUPLICATE("signDuplicate"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String description;
  private Double gain;
  private Double XHinge;
  private java.lang.Double[] hingeVector;
  private Double signDuplicate;
  private final EnumSet<AVLWingSectionControlSurface_Builder.Property> _unsetProperties =
      EnumSet.allOf(AVLWingSectionControlSurface_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link AVLWingSectionControlSurface#getDescription()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public AVLWingSectionControlSurface.Builder setDescription(String description) {
    this.description = Preconditions.checkNotNull(description);
    _unsetProperties.remove(AVLWingSectionControlSurface_Builder.Property.DESCRIPTION);
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWingSectionControlSurface#getDescription()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWingSectionControlSurface.Builder mapDescription(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDescription(mapper.apply(getDescription()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWingSectionControlSurface#getDescription()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDescription() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.DESCRIPTION),
        "description not set");
    return description;
  }

  /**
   * Sets the value to be returned by {@link AVLWingSectionControlSurface#getGain()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code gain} is null
   */
  public AVLWingSectionControlSurface.Builder setGain(Double gain) {
    this.gain = Preconditions.checkNotNull(gain);
    _unsetProperties.remove(AVLWingSectionControlSurface_Builder.Property.GAIN);
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWingSectionControlSurface#getGain()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWingSectionControlSurface.Builder mapGain(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setGain(mapper.apply(getGain()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWingSectionControlSurface#getGain()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getGain() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.GAIN),
        "gain not set");
    return gain;
  }

  /**
   * Sets the value to be returned by {@link AVLWingSectionControlSurface#getXHinge()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code XHinge} is null
   */
  public AVLWingSectionControlSurface.Builder setXHinge(Double XHinge) {
    this.XHinge = Preconditions.checkNotNull(XHinge);
    _unsetProperties.remove(AVLWingSectionControlSurface_Builder.Property.X_HINGE);
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWingSectionControlSurface#getXHinge()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWingSectionControlSurface.Builder mapXHinge(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setXHinge(mapper.apply(getXHinge()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWingSectionControlSurface#getXHinge()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getXHinge() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.X_HINGE),
        "XHinge not set");
    return XHinge;
  }

  /**
   * Sets the value to be returned by {@link AVLWingSectionControlSurface#getHingeVector()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code hingeVector} is null
   */
  public AVLWingSectionControlSurface.Builder setHingeVector(java.lang.Double[] hingeVector) {
    this.hingeVector = Preconditions.checkNotNull(hingeVector);
    _unsetProperties.remove(AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR);
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWingSectionControlSurface#getHingeVector()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWingSectionControlSurface.Builder mapHingeVector(
      UnaryOperator<java.lang.Double[]> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHingeVector(mapper.apply(getHingeVector()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWingSectionControlSurface#getHingeVector()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public java.lang.Double[] getHingeVector() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR),
        "hingeVector not set");
    return hingeVector;
  }

  /**
   * Sets the value to be returned by {@link AVLWingSectionControlSurface#getSignDuplicate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code signDuplicate} is null
   */
  public AVLWingSectionControlSurface.Builder setSignDuplicate(Double signDuplicate) {
    this.signDuplicate = Preconditions.checkNotNull(signDuplicate);
    _unsetProperties.remove(AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE);
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWingSectionControlSurface#getSignDuplicate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWingSectionControlSurface.Builder mapSignDuplicate(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSignDuplicate(mapper.apply(getSignDuplicate()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWingSectionControlSurface#getSignDuplicate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSignDuplicate() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE),
        "signDuplicate not set");
    return signDuplicate;
  }

  /**
   * Sets all property values using the given {@code AVLWingSectionControlSurface} as a template.
   */
  public AVLWingSectionControlSurface.Builder mergeFrom(AVLWingSectionControlSurface value) {
    AVLWingSectionControlSurface_Builder _defaults = new AVLWingSectionControlSurface.Builder();
    if (_defaults._unsetProperties.contains(
            AVLWingSectionControlSurface_Builder.Property.DESCRIPTION)
        || !value.getDescription().equals(_defaults.getDescription())) {
      setDescription(value.getDescription());
    }
    if (_defaults._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.GAIN)
        || !value.getGain().equals(_defaults.getGain())) {
      setGain(value.getGain());
    }
    if (_defaults._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.X_HINGE)
        || !value.getXHinge().equals(_defaults.getXHinge())) {
      setXHinge(value.getXHinge());
    }
    if (_defaults._unsetProperties.contains(
            AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR)
        || !value.getHingeVector().equals(_defaults.getHingeVector())) {
      setHingeVector(value.getHingeVector());
    }
    if (_defaults._unsetProperties.contains(
            AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE)
        || !value.getSignDuplicate().equals(_defaults.getSignDuplicate())) {
      setSignDuplicate(value.getSignDuplicate());
    }
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public AVLWingSectionControlSurface.Builder mergeFrom(
      AVLWingSectionControlSurface.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    AVLWingSectionControlSurface_Builder base = (AVLWingSectionControlSurface_Builder) template;
    AVLWingSectionControlSurface_Builder _defaults = new AVLWingSectionControlSurface.Builder();
    if (!base._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.DESCRIPTION)
        && (_defaults._unsetProperties.contains(
                AVLWingSectionControlSurface_Builder.Property.DESCRIPTION)
            || !template.getDescription().equals(_defaults.getDescription()))) {
      setDescription(template.getDescription());
    }
    if (!base._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.GAIN)
        && (_defaults._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.GAIN)
            || !template.getGain().equals(_defaults.getGain()))) {
      setGain(template.getGain());
    }
    if (!base._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.X_HINGE)
        && (_defaults._unsetProperties.contains(
                AVLWingSectionControlSurface_Builder.Property.X_HINGE)
            || !template.getXHinge().equals(_defaults.getXHinge()))) {
      setXHinge(template.getXHinge());
    }
    if (!base._unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR)
        && (_defaults._unsetProperties.contains(
                AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR)
            || !template.getHingeVector().equals(_defaults.getHingeVector()))) {
      setHingeVector(template.getHingeVector());
    }
    if (!base._unsetProperties.contains(
            AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE)
        && (_defaults._unsetProperties.contains(
                AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE)
            || !template.getSignDuplicate().equals(_defaults.getSignDuplicate()))) {
      setSignDuplicate(template.getSignDuplicate());
    }
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public AVLWingSectionControlSurface.Builder clear() {
    AVLWingSectionControlSurface_Builder _defaults = new AVLWingSectionControlSurface.Builder();
    description = _defaults.description;
    gain = _defaults.gain;
    XHinge = _defaults.XHinge;
    hingeVector = _defaults.hingeVector;
    signDuplicate = _defaults.signDuplicate;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (AVLWingSectionControlSurface.Builder) this;
  }

  /**
   * Returns a newly-created {@link AVLWingSectionControlSurface} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public AVLWingSectionControlSurface build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new AVLWingSectionControlSurface_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link AVLWingSectionControlSurface}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public AVLWingSectionControlSurface buildPartial() {
    return new AVLWingSectionControlSurface_Builder.Partial(this);
  }

  private static final class Value implements AVLWingSectionControlSurface {
    private final String description;
    private final Double gain;
    private final Double XHinge;
    private final java.lang.Double[] hingeVector;
    private final Double signDuplicate;

    private Value(AVLWingSectionControlSurface_Builder builder) {
      this.description = builder.description;
      this.gain = builder.gain;
      this.XHinge = builder.XHinge;
      this.hingeVector = builder.hingeVector;
      this.signDuplicate = builder.signDuplicate;
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public Double getGain() {
      return gain;
    }

    @Override
    public Double getXHinge() {
      return XHinge;
    }

    @Override
    public java.lang.Double[] getHingeVector() {
      return hingeVector;
    }

    @Override
    public Double getSignDuplicate() {
      return signDuplicate;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLWingSectionControlSurface_Builder.Value)) {
        return false;
      }
      AVLWingSectionControlSurface_Builder.Value other =
          (AVLWingSectionControlSurface_Builder.Value) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(gain, other.gain)
          && Objects.equals(XHinge, other.XHinge)
          && Objects.equals(hingeVector, other.hingeVector)
          && Objects.equals(signDuplicate, other.signDuplicate);
    }

    @Override
    public int hashCode() {
      return Objects.hash(description, gain, XHinge, hingeVector, signDuplicate);
    }

    @Override
    public String toString() {
      return "AVLWingSectionControlSurface{"
          + "description="
          + description
          + ", "
          + "gain="
          + gain
          + ", "
          + "XHinge="
          + XHinge
          + ", "
          + "hingeVector="
          + hingeVector
          + ", "
          + "signDuplicate="
          + signDuplicate
          + "}";
    }
  }

  private static final class Partial implements AVLWingSectionControlSurface {
    private final String description;
    private final Double gain;
    private final Double XHinge;
    private final java.lang.Double[] hingeVector;
    private final Double signDuplicate;
    private final EnumSet<AVLWingSectionControlSurface_Builder.Property> _unsetProperties;

    Partial(AVLWingSectionControlSurface_Builder builder) {
      this.description = builder.description;
      this.gain = builder.gain;
      this.XHinge = builder.XHinge;
      this.hingeVector = builder.hingeVector;
      this.signDuplicate = builder.signDuplicate;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getDescription() {
      if (_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.DESCRIPTION)) {
        throw new UnsupportedOperationException("description not set");
      }
      return description;
    }

    @Override
    public Double getGain() {
      if (_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.GAIN)) {
        throw new UnsupportedOperationException("gain not set");
      }
      return gain;
    }

    @Override
    public Double getXHinge() {
      if (_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.X_HINGE)) {
        throw new UnsupportedOperationException("XHinge not set");
      }
      return XHinge;
    }

    @Override
    public java.lang.Double[] getHingeVector() {
      if (_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR)) {
        throw new UnsupportedOperationException("hingeVector not set");
      }
      return hingeVector;
    }

    @Override
    public Double getSignDuplicate() {
      if (_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE)) {
        throw new UnsupportedOperationException("signDuplicate not set");
      }
      return signDuplicate;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLWingSectionControlSurface_Builder.Partial)) {
        return false;
      }
      AVLWingSectionControlSurface_Builder.Partial other =
          (AVLWingSectionControlSurface_Builder.Partial) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(gain, other.gain)
          && Objects.equals(XHinge, other.XHinge)
          && Objects.equals(hingeVector, other.hingeVector)
          && Objects.equals(signDuplicate, other.signDuplicate)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(description, gain, XHinge, hingeVector, signDuplicate, _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial AVLWingSectionControlSurface{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.DESCRIPTION)
                  ? "description=" + description
                  : null),
              (!_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.GAIN)
                  ? "gain=" + gain
                  : null),
              (!_unsetProperties.contains(AVLWingSectionControlSurface_Builder.Property.X_HINGE)
                  ? "XHinge=" + XHinge
                  : null),
              (!_unsetProperties.contains(
                      AVLWingSectionControlSurface_Builder.Property.HINGE_VECTOR)
                  ? "hingeVector=" + hingeVector
                  : null),
              (!_unsetProperties.contains(
                      AVLWingSectionControlSurface_Builder.Property.SIGN_DUPLICATE)
                  ? "signDuplicate=" + signDuplicate
                  : null))
          + "}";
    }
  }
}
