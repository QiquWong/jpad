// Autogenerated code. Do not modify.
package standaloneutils.launchers.avl;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javaslang.Tuple2;
import javaslang.Tuple4;
import javaslang.Tuple6;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link AVLMassInputData.Builder},
 * derived from the API of {@link AVLMassInputData}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class AVLMassInputData_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static AVLMassInputData.Builder from(AVLMassInputData value) {
    return new AVLMassInputData.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    DESCRIPTION("description"),
    L_UNIT("LUnit"),
    M_UNIT("MUnit"),
    T_UNIT("TUnit"),
    GRAVITY_ACCELERATION("gravityAcceleration"),
    FLUID_DENSITY("fluidDensity"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String description;
  private Double LUnit;
  private Double MUnit;
  private Double TUnit;
  private Double gravityAcceleration;
  private Double fluidDensity;
  private final ArrayList<
          Tuple2<
              Tuple4<Double, Double, Double, Double>,
              Tuple6<Double, Double, Double, Double, Double, Double>>>
      massProperties = new ArrayList<>();
  private final EnumSet<AVLMassInputData_Builder.Property> _unsetProperties =
      EnumSet.allOf(AVLMassInputData_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link AVLMassInputData#getDescription()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public AVLMassInputData.Builder setDescription(String description) {
    this.description = Preconditions.checkNotNull(description);
    _unsetProperties.remove(AVLMassInputData_Builder.Property.DESCRIPTION);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLMassInputData#getDescription()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLMassInputData.Builder mapDescription(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDescription(mapper.apply(getDescription()));
  }

  /**
   * Returns the value that will be returned by {@link AVLMassInputData#getDescription()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDescription() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLMassInputData_Builder.Property.DESCRIPTION),
        "description not set");
    return description;
  }

  /**
   * Sets the value to be returned by {@link AVLMassInputData#getLUnit()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code LUnit} is null
   */
  public AVLMassInputData.Builder setLUnit(Double LUnit) {
    this.LUnit = Preconditions.checkNotNull(LUnit);
    _unsetProperties.remove(AVLMassInputData_Builder.Property.L_UNIT);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLMassInputData#getLUnit()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLMassInputData.Builder mapLUnit(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLUnit(mapper.apply(getLUnit()));
  }

  /**
   * Returns the value that will be returned by {@link AVLMassInputData#getLUnit()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getLUnit() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLMassInputData_Builder.Property.L_UNIT), "LUnit not set");
    return LUnit;
  }

  /**
   * Sets the value to be returned by {@link AVLMassInputData#getMUnit()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code MUnit} is null
   */
  public AVLMassInputData.Builder setMUnit(Double MUnit) {
    this.MUnit = Preconditions.checkNotNull(MUnit);
    _unsetProperties.remove(AVLMassInputData_Builder.Property.M_UNIT);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLMassInputData#getMUnit()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLMassInputData.Builder mapMUnit(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMUnit(mapper.apply(getMUnit()));
  }

  /**
   * Returns the value that will be returned by {@link AVLMassInputData#getMUnit()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getMUnit() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLMassInputData_Builder.Property.M_UNIT), "MUnit not set");
    return MUnit;
  }

  /**
   * Sets the value to be returned by {@link AVLMassInputData#getTUnit()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code TUnit} is null
   */
  public AVLMassInputData.Builder setTUnit(Double TUnit) {
    this.TUnit = Preconditions.checkNotNull(TUnit);
    _unsetProperties.remove(AVLMassInputData_Builder.Property.T_UNIT);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLMassInputData#getTUnit()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLMassInputData.Builder mapTUnit(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTUnit(mapper.apply(getTUnit()));
  }

  /**
   * Returns the value that will be returned by {@link AVLMassInputData#getTUnit()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getTUnit() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLMassInputData_Builder.Property.T_UNIT), "TUnit not set");
    return TUnit;
  }

  /**
   * Sets the value to be returned by {@link AVLMassInputData#getGravityAcceleration()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code gravityAcceleration} is null
   */
  public AVLMassInputData.Builder setGravityAcceleration(Double gravityAcceleration) {
    this.gravityAcceleration = Preconditions.checkNotNull(gravityAcceleration);
    _unsetProperties.remove(AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLMassInputData#getGravityAcceleration()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLMassInputData.Builder mapGravityAcceleration(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setGravityAcceleration(mapper.apply(getGravityAcceleration()));
  }

  /**
   * Returns the value that will be returned by {@link AVLMassInputData#getGravityAcceleration()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getGravityAcceleration() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION),
        "gravityAcceleration not set");
    return gravityAcceleration;
  }

  /**
   * Sets the value to be returned by {@link AVLMassInputData#getFluidDensity()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fluidDensity} is null
   */
  public AVLMassInputData.Builder setFluidDensity(Double fluidDensity) {
    this.fluidDensity = Preconditions.checkNotNull(fluidDensity);
    _unsetProperties.remove(AVLMassInputData_Builder.Property.FLUID_DENSITY);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLMassInputData#getFluidDensity()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLMassInputData.Builder mapFluidDensity(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFluidDensity(mapper.apply(getFluidDensity()));
  }

  /**
   * Returns the value that will be returned by {@link AVLMassInputData#getFluidDensity()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getFluidDensity() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLMassInputData_Builder.Property.FLUID_DENSITY),
        "fluidDensity not set");
    return fluidDensity;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link AVLMassInputData#getMassProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public AVLMassInputData.Builder addMassProperties(
      Tuple2<
              Tuple4<Double, Double, Double, Double>,
              Tuple6<Double, Double, Double, Double, Double, Double>>
          element) {
    this.massProperties.add(Preconditions.checkNotNull(element));
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link AVLMassInputData#getMassProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public AVLMassInputData.Builder addMassProperties(
      Tuple2<
              Tuple4<Double, Double, Double, Double>,
              Tuple6<Double, Double, Double, Double, Double, Double>>...
          elements) {
    massProperties.ensureCapacity(massProperties.size() + elements.length);
    for (Tuple2<
            Tuple4<Double, Double, Double, Double>,
            Tuple6<Double, Double, Double, Double, Double, Double>>
        element : elements) {
      addMassProperties(element);
    }
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link AVLMassInputData#getMassProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public AVLMassInputData.Builder addAllMassProperties(
      Iterable<
              ? extends
                  Tuple2<
                      Tuple4<Double, Double, Double, Double>,
                      Tuple6<Double, Double, Double, Double, Double, Double>>>
          elements) {
    if (elements instanceof Collection) {
      massProperties.ensureCapacity(massProperties.size() + ((Collection<?>) elements).size());
    }
    for (Tuple2<
            Tuple4<Double, Double, Double, Double>,
            Tuple6<Double, Double, Double, Double, Double, Double>>
        element : elements) {
      addMassProperties(element);
    }
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link AVLMassInputData#getMassProperties()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public AVLMassInputData.Builder mutateMassProperties(
      Consumer<
              ? super
                  List<
                      Tuple2<
                          Tuple4<Double, Double, Double, Double>,
                          Tuple6<Double, Double, Double, Double, Double, Double>>>>
          mutator) {
    // If addMassProperties is overridden, this method will be updated to delegate to it
    mutator.accept(massProperties);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link AVLMassInputData#getMassProperties()}.
   *
   * @return this {@code Builder} object
   */
  public AVLMassInputData.Builder clearMassProperties() {
    this.massProperties.clear();
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link AVLMassInputData#getMassProperties()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<
          Tuple2<
              Tuple4<Double, Double, Double, Double>,
              Tuple6<Double, Double, Double, Double, Double, Double>>>
      getMassProperties() {
    return Collections.unmodifiableList(massProperties);
  }

  /**
   * Sets all property values using the given {@code AVLMassInputData} as a template.
   */
  public AVLMassInputData.Builder mergeFrom(AVLMassInputData value) {
    AVLMassInputData_Builder _defaults = new AVLMassInputData.Builder();
    if (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.DESCRIPTION)
        || !value.getDescription().equals(_defaults.getDescription())) {
      setDescription(value.getDescription());
    }
    if (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.L_UNIT)
        || !value.getLUnit().equals(_defaults.getLUnit())) {
      setLUnit(value.getLUnit());
    }
    if (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.M_UNIT)
        || !value.getMUnit().equals(_defaults.getMUnit())) {
      setMUnit(value.getMUnit());
    }
    if (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.T_UNIT)
        || !value.getTUnit().equals(_defaults.getTUnit())) {
      setTUnit(value.getTUnit());
    }
    if (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION)
        || !value.getGravityAcceleration().equals(_defaults.getGravityAcceleration())) {
      setGravityAcceleration(value.getGravityAcceleration());
    }
    if (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.FLUID_DENSITY)
        || !value.getFluidDensity().equals(_defaults.getFluidDensity())) {
      setFluidDensity(value.getFluidDensity());
    }
    addAllMassProperties(value.getMassProperties());
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public AVLMassInputData.Builder mergeFrom(AVLMassInputData.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    AVLMassInputData_Builder base = (AVLMassInputData_Builder) template;
    AVLMassInputData_Builder _defaults = new AVLMassInputData.Builder();
    if (!base._unsetProperties.contains(AVLMassInputData_Builder.Property.DESCRIPTION)
        && (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.DESCRIPTION)
            || !template.getDescription().equals(_defaults.getDescription()))) {
      setDescription(template.getDescription());
    }
    if (!base._unsetProperties.contains(AVLMassInputData_Builder.Property.L_UNIT)
        && (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.L_UNIT)
            || !template.getLUnit().equals(_defaults.getLUnit()))) {
      setLUnit(template.getLUnit());
    }
    if (!base._unsetProperties.contains(AVLMassInputData_Builder.Property.M_UNIT)
        && (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.M_UNIT)
            || !template.getMUnit().equals(_defaults.getMUnit()))) {
      setMUnit(template.getMUnit());
    }
    if (!base._unsetProperties.contains(AVLMassInputData_Builder.Property.T_UNIT)
        && (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.T_UNIT)
            || !template.getTUnit().equals(_defaults.getTUnit()))) {
      setTUnit(template.getTUnit());
    }
    if (!base._unsetProperties.contains(AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION)
        && (_defaults._unsetProperties.contains(
                AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION)
            || !template.getGravityAcceleration().equals(_defaults.getGravityAcceleration()))) {
      setGravityAcceleration(template.getGravityAcceleration());
    }
    if (!base._unsetProperties.contains(AVLMassInputData_Builder.Property.FLUID_DENSITY)
        && (_defaults._unsetProperties.contains(AVLMassInputData_Builder.Property.FLUID_DENSITY)
            || !template.getFluidDensity().equals(_defaults.getFluidDensity()))) {
      setFluidDensity(template.getFluidDensity());
    }
    addAllMassProperties(((AVLMassInputData_Builder) template).massProperties);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public AVLMassInputData.Builder clear() {
    AVLMassInputData_Builder _defaults = new AVLMassInputData.Builder();
    description = _defaults.description;
    LUnit = _defaults.LUnit;
    MUnit = _defaults.MUnit;
    TUnit = _defaults.TUnit;
    gravityAcceleration = _defaults.gravityAcceleration;
    fluidDensity = _defaults.fluidDensity;
    massProperties.clear();
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (AVLMassInputData.Builder) this;
  }

  /**
   * Returns a newly-created {@link AVLMassInputData} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public AVLMassInputData build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new AVLMassInputData_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link AVLMassInputData}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public AVLMassInputData buildPartial() {
    return new AVLMassInputData_Builder.Partial(this);
  }

  private static final class Value implements AVLMassInputData {
    private final String description;
    private final Double LUnit;
    private final Double MUnit;
    private final Double TUnit;
    private final Double gravityAcceleration;
    private final Double fluidDensity;
    private final List<
            Tuple2<
                Tuple4<Double, Double, Double, Double>,
                Tuple6<Double, Double, Double, Double, Double, Double>>>
        massProperties;

    private Value(AVLMassInputData_Builder builder) {
      this.description = builder.description;
      this.LUnit = builder.LUnit;
      this.MUnit = builder.MUnit;
      this.TUnit = builder.TUnit;
      this.gravityAcceleration = builder.gravityAcceleration;
      this.fluidDensity = builder.fluidDensity;
      this.massProperties = ImmutableList.copyOf(builder.massProperties);
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public Double getLUnit() {
      return LUnit;
    }

    @Override
    public Double getMUnit() {
      return MUnit;
    }

    @Override
    public Double getTUnit() {
      return TUnit;
    }

    @Override
    public Double getGravityAcceleration() {
      return gravityAcceleration;
    }

    @Override
    public Double getFluidDensity() {
      return fluidDensity;
    }

    @Override
    public List<
            Tuple2<
                Tuple4<Double, Double, Double, Double>,
                Tuple6<Double, Double, Double, Double, Double, Double>>>
        getMassProperties() {
      return massProperties;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLMassInputData_Builder.Value)) {
        return false;
      }
      AVLMassInputData_Builder.Value other = (AVLMassInputData_Builder.Value) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(LUnit, other.LUnit)
          && Objects.equals(MUnit, other.MUnit)
          && Objects.equals(TUnit, other.TUnit)
          && Objects.equals(gravityAcceleration, other.gravityAcceleration)
          && Objects.equals(fluidDensity, other.fluidDensity)
          && Objects.equals(massProperties, other.massProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description, LUnit, MUnit, TUnit, gravityAcceleration, fluidDensity, massProperties);
    }

    @Override
    public String toString() {
      return "AVLMassInputData{"
          + "description="
          + description
          + ", "
          + "LUnit="
          + LUnit
          + ", "
          + "MUnit="
          + MUnit
          + ", "
          + "TUnit="
          + TUnit
          + ", "
          + "gravityAcceleration="
          + gravityAcceleration
          + ", "
          + "fluidDensity="
          + fluidDensity
          + ", "
          + "massProperties="
          + massProperties
          + "}";
    }
  }

  private static final class Partial implements AVLMassInputData {
    private final String description;
    private final Double LUnit;
    private final Double MUnit;
    private final Double TUnit;
    private final Double gravityAcceleration;
    private final Double fluidDensity;
    private final List<
            Tuple2<
                Tuple4<Double, Double, Double, Double>,
                Tuple6<Double, Double, Double, Double, Double, Double>>>
        massProperties;
    private final EnumSet<AVLMassInputData_Builder.Property> _unsetProperties;

    Partial(AVLMassInputData_Builder builder) {
      this.description = builder.description;
      this.LUnit = builder.LUnit;
      this.MUnit = builder.MUnit;
      this.TUnit = builder.TUnit;
      this.gravityAcceleration = builder.gravityAcceleration;
      this.fluidDensity = builder.fluidDensity;
      this.massProperties = ImmutableList.copyOf(builder.massProperties);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getDescription() {
      if (_unsetProperties.contains(AVLMassInputData_Builder.Property.DESCRIPTION)) {
        throw new UnsupportedOperationException("description not set");
      }
      return description;
    }

    @Override
    public Double getLUnit() {
      if (_unsetProperties.contains(AVLMassInputData_Builder.Property.L_UNIT)) {
        throw new UnsupportedOperationException("LUnit not set");
      }
      return LUnit;
    }

    @Override
    public Double getMUnit() {
      if (_unsetProperties.contains(AVLMassInputData_Builder.Property.M_UNIT)) {
        throw new UnsupportedOperationException("MUnit not set");
      }
      return MUnit;
    }

    @Override
    public Double getTUnit() {
      if (_unsetProperties.contains(AVLMassInputData_Builder.Property.T_UNIT)) {
        throw new UnsupportedOperationException("TUnit not set");
      }
      return TUnit;
    }

    @Override
    public Double getGravityAcceleration() {
      if (_unsetProperties.contains(AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION)) {
        throw new UnsupportedOperationException("gravityAcceleration not set");
      }
      return gravityAcceleration;
    }

    @Override
    public Double getFluidDensity() {
      if (_unsetProperties.contains(AVLMassInputData_Builder.Property.FLUID_DENSITY)) {
        throw new UnsupportedOperationException("fluidDensity not set");
      }
      return fluidDensity;
    }

    @Override
    public List<
            Tuple2<
                Tuple4<Double, Double, Double, Double>,
                Tuple6<Double, Double, Double, Double, Double, Double>>>
        getMassProperties() {
      return massProperties;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLMassInputData_Builder.Partial)) {
        return false;
      }
      AVLMassInputData_Builder.Partial other = (AVLMassInputData_Builder.Partial) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(LUnit, other.LUnit)
          && Objects.equals(MUnit, other.MUnit)
          && Objects.equals(TUnit, other.TUnit)
          && Objects.equals(gravityAcceleration, other.gravityAcceleration)
          && Objects.equals(fluidDensity, other.fluidDensity)
          && Objects.equals(massProperties, other.massProperties)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          LUnit,
          MUnit,
          TUnit,
          gravityAcceleration,
          fluidDensity,
          massProperties,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial AVLMassInputData{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(AVLMassInputData_Builder.Property.DESCRIPTION)
                  ? "description=" + description
                  : null),
              (!_unsetProperties.contains(AVLMassInputData_Builder.Property.L_UNIT)
                  ? "LUnit=" + LUnit
                  : null),
              (!_unsetProperties.contains(AVLMassInputData_Builder.Property.M_UNIT)
                  ? "MUnit=" + MUnit
                  : null),
              (!_unsetProperties.contains(AVLMassInputData_Builder.Property.T_UNIT)
                  ? "TUnit=" + TUnit
                  : null),
              (!_unsetProperties.contains(AVLMassInputData_Builder.Property.GRAVITY_ACCELERATION)
                  ? "gravityAcceleration=" + gravityAcceleration
                  : null),
              (!_unsetProperties.contains(AVLMassInputData_Builder.Property.FLUID_DENSITY)
                  ? "fluidDensity=" + fluidDensity
                  : null),
              "massProperties=" + massProperties)
          + "}";
    }
  }
}
