// Autogenerated code. Do not modify.
package standaloneutils.launchers.avl;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link AVLWing.Builder},
 * derived from the API of {@link AVLWing}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class AVLWing_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static AVLWing.Builder from(AVLWing value) {
    return new AVLWing.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    DESCRIPTION("description"),
    N_SPANWISE("NSpanwise"),
    N_CHORDWISE("NChordwise"),
    S_SPACE("SSpace"),
    C_SPACE("CSpace"),
    SYMMETRIC("symmetric"),
    VERTICAL("vertical"),
    ORIGIN("origin"),
    SCALE("scale"),
    SWEEP("sweep"),
    DIHEDRAL("dihedral"),
    INCIDENCE("incidence"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String description;
  private Integer NSpanwise;
  private Integer NChordwise;
  private Double SSpace;
  private Double CSpace;
  private boolean symmetric;
  private boolean vertical;
  private java.lang.Double[] origin;
  private java.lang.Double[] scale;
  private Double sweep;
  private Double dihedral;
  private Double incidence;
  private final ArrayList<AVLWingSection> sections = new ArrayList<>();
  private final EnumSet<AVLWing_Builder.Property> _unsetProperties =
      EnumSet.allOf(AVLWing_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link AVLWing#getDescription()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public AVLWing.Builder setDescription(String description) {
    this.description = Preconditions.checkNotNull(description);
    _unsetProperties.remove(AVLWing_Builder.Property.DESCRIPTION);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getDescription()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapDescription(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDescription(mapper.apply(getDescription()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getDescription()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDescription() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.DESCRIPTION), "description not set");
    return description;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getNSpanwise()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code NSpanwise} is null
   */
  public AVLWing.Builder setNSpanwise(Integer NSpanwise) {
    this.NSpanwise = Preconditions.checkNotNull(NSpanwise);
    _unsetProperties.remove(AVLWing_Builder.Property.N_SPANWISE);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getNSpanwise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapNSpanwise(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNSpanwise(mapper.apply(getNSpanwise()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getNSpanwise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Integer getNSpanwise() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.N_SPANWISE), "NSpanwise not set");
    return NSpanwise;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getNChordwise()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code NChordwise} is null
   */
  public AVLWing.Builder setNChordwise(Integer NChordwise) {
    this.NChordwise = Preconditions.checkNotNull(NChordwise);
    _unsetProperties.remove(AVLWing_Builder.Property.N_CHORDWISE);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getNChordwise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapNChordwise(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNChordwise(mapper.apply(getNChordwise()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getNChordwise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Integer getNChordwise() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.N_CHORDWISE), "NChordwise not set");
    return NChordwise;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getSSpace()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code SSpace} is null
   */
  public AVLWing.Builder setSSpace(Double SSpace) {
    this.SSpace = Preconditions.checkNotNull(SSpace);
    _unsetProperties.remove(AVLWing_Builder.Property.S_SPACE);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getSSpace()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapSSpace(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSSpace(mapper.apply(getSSpace()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getSSpace()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSSpace() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.S_SPACE), "SSpace not set");
    return SSpace;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getCSpace()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code CSpace} is null
   */
  public AVLWing.Builder setCSpace(Double CSpace) {
    this.CSpace = Preconditions.checkNotNull(CSpace);
    _unsetProperties.remove(AVLWing_Builder.Property.C_SPACE);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getCSpace()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapCSpace(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCSpace(mapper.apply(getCSpace()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getCSpace()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getCSpace() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.C_SPACE), "CSpace not set");
    return CSpace;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#isSymmetric()}.
   *
   * @return this {@code Builder} object
   */
  public AVLWing.Builder setSymmetric(boolean symmetric) {
    this.symmetric = symmetric;
    _unsetProperties.remove(AVLWing_Builder.Property.SYMMETRIC);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#isSymmetric()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapSymmetric(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSymmetric(mapper.apply(isSymmetric()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#isSymmetric()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isSymmetric() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.SYMMETRIC), "symmetric not set");
    return symmetric;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#isVertical()}.
   *
   * @return this {@code Builder} object
   */
  public AVLWing.Builder setVertical(boolean vertical) {
    this.vertical = vertical;
    _unsetProperties.remove(AVLWing_Builder.Property.VERTICAL);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#isVertical()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapVertical(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVertical(mapper.apply(isVertical()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#isVertical()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isVertical() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.VERTICAL), "vertical not set");
    return vertical;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getOrigin()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code origin} is null
   */
  public AVLWing.Builder setOrigin(java.lang.Double[] origin) {
    this.origin = Preconditions.checkNotNull(origin);
    _unsetProperties.remove(AVLWing_Builder.Property.ORIGIN);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getOrigin()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapOrigin(UnaryOperator<java.lang.Double[]> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOrigin(mapper.apply(getOrigin()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getOrigin()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public java.lang.Double[] getOrigin() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.ORIGIN), "origin not set");
    return origin;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getScale()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code scale} is null
   */
  public AVLWing.Builder setScale(java.lang.Double[] scale) {
    this.scale = Preconditions.checkNotNull(scale);
    _unsetProperties.remove(AVLWing_Builder.Property.SCALE);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getScale()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapScale(UnaryOperator<java.lang.Double[]> mapper) {
    Preconditions.checkNotNull(mapper);
    return setScale(mapper.apply(getScale()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getScale()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public java.lang.Double[] getScale() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.SCALE), "scale not set");
    return scale;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getSweep()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code sweep} is null
   */
  public AVLWing.Builder setSweep(Double sweep) {
    this.sweep = Preconditions.checkNotNull(sweep);
    _unsetProperties.remove(AVLWing_Builder.Property.SWEEP);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getSweep()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapSweep(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSweep(mapper.apply(getSweep()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getSweep()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSweep() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.SWEEP), "sweep not set");
    return sweep;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getDihedral()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dihedral} is null
   */
  public AVLWing.Builder setDihedral(Double dihedral) {
    this.dihedral = Preconditions.checkNotNull(dihedral);
    _unsetProperties.remove(AVLWing_Builder.Property.DIHEDRAL);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getDihedral()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapDihedral(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDihedral(mapper.apply(getDihedral()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getDihedral()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getDihedral() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.DIHEDRAL), "dihedral not set");
    return dihedral;
  }

  /**
   * Sets the value to be returned by {@link AVLWing#getIncidence()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code incidence} is null
   */
  public AVLWing.Builder setIncidence(Double incidence) {
    this.incidence = Preconditions.checkNotNull(incidence);
    _unsetProperties.remove(AVLWing_Builder.Property.INCIDENCE);
    return (AVLWing.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLWing#getIncidence()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLWing.Builder mapIncidence(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setIncidence(mapper.apply(getIncidence()));
  }

  /**
   * Returns the value that will be returned by {@link AVLWing#getIncidence()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getIncidence() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLWing_Builder.Property.INCIDENCE), "incidence not set");
    return incidence;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link AVLWing#getSections()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public AVLWing.Builder addSections(AVLWingSection element) {
    this.sections.add(Preconditions.checkNotNull(element));
    return (AVLWing.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link AVLWing#getSections()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public AVLWing.Builder addSections(AVLWingSection... elements) {
    sections.ensureCapacity(sections.size() + elements.length);
    for (AVLWingSection element : elements) {
      addSections(element);
    }
    return (AVLWing.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link AVLWing#getSections()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public AVLWing.Builder addAllSections(Iterable<? extends AVLWingSection> elements) {
    if (elements instanceof Collection) {
      sections.ensureCapacity(sections.size() + ((Collection<?>) elements).size());
    }
    for (AVLWingSection element : elements) {
      addSections(element);
    }
    return (AVLWing.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link AVLWing#getSections()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public AVLWing.Builder mutateSections(Consumer<? super List<AVLWingSection>> mutator) {
    // If addSections is overridden, this method will be updated to delegate to it
    mutator.accept(sections);
    return (AVLWing.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link AVLWing#getSections()}.
   *
   * @return this {@code Builder} object
   */
  public AVLWing.Builder clearSections() {
    this.sections.clear();
    return (AVLWing.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link AVLWing#getSections()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<AVLWingSection> getSections() {
    return Collections.unmodifiableList(sections);
  }

  /**
   * Sets all property values using the given {@code AVLWing} as a template.
   */
  public AVLWing.Builder mergeFrom(AVLWing value) {
    AVLWing_Builder _defaults = new AVLWing.Builder();
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.DESCRIPTION)
        || !value.getDescription().equals(_defaults.getDescription())) {
      setDescription(value.getDescription());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.N_SPANWISE)
        || !value.getNSpanwise().equals(_defaults.getNSpanwise())) {
      setNSpanwise(value.getNSpanwise());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.N_CHORDWISE)
        || !value.getNChordwise().equals(_defaults.getNChordwise())) {
      setNChordwise(value.getNChordwise());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.S_SPACE)
        || !value.getSSpace().equals(_defaults.getSSpace())) {
      setSSpace(value.getSSpace());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.C_SPACE)
        || !value.getCSpace().equals(_defaults.getCSpace())) {
      setCSpace(value.getCSpace());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.SYMMETRIC)
        || value.isSymmetric() != _defaults.isSymmetric()) {
      setSymmetric(value.isSymmetric());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.VERTICAL)
        || value.isVertical() != _defaults.isVertical()) {
      setVertical(value.isVertical());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.ORIGIN)
        || !value.getOrigin().equals(_defaults.getOrigin())) {
      setOrigin(value.getOrigin());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.SCALE)
        || !value.getScale().equals(_defaults.getScale())) {
      setScale(value.getScale());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.SWEEP)
        || !value.getSweep().equals(_defaults.getSweep())) {
      setSweep(value.getSweep());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.DIHEDRAL)
        || !value.getDihedral().equals(_defaults.getDihedral())) {
      setDihedral(value.getDihedral());
    }
    if (_defaults._unsetProperties.contains(AVLWing_Builder.Property.INCIDENCE)
        || !value.getIncidence().equals(_defaults.getIncidence())) {
      setIncidence(value.getIncidence());
    }
    addAllSections(value.getSections());
    return (AVLWing.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public AVLWing.Builder mergeFrom(AVLWing.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    AVLWing_Builder base = (AVLWing_Builder) template;
    AVLWing_Builder _defaults = new AVLWing.Builder();
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.DESCRIPTION)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.DESCRIPTION)
            || !template.getDescription().equals(_defaults.getDescription()))) {
      setDescription(template.getDescription());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.N_SPANWISE)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.N_SPANWISE)
            || !template.getNSpanwise().equals(_defaults.getNSpanwise()))) {
      setNSpanwise(template.getNSpanwise());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.N_CHORDWISE)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.N_CHORDWISE)
            || !template.getNChordwise().equals(_defaults.getNChordwise()))) {
      setNChordwise(template.getNChordwise());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.S_SPACE)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.S_SPACE)
            || !template.getSSpace().equals(_defaults.getSSpace()))) {
      setSSpace(template.getSSpace());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.C_SPACE)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.C_SPACE)
            || !template.getCSpace().equals(_defaults.getCSpace()))) {
      setCSpace(template.getCSpace());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.SYMMETRIC)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.SYMMETRIC)
            || template.isSymmetric() != _defaults.isSymmetric())) {
      setSymmetric(template.isSymmetric());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.VERTICAL)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.VERTICAL)
            || template.isVertical() != _defaults.isVertical())) {
      setVertical(template.isVertical());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.ORIGIN)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.ORIGIN)
            || !template.getOrigin().equals(_defaults.getOrigin()))) {
      setOrigin(template.getOrigin());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.SCALE)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.SCALE)
            || !template.getScale().equals(_defaults.getScale()))) {
      setScale(template.getScale());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.SWEEP)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.SWEEP)
            || !template.getSweep().equals(_defaults.getSweep()))) {
      setSweep(template.getSweep());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.DIHEDRAL)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.DIHEDRAL)
            || !template.getDihedral().equals(_defaults.getDihedral()))) {
      setDihedral(template.getDihedral());
    }
    if (!base._unsetProperties.contains(AVLWing_Builder.Property.INCIDENCE)
        && (_defaults._unsetProperties.contains(AVLWing_Builder.Property.INCIDENCE)
            || !template.getIncidence().equals(_defaults.getIncidence()))) {
      setIncidence(template.getIncidence());
    }
    addAllSections(((AVLWing_Builder) template).sections);
    return (AVLWing.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public AVLWing.Builder clear() {
    AVLWing_Builder _defaults = new AVLWing.Builder();
    description = _defaults.description;
    NSpanwise = _defaults.NSpanwise;
    NChordwise = _defaults.NChordwise;
    SSpace = _defaults.SSpace;
    CSpace = _defaults.CSpace;
    symmetric = _defaults.symmetric;
    vertical = _defaults.vertical;
    origin = _defaults.origin;
    scale = _defaults.scale;
    sweep = _defaults.sweep;
    dihedral = _defaults.dihedral;
    incidence = _defaults.incidence;
    sections.clear();
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (AVLWing.Builder) this;
  }

  /**
   * Returns a newly-created {@link AVLWing} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public AVLWing build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new AVLWing_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link AVLWing}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public AVLWing buildPartial() {
    return new AVLWing_Builder.Partial(this);
  }

  private static final class Value implements AVLWing {
    private final String description;
    private final Integer NSpanwise;
    private final Integer NChordwise;
    private final Double SSpace;
    private final Double CSpace;
    private final boolean symmetric;
    private final boolean vertical;
    private final java.lang.Double[] origin;
    private final java.lang.Double[] scale;
    private final Double sweep;
    private final Double dihedral;
    private final Double incidence;
    private final List<AVLWingSection> sections;

    private Value(AVLWing_Builder builder) {
      this.description = builder.description;
      this.NSpanwise = builder.NSpanwise;
      this.NChordwise = builder.NChordwise;
      this.SSpace = builder.SSpace;
      this.CSpace = builder.CSpace;
      this.symmetric = builder.symmetric;
      this.vertical = builder.vertical;
      this.origin = builder.origin;
      this.scale = builder.scale;
      this.sweep = builder.sweep;
      this.dihedral = builder.dihedral;
      this.incidence = builder.incidence;
      this.sections = ImmutableList.copyOf(builder.sections);
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public Integer getNSpanwise() {
      return NSpanwise;
    }

    @Override
    public Integer getNChordwise() {
      return NChordwise;
    }

    @Override
    public Double getSSpace() {
      return SSpace;
    }

    @Override
    public Double getCSpace() {
      return CSpace;
    }

    @Override
    public boolean isSymmetric() {
      return symmetric;
    }

    @Override
    public boolean isVertical() {
      return vertical;
    }

    @Override
    public java.lang.Double[] getOrigin() {
      return origin;
    }

    @Override
    public java.lang.Double[] getScale() {
      return scale;
    }

    @Override
    public Double getSweep() {
      return sweep;
    }

    @Override
    public Double getDihedral() {
      return dihedral;
    }

    @Override
    public Double getIncidence() {
      return incidence;
    }

    @Override
    public List<AVLWingSection> getSections() {
      return sections;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLWing_Builder.Value)) {
        return false;
      }
      AVLWing_Builder.Value other = (AVLWing_Builder.Value) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(NSpanwise, other.NSpanwise)
          && Objects.equals(NChordwise, other.NChordwise)
          && Objects.equals(SSpace, other.SSpace)
          && Objects.equals(CSpace, other.CSpace)
          && Objects.equals(symmetric, other.symmetric)
          && Objects.equals(vertical, other.vertical)
          && Objects.equals(origin, other.origin)
          && Objects.equals(scale, other.scale)
          && Objects.equals(sweep, other.sweep)
          && Objects.equals(dihedral, other.dihedral)
          && Objects.equals(incidence, other.incidence)
          && Objects.equals(sections, other.sections);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          NSpanwise,
          NChordwise,
          SSpace,
          CSpace,
          symmetric,
          vertical,
          origin,
          scale,
          sweep,
          dihedral,
          incidence,
          sections);
    }

    @Override
    public String toString() {
      return "AVLWing{"
          + "description="
          + description
          + ", "
          + "NSpanwise="
          + NSpanwise
          + ", "
          + "NChordwise="
          + NChordwise
          + ", "
          + "SSpace="
          + SSpace
          + ", "
          + "CSpace="
          + CSpace
          + ", "
          + "symmetric="
          + symmetric
          + ", "
          + "vertical="
          + vertical
          + ", "
          + "origin="
          + origin
          + ", "
          + "scale="
          + scale
          + ", "
          + "sweep="
          + sweep
          + ", "
          + "dihedral="
          + dihedral
          + ", "
          + "incidence="
          + incidence
          + ", "
          + "sections="
          + sections
          + "}";
    }
  }

  private static final class Partial implements AVLWing {
    private final String description;
    private final Integer NSpanwise;
    private final Integer NChordwise;
    private final Double SSpace;
    private final Double CSpace;
    private final boolean symmetric;
    private final boolean vertical;
    private final java.lang.Double[] origin;
    private final java.lang.Double[] scale;
    private final Double sweep;
    private final Double dihedral;
    private final Double incidence;
    private final List<AVLWingSection> sections;
    private final EnumSet<AVLWing_Builder.Property> _unsetProperties;

    Partial(AVLWing_Builder builder) {
      this.description = builder.description;
      this.NSpanwise = builder.NSpanwise;
      this.NChordwise = builder.NChordwise;
      this.SSpace = builder.SSpace;
      this.CSpace = builder.CSpace;
      this.symmetric = builder.symmetric;
      this.vertical = builder.vertical;
      this.origin = builder.origin;
      this.scale = builder.scale;
      this.sweep = builder.sweep;
      this.dihedral = builder.dihedral;
      this.incidence = builder.incidence;
      this.sections = ImmutableList.copyOf(builder.sections);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getDescription() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.DESCRIPTION)) {
        throw new UnsupportedOperationException("description not set");
      }
      return description;
    }

    @Override
    public Integer getNSpanwise() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.N_SPANWISE)) {
        throw new UnsupportedOperationException("NSpanwise not set");
      }
      return NSpanwise;
    }

    @Override
    public Integer getNChordwise() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.N_CHORDWISE)) {
        throw new UnsupportedOperationException("NChordwise not set");
      }
      return NChordwise;
    }

    @Override
    public Double getSSpace() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.S_SPACE)) {
        throw new UnsupportedOperationException("SSpace not set");
      }
      return SSpace;
    }

    @Override
    public Double getCSpace() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.C_SPACE)) {
        throw new UnsupportedOperationException("CSpace not set");
      }
      return CSpace;
    }

    @Override
    public boolean isSymmetric() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.SYMMETRIC)) {
        throw new UnsupportedOperationException("symmetric not set");
      }
      return symmetric;
    }

    @Override
    public boolean isVertical() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.VERTICAL)) {
        throw new UnsupportedOperationException("vertical not set");
      }
      return vertical;
    }

    @Override
    public java.lang.Double[] getOrigin() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.ORIGIN)) {
        throw new UnsupportedOperationException("origin not set");
      }
      return origin;
    }

    @Override
    public java.lang.Double[] getScale() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.SCALE)) {
        throw new UnsupportedOperationException("scale not set");
      }
      return scale;
    }

    @Override
    public Double getSweep() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.SWEEP)) {
        throw new UnsupportedOperationException("sweep not set");
      }
      return sweep;
    }

    @Override
    public Double getDihedral() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.DIHEDRAL)) {
        throw new UnsupportedOperationException("dihedral not set");
      }
      return dihedral;
    }

    @Override
    public Double getIncidence() {
      if (_unsetProperties.contains(AVLWing_Builder.Property.INCIDENCE)) {
        throw new UnsupportedOperationException("incidence not set");
      }
      return incidence;
    }

    @Override
    public List<AVLWingSection> getSections() {
      return sections;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLWing_Builder.Partial)) {
        return false;
      }
      AVLWing_Builder.Partial other = (AVLWing_Builder.Partial) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(NSpanwise, other.NSpanwise)
          && Objects.equals(NChordwise, other.NChordwise)
          && Objects.equals(SSpace, other.SSpace)
          && Objects.equals(CSpace, other.CSpace)
          && Objects.equals(symmetric, other.symmetric)
          && Objects.equals(vertical, other.vertical)
          && Objects.equals(origin, other.origin)
          && Objects.equals(scale, other.scale)
          && Objects.equals(sweep, other.sweep)
          && Objects.equals(dihedral, other.dihedral)
          && Objects.equals(incidence, other.incidence)
          && Objects.equals(sections, other.sections)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          NSpanwise,
          NChordwise,
          SSpace,
          CSpace,
          symmetric,
          vertical,
          origin,
          scale,
          sweep,
          dihedral,
          incidence,
          sections,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial AVLWing{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(AVLWing_Builder.Property.DESCRIPTION)
                  ? "description=" + description
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.N_SPANWISE)
                  ? "NSpanwise=" + NSpanwise
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.N_CHORDWISE)
                  ? "NChordwise=" + NChordwise
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.S_SPACE)
                  ? "SSpace=" + SSpace
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.C_SPACE)
                  ? "CSpace=" + CSpace
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.SYMMETRIC)
                  ? "symmetric=" + symmetric
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.VERTICAL)
                  ? "vertical=" + vertical
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.ORIGIN)
                  ? "origin=" + origin
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.SCALE)
                  ? "scale=" + scale
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.SWEEP)
                  ? "sweep=" + sweep
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.DIHEDRAL)
                  ? "dihedral=" + dihedral
                  : null),
              (!_unsetProperties.contains(AVLWing_Builder.Property.INCIDENCE)
                  ? "incidence=" + incidence
                  : null),
              "sections=" + sections)
          + "}";
    }
  }
}
