// Autogenerated code. Do not modify.
package standaloneutils.launchers.avl;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import java.io.File;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import org.apache.commons.math3.linear.RealMatrix;
import standaloneutils.launchers.avl.AVLBody;

/**
 * Auto-generated superclass of {@link AVLBody.Builder},
 * derived from the API of {@link AVLBody}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class AVLBody_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static AVLBody.Builder from(AVLBody value) {
    return new AVLBody.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    DESCRIPTION("description"),
    N_BODY("NBody"),
    B_SPACE("BSpace"),
    DUPLICATED("duplicated"),
    Y_DUPL("YDupl"),
    ORIGIN("origin"),
    SCALE("scale"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String description;
  private Integer NBody;
  private Double BSpace;
  private boolean duplicated;
  private Double YDupl;
  private java.lang.Double[] origin;
  private java.lang.Double[] scale;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private File bodyCoordFile = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private RealMatrix bodySectionInline = null;
  private final EnumSet<AVLBody_Builder.Property> _unsetProperties =
      EnumSet.allOf(AVLBody_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link AVLBody#getDescription()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public AVLBody.Builder setDescription(String description) {
    this.description = Preconditions.checkNotNull(description);
    _unsetProperties.remove(AVLBody_Builder.Property.DESCRIPTION);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#getDescription()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapDescription(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDescription(mapper.apply(getDescription()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getDescription()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDescription() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.DESCRIPTION), "description not set");
    return description;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getNBody()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code NBody} is null
   */
  public AVLBody.Builder setNBody(Integer NBody) {
    this.NBody = Preconditions.checkNotNull(NBody);
    _unsetProperties.remove(AVLBody_Builder.Property.N_BODY);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#getNBody()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapNBody(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNBody(mapper.apply(getNBody()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getNBody()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Integer getNBody() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.N_BODY), "NBody not set");
    return NBody;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBSpace()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code BSpace} is null
   */
  public AVLBody.Builder setBSpace(Double BSpace) {
    this.BSpace = Preconditions.checkNotNull(BSpace);
    _unsetProperties.remove(AVLBody_Builder.Property.B_SPACE);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#getBSpace()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapBSpace(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBSpace(mapper.apply(getBSpace()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getBSpace()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getBSpace() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.B_SPACE), "BSpace not set");
    return BSpace;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#isDuplicated()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder setDuplicated(boolean duplicated) {
    this.duplicated = duplicated;
    _unsetProperties.remove(AVLBody_Builder.Property.DUPLICATED);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#isDuplicated()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapDuplicated(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDuplicated(mapper.apply(isDuplicated()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#isDuplicated()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isDuplicated() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.DUPLICATED), "duplicated not set");
    return duplicated;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getYDupl()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code YDupl} is null
   */
  public AVLBody.Builder setYDupl(Double YDupl) {
    this.YDupl = Preconditions.checkNotNull(YDupl);
    _unsetProperties.remove(AVLBody_Builder.Property.Y_DUPL);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#getYDupl()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapYDupl(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setYDupl(mapper.apply(getYDupl()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getYDupl()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getYDupl() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.Y_DUPL), "YDupl not set");
    return YDupl;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getOrigin()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code origin} is null
   */
  public AVLBody.Builder setOrigin(java.lang.Double[] origin) {
    this.origin = Preconditions.checkNotNull(origin);
    _unsetProperties.remove(AVLBody_Builder.Property.ORIGIN);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#getOrigin()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapOrigin(UnaryOperator<java.lang.Double[]> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOrigin(mapper.apply(getOrigin()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getOrigin()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public java.lang.Double[] getOrigin() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.ORIGIN), "origin not set");
    return origin;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getScale()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code scale} is null
   */
  public AVLBody.Builder setScale(java.lang.Double[] scale) {
    this.scale = Preconditions.checkNotNull(scale);
    _unsetProperties.remove(AVLBody_Builder.Property.SCALE);
    return (AVLBody.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AVLBody#getScale()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AVLBody.Builder mapScale(UnaryOperator<java.lang.Double[]> mapper) {
    Preconditions.checkNotNull(mapper);
    return setScale(mapper.apply(getScale()));
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getScale()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public java.lang.Double[] getScale() {
    Preconditions.checkState(
        !_unsetProperties.contains(AVLBody_Builder.Property.SCALE), "scale not set");
    return scale;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodyCoordFile()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code bodyCoordFile} is null
   */
  public AVLBody.Builder setBodyCoordFile(File bodyCoordFile) {
    this.bodyCoordFile = Preconditions.checkNotNull(bodyCoordFile);
    return (AVLBody.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodyCoordFile()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder setBodyCoordFile(Optional<? extends File> bodyCoordFile) {
    if (bodyCoordFile.isPresent()) {
      return setBodyCoordFile(bodyCoordFile.get());
    } else {
      return clearBodyCoordFile();
    }
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodyCoordFile()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder setNullableBodyCoordFile(@Nullable File bodyCoordFile) {
    if (bodyCoordFile != null) {
      return setBodyCoordFile(bodyCoordFile);
    } else {
      return clearBodyCoordFile();
    }
  }

  /**
   * If the value to be returned by {@link AVLBody#getBodyCoordFile()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public AVLBody.Builder mapBodyCoordFile(UnaryOperator<File> mapper) {
    return setBodyCoordFile(getBodyCoordFile().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodyCoordFile()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder clearBodyCoordFile() {
    this.bodyCoordFile = null;
    return (AVLBody.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getBodyCoordFile()}.
   */
  public Optional<File> getBodyCoordFile() {
    return Optional.ofNullable(bodyCoordFile);
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodySectionInline()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code bodySectionInline} is null
   */
  public AVLBody.Builder setBodySectionInline(RealMatrix bodySectionInline) {
    this.bodySectionInline = Preconditions.checkNotNull(bodySectionInline);
    return (AVLBody.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodySectionInline()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder setBodySectionInline(Optional<? extends RealMatrix> bodySectionInline) {
    if (bodySectionInline.isPresent()) {
      return setBodySectionInline(bodySectionInline.get());
    } else {
      return clearBodySectionInline();
    }
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodySectionInline()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder setNullableBodySectionInline(@Nullable RealMatrix bodySectionInline) {
    if (bodySectionInline != null) {
      return setBodySectionInline(bodySectionInline);
    } else {
      return clearBodySectionInline();
    }
  }

  /**
   * If the value to be returned by {@link AVLBody#getBodySectionInline()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public AVLBody.Builder mapBodySectionInline(UnaryOperator<RealMatrix> mapper) {
    return setBodySectionInline(getBodySectionInline().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link AVLBody#getBodySectionInline()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public AVLBody.Builder clearBodySectionInline() {
    this.bodySectionInline = null;
    return (AVLBody.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link AVLBody#getBodySectionInline()}.
   */
  public Optional<RealMatrix> getBodySectionInline() {
    return Optional.ofNullable(bodySectionInline);
  }

  /**
   * Sets all property values using the given {@code AVLBody} as a template.
   */
  public AVLBody.Builder mergeFrom(AVLBody value) {
    AVLBody_Builder _defaults = new AVLBody.Builder();
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.DESCRIPTION)
        || !value.getDescription().equals(_defaults.getDescription())) {
      setDescription(value.getDescription());
    }
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.N_BODY)
        || !value.getNBody().equals(_defaults.getNBody())) {
      setNBody(value.getNBody());
    }
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.B_SPACE)
        || !value.getBSpace().equals(_defaults.getBSpace())) {
      setBSpace(value.getBSpace());
    }
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.DUPLICATED)
        || value.isDuplicated() != _defaults.isDuplicated()) {
      setDuplicated(value.isDuplicated());
    }
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.Y_DUPL)
        || !value.getYDupl().equals(_defaults.getYDupl())) {
      setYDupl(value.getYDupl());
    }
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.ORIGIN)
        || !value.getOrigin().equals(_defaults.getOrigin())) {
      setOrigin(value.getOrigin());
    }
    if (_defaults._unsetProperties.contains(AVLBody_Builder.Property.SCALE)
        || !value.getScale().equals(_defaults.getScale())) {
      setScale(value.getScale());
    }
    value.getBodyCoordFile().ifPresent(this::setBodyCoordFile);
    value.getBodySectionInline().ifPresent(this::setBodySectionInline);
    return (AVLBody.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public AVLBody.Builder mergeFrom(AVLBody.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    AVLBody_Builder base = (AVLBody_Builder) template;
    AVLBody_Builder _defaults = new AVLBody.Builder();
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.DESCRIPTION)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.DESCRIPTION)
            || !template.getDescription().equals(_defaults.getDescription()))) {
      setDescription(template.getDescription());
    }
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.N_BODY)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.N_BODY)
            || !template.getNBody().equals(_defaults.getNBody()))) {
      setNBody(template.getNBody());
    }
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.B_SPACE)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.B_SPACE)
            || !template.getBSpace().equals(_defaults.getBSpace()))) {
      setBSpace(template.getBSpace());
    }
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.DUPLICATED)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.DUPLICATED)
            || template.isDuplicated() != _defaults.isDuplicated())) {
      setDuplicated(template.isDuplicated());
    }
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.Y_DUPL)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.Y_DUPL)
            || !template.getYDupl().equals(_defaults.getYDupl()))) {
      setYDupl(template.getYDupl());
    }
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.ORIGIN)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.ORIGIN)
            || !template.getOrigin().equals(_defaults.getOrigin()))) {
      setOrigin(template.getOrigin());
    }
    if (!base._unsetProperties.contains(AVLBody_Builder.Property.SCALE)
        && (_defaults._unsetProperties.contains(AVLBody_Builder.Property.SCALE)
            || !template.getScale().equals(_defaults.getScale()))) {
      setScale(template.getScale());
    }
    template.getBodyCoordFile().ifPresent(this::setBodyCoordFile);
    template.getBodySectionInline().ifPresent(this::setBodySectionInline);
    return (AVLBody.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public AVLBody.Builder clear() {
    AVLBody_Builder _defaults = new AVLBody.Builder();
    description = _defaults.description;
    NBody = _defaults.NBody;
    BSpace = _defaults.BSpace;
    duplicated = _defaults.duplicated;
    YDupl = _defaults.YDupl;
    origin = _defaults.origin;
    scale = _defaults.scale;
    bodyCoordFile = _defaults.bodyCoordFile;
    bodySectionInline = _defaults.bodySectionInline;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (AVLBody.Builder) this;
  }

  /**
   * Returns a newly-created {@link AVLBody} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public AVLBody build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new AVLBody_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link AVLBody}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public AVLBody buildPartial() {
    return new AVLBody_Builder.Partial(this);
  }

  private static final class Value implements AVLBody {
    private final String description;
    private final Integer NBody;
    private final Double BSpace;
    private final boolean duplicated;
    private final Double YDupl;
    private final java.lang.Double[] origin;
    private final java.lang.Double[] scale;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final File bodyCoordFile;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final RealMatrix bodySectionInline;

    private Value(AVLBody_Builder builder) {
      this.description = builder.description;
      this.NBody = builder.NBody;
      this.BSpace = builder.BSpace;
      this.duplicated = builder.duplicated;
      this.YDupl = builder.YDupl;
      this.origin = builder.origin;
      this.scale = builder.scale;
      this.bodyCoordFile = builder.bodyCoordFile;
      this.bodySectionInline = builder.bodySectionInline;
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public Integer getNBody() {
      return NBody;
    }

    @Override
    public Double getBSpace() {
      return BSpace;
    }

    @Override
    public boolean isDuplicated() {
      return duplicated;
    }

    @Override
    public Double getYDupl() {
      return YDupl;
    }

    @Override
    public java.lang.Double[] getOrigin() {
      return origin;
    }

    @Override
    public java.lang.Double[] getScale() {
      return scale;
    }

    @Override
    public Optional<File> getBodyCoordFile() {
      return Optional.ofNullable(bodyCoordFile);
    }

    @Override
    public Optional<RealMatrix> getBodySectionInline() {
      return Optional.ofNullable(bodySectionInline);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLBody_Builder.Value)) {
        return false;
      }
      AVLBody_Builder.Value other = (AVLBody_Builder.Value) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(NBody, other.NBody)
          && Objects.equals(BSpace, other.BSpace)
          && Objects.equals(duplicated, other.duplicated)
          && Objects.equals(YDupl, other.YDupl)
          && Objects.equals(origin, other.origin)
          && Objects.equals(scale, other.scale)
          && Objects.equals(bodyCoordFile, other.bodyCoordFile)
          && Objects.equals(bodySectionInline, other.bodySectionInline);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          NBody,
          BSpace,
          duplicated,
          YDupl,
          origin,
          scale,
          bodyCoordFile,
          bodySectionInline);
    }

    @Override
    public String toString() {
      return "AVLBody{"
          + COMMA_JOINER.join(
              "description=" + description,
              "NBody=" + NBody,
              "BSpace=" + BSpace,
              "duplicated=" + duplicated,
              "YDupl=" + YDupl,
              "origin=" + origin,
              "scale=" + scale,
              (bodyCoordFile != null ? "bodyCoordFile=" + bodyCoordFile : null),
              (bodySectionInline != null ? "bodySectionInline=" + bodySectionInline : null))
          + "}";
    }
  }

  private static final class Partial implements AVLBody {
    private final String description;
    private final Integer NBody;
    private final Double BSpace;
    private final boolean duplicated;
    private final Double YDupl;
    private final java.lang.Double[] origin;
    private final java.lang.Double[] scale;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final File bodyCoordFile;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final RealMatrix bodySectionInline;
    private final EnumSet<AVLBody_Builder.Property> _unsetProperties;

    Partial(AVLBody_Builder builder) {
      this.description = builder.description;
      this.NBody = builder.NBody;
      this.BSpace = builder.BSpace;
      this.duplicated = builder.duplicated;
      this.YDupl = builder.YDupl;
      this.origin = builder.origin;
      this.scale = builder.scale;
      this.bodyCoordFile = builder.bodyCoordFile;
      this.bodySectionInline = builder.bodySectionInline;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getDescription() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.DESCRIPTION)) {
        throw new UnsupportedOperationException("description not set");
      }
      return description;
    }

    @Override
    public Integer getNBody() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.N_BODY)) {
        throw new UnsupportedOperationException("NBody not set");
      }
      return NBody;
    }

    @Override
    public Double getBSpace() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.B_SPACE)) {
        throw new UnsupportedOperationException("BSpace not set");
      }
      return BSpace;
    }

    @Override
    public boolean isDuplicated() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.DUPLICATED)) {
        throw new UnsupportedOperationException("duplicated not set");
      }
      return duplicated;
    }

    @Override
    public Double getYDupl() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.Y_DUPL)) {
        throw new UnsupportedOperationException("YDupl not set");
      }
      return YDupl;
    }

    @Override
    public java.lang.Double[] getOrigin() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.ORIGIN)) {
        throw new UnsupportedOperationException("origin not set");
      }
      return origin;
    }

    @Override
    public java.lang.Double[] getScale() {
      if (_unsetProperties.contains(AVLBody_Builder.Property.SCALE)) {
        throw new UnsupportedOperationException("scale not set");
      }
      return scale;
    }

    @Override
    public Optional<File> getBodyCoordFile() {
      return Optional.ofNullable(bodyCoordFile);
    }

    @Override
    public Optional<RealMatrix> getBodySectionInline() {
      return Optional.ofNullable(bodySectionInline);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AVLBody_Builder.Partial)) {
        return false;
      }
      AVLBody_Builder.Partial other = (AVLBody_Builder.Partial) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(NBody, other.NBody)
          && Objects.equals(BSpace, other.BSpace)
          && Objects.equals(duplicated, other.duplicated)
          && Objects.equals(YDupl, other.YDupl)
          && Objects.equals(origin, other.origin)
          && Objects.equals(scale, other.scale)
          && Objects.equals(bodyCoordFile, other.bodyCoordFile)
          && Objects.equals(bodySectionInline, other.bodySectionInline)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          NBody,
          BSpace,
          duplicated,
          YDupl,
          origin,
          scale,
          bodyCoordFile,
          bodySectionInline,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial AVLBody{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(AVLBody_Builder.Property.DESCRIPTION)
                  ? "description=" + description
                  : null),
              (!_unsetProperties.contains(AVLBody_Builder.Property.N_BODY)
                  ? "NBody=" + NBody
                  : null),
              (!_unsetProperties.contains(AVLBody_Builder.Property.B_SPACE)
                  ? "BSpace=" + BSpace
                  : null),
              (!_unsetProperties.contains(AVLBody_Builder.Property.DUPLICATED)
                  ? "duplicated=" + duplicated
                  : null),
              (!_unsetProperties.contains(AVLBody_Builder.Property.Y_DUPL)
                  ? "YDupl=" + YDupl
                  : null),
              (!_unsetProperties.contains(AVLBody_Builder.Property.ORIGIN)
                  ? "origin=" + origin
                  : null),
              (!_unsetProperties.contains(AVLBody_Builder.Property.SCALE)
                  ? "scale=" + scale
                  : null),
              (bodyCoordFile != null ? "bodyCoordFile=" + bodyCoordFile : null),
              (bodySectionInline != null ? "bodySectionInline=" + bodySectionInline : null))
          + "}";
    }
  }
}
