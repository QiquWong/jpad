// Autogenerated code. Do not modify.
package standaloneutils.launchers;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import standaloneutils.launchers.DatcomEngineType;
import standaloneutils.launchers.DatcomInputData;

/**
 * Auto-generated superclass of {@link DatcomInputData.Builder},
 * derived from the API of {@link DatcomInputData}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class DatcomInputData_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static DatcomInputData.Builder from(DatcomInputData value) {
    return new DatcomInputData.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    DESCRIPTION("description"),
    ENGINE_TYPE("engineType"),
    COMMAND__DIM("command_DIM"),
    COMMAND__TRIM("command_TRIM"),
    COMMAND__DAMP("command_DAMP"),
    COMMAND__PART("command_PART"),
    COMMAND__DERIV("command_DERIV"),
    FLTCON__GAMMA("fltcon_GAMMA"),
    FLTCON__LOOP("fltcon_LOOP"),
    FLTCON__RNNUB("fltcon_RNNUB"),
    OPTINS__BLREF("optins_BLREF"),
    OPTINS__SREF("optins_SREF"),
    OPTINS__CBARR("optins_CBARR"),
    SYNTHS__XW("synths_XW"),
    SYNTHS__ZW("synths_ZW"),
    SYNTHS__ALIW("synths_ALIW"),
    SYNTHS__XCG("synths_XCG"),
    SYNTHS__ZCG("synths_ZCG"),
    SYNTHS__XH("synths_XH"),
    SYNTHS__ZH("synths_ZH"),
    SYNTHS__XV("synths_XV"),
    SYNTHS__ZV("synths_ZV"),
    SYNTHS__XVF("synths_XVF"),
    SYNTHS__ZVF("synths_ZVF"),
    SYNTHS__VERTUP("synths_VERTUP"),
    BODY__BNOSE("body_BNOSE"),
    BODY__BTAIL("body_BTAIL"),
    BODY__BLA("body_BLA"),
    WGPLNF__CHRDR("wgplnf_CHRDR"),
    WGPLNF__CHRDTP("wgplnf_CHRDTP"),
    WGPLNF__SSPN("wgplnf_SSPN"),
    WGPLNF__SSPNE("wgplnf_SSPNE"),
    WGPLNF__SAVSI("wgplnf_SAVSI"),
    WGPLNF__CHSTAT("wgplnf_CHSTAT"),
    WGPLNF__TWISTA("wgplnf_TWISTA"),
    WGPLNF__DHDADI("wgplnf_DHDADI"),
    WGPLNF__TYPE("wgplnf_TYPE"),
    VTPLNF__CHRDR("vtplnf_CHRDR"),
    VTPLNF__CHRDTP("vtplnf_CHRDTP"),
    VTPLNF__SSPN("vtplnf_SSPN"),
    VTPLNF__SSPNE("vtplnf_SSPNE"),
    VTPLNF__SAVSI("vtplnf_SAVSI"),
    VTPLNF__CHSTAT("vtplnf_CHSTAT"),
    VTPLNF__TWISTA("vtplnf_TWISTA"),
    VTPLNF__DHDADI("vtplnf_DHDADI"),
    VTPLNF__TYPE("vtplnf_TYPE"),
    HTPLNF__CHRDR("htplnf_CHRDR"),
    HTPLNF__CHRDTP("htplnf_CHRDTP"),
    HTPLNF__SSPN("htplnf_SSPN"),
    HTPLNF__SSPNE("htplnf_SSPNE"),
    HTPLNF__SAVSI("htplnf_SAVSI"),
    HTPLNF__CHSTAT("htplnf_CHSTAT"),
    HTPLNF__TWISTA("htplnf_TWISTA"),
    HTPLNF__DHDADI("htplnf_DHDADI"),
    HTPLNF__TYPE("htplnf_TYPE"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String description;
  private DatcomEngineType engineType;
  private String command_DIM;
  private boolean command_TRIM;
  private boolean command_DAMP;
  private boolean command_PART;
  private String command_DERIV;
  private final ArrayList<Double> fltcon_MACH = new ArrayList<>();
  private final ArrayList<Double> fltcon_ALT = new ArrayList<>();
  private final ArrayList<Double> fltcon_ALSCHD = new ArrayList<>();
  private Double fltcon_GAMMA;
  private int fltcon_LOOP;
  private Double fltcon_RNNUB;
  private Double optins_BLREF;
  private Double optins_SREF;
  private Double optins_CBARR;
  private Double synths_XW;
  private Double synths_ZW;
  private Double synths_ALIW;
  private Double synths_XCG;
  private Double synths_ZCG;
  private Double synths_XH;
  private Double synths_ZH;
  private Double synths_XV;
  private Double synths_ZV;
  private Double synths_XVF;
  private Double synths_ZVF;
  private boolean synths_VERTUP;
  private Double body_BNOSE;
  private Double body_BTAIL;
  private Double body_BLA;
  private final ArrayList<Double> body_X = new ArrayList<>();
  private final ArrayList<Double> body_ZU = new ArrayList<>();
  private final ArrayList<Double> body_ZL = new ArrayList<>();
  private final ArrayList<Double> body_S = new ArrayList<>();
  private Double wgplnf_CHRDR;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double wgplnf_CHRDBP = null;
  private Double wgplnf_CHRDTP;
  private Double wgplnf_SSPN;
  private Double wgplnf_SSPNE;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double wgplnf_SSPNOP = null;
  private Double wgplnf_SAVSI;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double wgplnf_SAVSO = null;
  private Double wgplnf_CHSTAT;
  private Double wgplnf_TWISTA;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double wgplnf_SSPNDD = null;
  private Double wgplnf_DHDADI;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double wgplnf_DHDADO = null;
  private int wgplnf_TYPE;
  private Double vtplnf_CHRDR;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double vtplnf_CHRDBP = null;
  private Double vtplnf_CHRDTP;
  private Double vtplnf_SSPN;
  private Double vtplnf_SSPNE;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double vtplnf_SSPNOP = null;
  private Double vtplnf_SAVSI;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double vtplnf_SAVSO = null;
  private Double vtplnf_CHSTAT;
  private Double vtplnf_TWISTA;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double vtplnf_SSPNDD = null;
  private Double vtplnf_DHDADI;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double vtplnf_DHDADO = null;
  private int vtplnf_TYPE;
  private Double htplnf_CHRDR;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double htplnf_CHRDBP = null;
  private Double htplnf_CHRDTP;
  private Double htplnf_SSPN;
  private Double htplnf_SSPNE;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double htplnf_SSPNOP = null;
  private Double htplnf_SAVSI;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double htplnf_SAVSO = null;
  private Double htplnf_CHSTAT;
  private Double htplnf_TWISTA;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double htplnf_SSPNDD = null;
  private Double htplnf_DHDADI;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double htplnf_DHDADO = null;
  private int htplnf_TYPE;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_AIETLJ = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_AMBSTP = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_AMBTMP = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private List<Double> jetpwr_JEALOC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_JELLOC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_JERAD = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_JEVLOC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_JIALOC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_JINLTA = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_THSTCJ = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double jetpwr_JEANGL = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Integer jetpwr_NENGSJ = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Integer propwr_NENGSP = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_AIETLP = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_THSTCP = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_PHALOC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_PHVLOC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_PRPRAD = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_ENGFCT = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_BWAPR3 = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_BWAPR6 = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_BWAPR9 = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Integer propwr_NOPBPE = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_BAPR75 = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double propwr_YP = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Boolean propwr_CROT = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Integer symflp_FTYPE = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private List<Double> symflp_DELTA = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_SPANFI = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_SPANFO = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_CHRDFI = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_CHRDFO = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Integer symflp_NTYPE = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_CB = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_TC = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_PHETE = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Double symflp_PHETEP = null;
  private final EnumSet<DatcomInputData_Builder.Property> _unsetProperties =
      EnumSet.allOf(DatcomInputData_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link DatcomInputData#getDescription()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public DatcomInputData.Builder setDescription(String description) {
    this.description = Preconditions.checkNotNull(description);
    _unsetProperties.remove(DatcomInputData_Builder.Property.DESCRIPTION);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getDescription()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapDescription(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDescription(mapper.apply(getDescription()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getDescription()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDescription() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.DESCRIPTION),
        "description not set");
    return description;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getEngineType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code engineType} is null
   */
  public DatcomInputData.Builder setEngineType(DatcomEngineType engineType) {
    this.engineType = Preconditions.checkNotNull(engineType);
    _unsetProperties.remove(DatcomInputData_Builder.Property.ENGINE_TYPE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getEngineType()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapEngineType(UnaryOperator<DatcomEngineType> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEngineType(mapper.apply(getEngineType()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getEngineType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomEngineType getEngineType() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.ENGINE_TYPE),
        "engineType not set");
    return engineType;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getCommand_DIM()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code command_DIM} is null
   */
  public DatcomInputData.Builder setCommand_DIM(String command_DIM) {
    this.command_DIM = Preconditions.checkNotNull(command_DIM);
    _unsetProperties.remove(DatcomInputData_Builder.Property.COMMAND__DIM);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getCommand_DIM()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapCommand_DIM(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommand_DIM(mapper.apply(getCommand_DIM()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getCommand_DIM()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getCommand_DIM() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DIM),
        "command_DIM not set");
    return command_DIM;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getCommand_TRIM()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setCommand_TRIM(boolean command_TRIM) {
    this.command_TRIM = command_TRIM;
    _unsetProperties.remove(DatcomInputData_Builder.Property.COMMAND__TRIM);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getCommand_TRIM()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapCommand_TRIM(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommand_TRIM(mapper.apply(getCommand_TRIM()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getCommand_TRIM()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean getCommand_TRIM() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__TRIM),
        "command_TRIM not set");
    return command_TRIM;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getCommand_DAMP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setCommand_DAMP(boolean command_DAMP) {
    this.command_DAMP = command_DAMP;
    _unsetProperties.remove(DatcomInputData_Builder.Property.COMMAND__DAMP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getCommand_DAMP()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapCommand_DAMP(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommand_DAMP(mapper.apply(getCommand_DAMP()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getCommand_DAMP()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean getCommand_DAMP() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DAMP),
        "command_DAMP not set");
    return command_DAMP;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getCommand_PART()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setCommand_PART(boolean command_PART) {
    this.command_PART = command_PART;
    _unsetProperties.remove(DatcomInputData_Builder.Property.COMMAND__PART);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getCommand_PART()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapCommand_PART(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommand_PART(mapper.apply(getCommand_PART()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getCommand_PART()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean getCommand_PART() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__PART),
        "command_PART not set");
    return command_PART;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getCommand_DERIV()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code command_DERIV} is null
   */
  public DatcomInputData.Builder setCommand_DERIV(String command_DERIV) {
    this.command_DERIV = Preconditions.checkNotNull(command_DERIV);
    _unsetProperties.remove(DatcomInputData_Builder.Property.COMMAND__DERIV);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getCommand_DERIV()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapCommand_DERIV(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommand_DERIV(mapper.apply(getCommand_DERIV()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getCommand_DERIV()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getCommand_DERIV() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DERIV),
        "command_DERIV not set");
    return command_DERIV;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getFltcon_MACH()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addFltcon_MACH(double element) {
    this.fltcon_MACH.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getFltcon_MACH()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addFltcon_MACH(double... elements) {
    fltcon_MACH.ensureCapacity(fltcon_MACH.size() + elements.length);
    for (double element : elements) {
      addFltcon_MACH(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getFltcon_MACH()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllFltcon_MACH(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      fltcon_MACH.ensureCapacity(fltcon_MACH.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addFltcon_MACH(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getFltcon_MACH()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateFltcon_MACH(Consumer<? super List<Double>> mutator) {
    // If addFltcon_MACH is overridden, this method will be updated to delegate to it
    mutator.accept(fltcon_MACH);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getFltcon_MACH()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearFltcon_MACH() {
    this.fltcon_MACH.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getFltcon_MACH()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getFltcon_MACH() {
    return Collections.unmodifiableList(fltcon_MACH);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getFltcon_ALT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addFltcon_ALT(double element) {
    this.fltcon_ALT.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getFltcon_ALT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addFltcon_ALT(double... elements) {
    fltcon_ALT.ensureCapacity(fltcon_ALT.size() + elements.length);
    for (double element : elements) {
      addFltcon_ALT(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getFltcon_ALT()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllFltcon_ALT(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      fltcon_ALT.ensureCapacity(fltcon_ALT.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addFltcon_ALT(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getFltcon_ALT()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateFltcon_ALT(Consumer<? super List<Double>> mutator) {
    // If addFltcon_ALT is overridden, this method will be updated to delegate to it
    mutator.accept(fltcon_ALT);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getFltcon_ALT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearFltcon_ALT() {
    this.fltcon_ALT.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getFltcon_ALT()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getFltcon_ALT() {
    return Collections.unmodifiableList(fltcon_ALT);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getFltcon_ALSCHD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addFltcon_ALSCHD(double element) {
    this.fltcon_ALSCHD.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getFltcon_ALSCHD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addFltcon_ALSCHD(double... elements) {
    fltcon_ALSCHD.ensureCapacity(fltcon_ALSCHD.size() + elements.length);
    for (double element : elements) {
      addFltcon_ALSCHD(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getFltcon_ALSCHD()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllFltcon_ALSCHD(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      fltcon_ALSCHD.ensureCapacity(fltcon_ALSCHD.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addFltcon_ALSCHD(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getFltcon_ALSCHD()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateFltcon_ALSCHD(Consumer<? super List<Double>> mutator) {
    // If addFltcon_ALSCHD is overridden, this method will be updated to delegate to it
    mutator.accept(fltcon_ALSCHD);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getFltcon_ALSCHD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearFltcon_ALSCHD() {
    this.fltcon_ALSCHD.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getFltcon_ALSCHD()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getFltcon_ALSCHD() {
    return Collections.unmodifiableList(fltcon_ALSCHD);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getFltcon_GAMMA()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fltcon_GAMMA} is null
   */
  public DatcomInputData.Builder setFltcon_GAMMA(Double fltcon_GAMMA) {
    this.fltcon_GAMMA = Preconditions.checkNotNull(fltcon_GAMMA);
    _unsetProperties.remove(DatcomInputData_Builder.Property.FLTCON__GAMMA);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getFltcon_GAMMA()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapFltcon_GAMMA(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFltcon_GAMMA(mapper.apply(getFltcon_GAMMA()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getFltcon_GAMMA()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getFltcon_GAMMA() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__GAMMA),
        "fltcon_GAMMA not set");
    return fltcon_GAMMA;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getFltcon_LOOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setFltcon_LOOP(int fltcon_LOOP) {
    this.fltcon_LOOP = fltcon_LOOP;
    _unsetProperties.remove(DatcomInputData_Builder.Property.FLTCON__LOOP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getFltcon_LOOP()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapFltcon_LOOP(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFltcon_LOOP(mapper.apply(getFltcon_LOOP()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getFltcon_LOOP()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getFltcon_LOOP() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__LOOP),
        "fltcon_LOOP not set");
    return fltcon_LOOP;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getFltcon_RNNUB()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fltcon_RNNUB} is null
   */
  public DatcomInputData.Builder setFltcon_RNNUB(Double fltcon_RNNUB) {
    this.fltcon_RNNUB = Preconditions.checkNotNull(fltcon_RNNUB);
    _unsetProperties.remove(DatcomInputData_Builder.Property.FLTCON__RNNUB);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getFltcon_RNNUB()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapFltcon_RNNUB(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFltcon_RNNUB(mapper.apply(getFltcon_RNNUB()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getFltcon_RNNUB()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getFltcon_RNNUB() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__RNNUB),
        "fltcon_RNNUB not set");
    return fltcon_RNNUB;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getOptins_BLREF()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code optins_BLREF} is null
   */
  public DatcomInputData.Builder setOptins_BLREF(Double optins_BLREF) {
    this.optins_BLREF = Preconditions.checkNotNull(optins_BLREF);
    _unsetProperties.remove(DatcomInputData_Builder.Property.OPTINS__BLREF);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getOptins_BLREF()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapOptins_BLREF(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOptins_BLREF(mapper.apply(getOptins_BLREF()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getOptins_BLREF()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getOptins_BLREF() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__BLREF),
        "optins_BLREF not set");
    return optins_BLREF;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getOptins_SREF()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code optins_SREF} is null
   */
  public DatcomInputData.Builder setOptins_SREF(Double optins_SREF) {
    this.optins_SREF = Preconditions.checkNotNull(optins_SREF);
    _unsetProperties.remove(DatcomInputData_Builder.Property.OPTINS__SREF);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getOptins_SREF()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapOptins_SREF(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOptins_SREF(mapper.apply(getOptins_SREF()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getOptins_SREF()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getOptins_SREF() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__SREF),
        "optins_SREF not set");
    return optins_SREF;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getOptins_CBARR()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code optins_CBARR} is null
   */
  public DatcomInputData.Builder setOptins_CBARR(Double optins_CBARR) {
    this.optins_CBARR = Preconditions.checkNotNull(optins_CBARR);
    _unsetProperties.remove(DatcomInputData_Builder.Property.OPTINS__CBARR);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getOptins_CBARR()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapOptins_CBARR(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOptins_CBARR(mapper.apply(getOptins_CBARR()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getOptins_CBARR()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getOptins_CBARR() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__CBARR),
        "optins_CBARR not set");
    return optins_CBARR;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_XW()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_XW} is null
   */
  public DatcomInputData.Builder setSynths_XW(Double synths_XW) {
    this.synths_XW = Preconditions.checkNotNull(synths_XW);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__XW);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_XW()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_XW(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_XW(mapper.apply(getSynths_XW()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_XW()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_XW() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XW),
        "synths_XW not set");
    return synths_XW;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_ZW()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_ZW} is null
   */
  public DatcomInputData.Builder setSynths_ZW(Double synths_ZW) {
    this.synths_ZW = Preconditions.checkNotNull(synths_ZW);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__ZW);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_ZW()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_ZW(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_ZW(mapper.apply(getSynths_ZW()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_ZW()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_ZW() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZW),
        "synths_ZW not set");
    return synths_ZW;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_ALIW()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_ALIW} is null
   */
  public DatcomInputData.Builder setSynths_ALIW(Double synths_ALIW) {
    this.synths_ALIW = Preconditions.checkNotNull(synths_ALIW);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__ALIW);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_ALIW()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_ALIW(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_ALIW(mapper.apply(getSynths_ALIW()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_ALIW()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_ALIW() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ALIW),
        "synths_ALIW not set");
    return synths_ALIW;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_XCG()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_XCG} is null
   */
  public DatcomInputData.Builder setSynths_XCG(Double synths_XCG) {
    this.synths_XCG = Preconditions.checkNotNull(synths_XCG);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__XCG);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_XCG()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_XCG(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_XCG(mapper.apply(getSynths_XCG()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_XCG()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_XCG() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XCG),
        "synths_XCG not set");
    return synths_XCG;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_ZCG()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_ZCG} is null
   */
  public DatcomInputData.Builder setSynths_ZCG(Double synths_ZCG) {
    this.synths_ZCG = Preconditions.checkNotNull(synths_ZCG);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__ZCG);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_ZCG()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_ZCG(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_ZCG(mapper.apply(getSynths_ZCG()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_ZCG()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_ZCG() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZCG),
        "synths_ZCG not set");
    return synths_ZCG;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_XH()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_XH} is null
   */
  public DatcomInputData.Builder setSynths_XH(Double synths_XH) {
    this.synths_XH = Preconditions.checkNotNull(synths_XH);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__XH);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_XH()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_XH(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_XH(mapper.apply(getSynths_XH()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_XH()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_XH() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XH),
        "synths_XH not set");
    return synths_XH;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_ZH()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_ZH} is null
   */
  public DatcomInputData.Builder setSynths_ZH(Double synths_ZH) {
    this.synths_ZH = Preconditions.checkNotNull(synths_ZH);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__ZH);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_ZH()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_ZH(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_ZH(mapper.apply(getSynths_ZH()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_ZH()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_ZH() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZH),
        "synths_ZH not set");
    return synths_ZH;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_XV()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_XV} is null
   */
  public DatcomInputData.Builder setSynths_XV(Double synths_XV) {
    this.synths_XV = Preconditions.checkNotNull(synths_XV);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__XV);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_XV()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_XV(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_XV(mapper.apply(getSynths_XV()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_XV()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_XV() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XV),
        "synths_XV not set");
    return synths_XV;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_ZV()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_ZV} is null
   */
  public DatcomInputData.Builder setSynths_ZV(Double synths_ZV) {
    this.synths_ZV = Preconditions.checkNotNull(synths_ZV);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__ZV);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_ZV()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_ZV(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_ZV(mapper.apply(getSynths_ZV()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_ZV()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_ZV() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZV),
        "synths_ZV not set");
    return synths_ZV;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_XVF()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_XVF} is null
   */
  public DatcomInputData.Builder setSynths_XVF(Double synths_XVF) {
    this.synths_XVF = Preconditions.checkNotNull(synths_XVF);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__XVF);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_XVF()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_XVF(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_XVF(mapper.apply(getSynths_XVF()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_XVF()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_XVF() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XVF),
        "synths_XVF not set");
    return synths_XVF;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_ZVF()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code synths_ZVF} is null
   */
  public DatcomInputData.Builder setSynths_ZVF(Double synths_ZVF) {
    this.synths_ZVF = Preconditions.checkNotNull(synths_ZVF);
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__ZVF);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_ZVF()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_ZVF(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_ZVF(mapper.apply(getSynths_ZVF()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_ZVF()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getSynths_ZVF() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZVF),
        "synths_ZVF not set");
    return synths_ZVF;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSynths_VERTUP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSynths_VERTUP(boolean synths_VERTUP) {
    this.synths_VERTUP = synths_VERTUP;
    _unsetProperties.remove(DatcomInputData_Builder.Property.SYNTHS__VERTUP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getSynths_VERTUP()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapSynths_VERTUP(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSynths_VERTUP(mapper.apply(getSynths_VERTUP()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSynths_VERTUP()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean getSynths_VERTUP() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__VERTUP),
        "synths_VERTUP not set");
    return synths_VERTUP;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getBody_BNOSE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code body_BNOSE} is null
   */
  public DatcomInputData.Builder setBody_BNOSE(Double body_BNOSE) {
    this.body_BNOSE = Preconditions.checkNotNull(body_BNOSE);
    _unsetProperties.remove(DatcomInputData_Builder.Property.BODY__BNOSE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getBody_BNOSE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapBody_BNOSE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBody_BNOSE(mapper.apply(getBody_BNOSE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getBody_BNOSE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getBody_BNOSE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BNOSE),
        "body_BNOSE not set");
    return body_BNOSE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getBody_BTAIL()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code body_BTAIL} is null
   */
  public DatcomInputData.Builder setBody_BTAIL(Double body_BTAIL) {
    this.body_BTAIL = Preconditions.checkNotNull(body_BTAIL);
    _unsetProperties.remove(DatcomInputData_Builder.Property.BODY__BTAIL);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getBody_BTAIL()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapBody_BTAIL(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBody_BTAIL(mapper.apply(getBody_BTAIL()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getBody_BTAIL()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getBody_BTAIL() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BTAIL),
        "body_BTAIL not set");
    return body_BTAIL;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getBody_BLA()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code body_BLA} is null
   */
  public DatcomInputData.Builder setBody_BLA(Double body_BLA) {
    this.body_BLA = Preconditions.checkNotNull(body_BLA);
    _unsetProperties.remove(DatcomInputData_Builder.Property.BODY__BLA);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getBody_BLA()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapBody_BLA(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBody_BLA(mapper.apply(getBody_BLA()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getBody_BLA()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getBody_BLA() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BLA), "body_BLA not set");
    return body_BLA;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getBody_X()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_X(double element) {
    this.body_X.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_X()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_X(double... elements) {
    body_X.ensureCapacity(body_X.size() + elements.length);
    for (double element : elements) {
      addBody_X(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_X()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllBody_X(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      body_X.ensureCapacity(body_X.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addBody_X(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getBody_X()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateBody_X(Consumer<? super List<Double>> mutator) {
    // If addBody_X is overridden, this method will be updated to delegate to it
    mutator.accept(body_X);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getBody_X()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearBody_X() {
    this.body_X.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getBody_X()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getBody_X() {
    return Collections.unmodifiableList(body_X);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getBody_ZU()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_ZU(double element) {
    this.body_ZU.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_ZU()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_ZU(double... elements) {
    body_ZU.ensureCapacity(body_ZU.size() + elements.length);
    for (double element : elements) {
      addBody_ZU(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_ZU()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllBody_ZU(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      body_ZU.ensureCapacity(body_ZU.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addBody_ZU(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getBody_ZU()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateBody_ZU(Consumer<? super List<Double>> mutator) {
    // If addBody_ZU is overridden, this method will be updated to delegate to it
    mutator.accept(body_ZU);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getBody_ZU()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearBody_ZU() {
    this.body_ZU.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getBody_ZU()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getBody_ZU() {
    return Collections.unmodifiableList(body_ZU);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getBody_ZL()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_ZL(double element) {
    this.body_ZL.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_ZL()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_ZL(double... elements) {
    body_ZL.ensureCapacity(body_ZL.size() + elements.length);
    for (double element : elements) {
      addBody_ZL(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_ZL()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllBody_ZL(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      body_ZL.ensureCapacity(body_ZL.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addBody_ZL(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getBody_ZL()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateBody_ZL(Consumer<? super List<Double>> mutator) {
    // If addBody_ZL is overridden, this method will be updated to delegate to it
    mutator.accept(body_ZL);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getBody_ZL()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearBody_ZL() {
    this.body_ZL.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getBody_ZL()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getBody_ZL() {
    return Collections.unmodifiableList(body_ZL);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link DatcomInputData#getBody_S()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_S(double element) {
    this.body_S.add(element);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_S()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder addBody_S(double... elements) {
    body_S.ensureCapacity(body_S.size() + elements.length);
    for (double element : elements) {
      addBody_S(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link DatcomInputData#getBody_S()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public DatcomInputData.Builder addAllBody_S(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      body_S.ensureCapacity(body_S.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addBody_S(element);
    }
    return (DatcomInputData.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link DatcomInputData#getBody_S()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public DatcomInputData.Builder mutateBody_S(Consumer<? super List<Double>> mutator) {
    // If addBody_S is overridden, this method will be updated to delegate to it
    mutator.accept(body_S);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link DatcomInputData#getBody_S()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearBody_S() {
    this.body_S.clear();
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link DatcomInputData#getBody_S()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getBody_S() {
    return Collections.unmodifiableList(body_S);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHRDR()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_CHRDR} is null
   */
  public DatcomInputData.Builder setWgplnf_CHRDR(Double wgplnf_CHRDR) {
    this.wgplnf_CHRDR = Preconditions.checkNotNull(wgplnf_CHRDR);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__CHRDR);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_CHRDR()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_CHRDR(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_CHRDR(mapper.apply(getWgplnf_CHRDR()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_CHRDR()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_CHRDR() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDR),
        "wgplnf_CHRDR not set");
    return wgplnf_CHRDR;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_CHRDBP(double wgplnf_CHRDBP) {
    this.wgplnf_CHRDBP = wgplnf_CHRDBP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_CHRDBP(Optional<? extends Double> wgplnf_CHRDBP) {
    if (wgplnf_CHRDBP.isPresent()) {
      return setWgplnf_CHRDBP(wgplnf_CHRDBP.get());
    } else {
      return clearWgplnf_CHRDBP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableWgplnf_CHRDBP(@Nullable Double wgplnf_CHRDBP) {
    if (wgplnf_CHRDBP != null) {
      return setWgplnf_CHRDBP(wgplnf_CHRDBP);
    } else {
      return clearWgplnf_CHRDBP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getWgplnf_CHRDBP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapWgplnf_CHRDBP(UnaryOperator<Double> mapper) {
    return setWgplnf_CHRDBP(getWgplnf_CHRDBP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHRDBP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearWgplnf_CHRDBP() {
    this.wgplnf_CHRDBP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_CHRDBP()}.
   */
  public Optional<Double> getWgplnf_CHRDBP() {
    return Optional.ofNullable(wgplnf_CHRDBP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHRDTP()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_CHRDTP} is null
   */
  public DatcomInputData.Builder setWgplnf_CHRDTP(Double wgplnf_CHRDTP) {
    this.wgplnf_CHRDTP = Preconditions.checkNotNull(wgplnf_CHRDTP);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__CHRDTP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_CHRDTP()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_CHRDTP(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_CHRDTP(mapper.apply(getWgplnf_CHRDTP()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_CHRDTP()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_CHRDTP() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDTP),
        "wgplnf_CHRDTP not set");
    return wgplnf_CHRDTP;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPN()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_SSPN} is null
   */
  public DatcomInputData.Builder setWgplnf_SSPN(Double wgplnf_SSPN) {
    this.wgplnf_SSPN = Preconditions.checkNotNull(wgplnf_SSPN);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__SSPN);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_SSPN()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_SSPN(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_SSPN(mapper.apply(getWgplnf_SSPN()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_SSPN()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_SSPN() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPN),
        "wgplnf_SSPN not set");
    return wgplnf_SSPN;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_SSPNE} is null
   */
  public DatcomInputData.Builder setWgplnf_SSPNE(Double wgplnf_SSPNE) {
    this.wgplnf_SSPNE = Preconditions.checkNotNull(wgplnf_SSPNE);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__SSPNE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_SSPNE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_SSPNE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_SSPNE(mapper.apply(getWgplnf_SSPNE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_SSPNE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_SSPNE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPNE),
        "wgplnf_SSPNE not set");
    return wgplnf_SSPNE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_SSPNOP(double wgplnf_SSPNOP) {
    this.wgplnf_SSPNOP = wgplnf_SSPNOP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_SSPNOP(Optional<? extends Double> wgplnf_SSPNOP) {
    if (wgplnf_SSPNOP.isPresent()) {
      return setWgplnf_SSPNOP(wgplnf_SSPNOP.get());
    } else {
      return clearWgplnf_SSPNOP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableWgplnf_SSPNOP(@Nullable Double wgplnf_SSPNOP) {
    if (wgplnf_SSPNOP != null) {
      return setWgplnf_SSPNOP(wgplnf_SSPNOP);
    } else {
      return clearWgplnf_SSPNOP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getWgplnf_SSPNOP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapWgplnf_SSPNOP(UnaryOperator<Double> mapper) {
    return setWgplnf_SSPNOP(getWgplnf_SSPNOP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNOP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearWgplnf_SSPNOP() {
    this.wgplnf_SSPNOP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_SSPNOP()}.
   */
  public Optional<Double> getWgplnf_SSPNOP() {
    return Optional.ofNullable(wgplnf_SSPNOP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SAVSI()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_SAVSI} is null
   */
  public DatcomInputData.Builder setWgplnf_SAVSI(Double wgplnf_SAVSI) {
    this.wgplnf_SAVSI = Preconditions.checkNotNull(wgplnf_SAVSI);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__SAVSI);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_SAVSI()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_SAVSI(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_SAVSI(mapper.apply(getWgplnf_SAVSI()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_SAVSI()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_SAVSI() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SAVSI),
        "wgplnf_SAVSI not set");
    return wgplnf_SAVSI;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_SAVSO(double wgplnf_SAVSO) {
    this.wgplnf_SAVSO = wgplnf_SAVSO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_SAVSO(Optional<? extends Double> wgplnf_SAVSO) {
    if (wgplnf_SAVSO.isPresent()) {
      return setWgplnf_SAVSO(wgplnf_SAVSO.get());
    } else {
      return clearWgplnf_SAVSO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableWgplnf_SAVSO(@Nullable Double wgplnf_SAVSO) {
    if (wgplnf_SAVSO != null) {
      return setWgplnf_SAVSO(wgplnf_SAVSO);
    } else {
      return clearWgplnf_SAVSO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getWgplnf_SAVSO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapWgplnf_SAVSO(UnaryOperator<Double> mapper) {
    return setWgplnf_SAVSO(getWgplnf_SAVSO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SAVSO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearWgplnf_SAVSO() {
    this.wgplnf_SAVSO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_SAVSO()}.
   */
  public Optional<Double> getWgplnf_SAVSO() {
    return Optional.ofNullable(wgplnf_SAVSO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_CHSTAT()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_CHSTAT} is null
   */
  public DatcomInputData.Builder setWgplnf_CHSTAT(Double wgplnf_CHSTAT) {
    this.wgplnf_CHSTAT = Preconditions.checkNotNull(wgplnf_CHSTAT);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__CHSTAT);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_CHSTAT()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_CHSTAT(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_CHSTAT(mapper.apply(getWgplnf_CHSTAT()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_CHSTAT()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_CHSTAT() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHSTAT),
        "wgplnf_CHSTAT not set");
    return wgplnf_CHSTAT;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_TWISTA()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_TWISTA} is null
   */
  public DatcomInputData.Builder setWgplnf_TWISTA(Double wgplnf_TWISTA) {
    this.wgplnf_TWISTA = Preconditions.checkNotNull(wgplnf_TWISTA);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__TWISTA);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_TWISTA()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_TWISTA(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_TWISTA(mapper.apply(getWgplnf_TWISTA()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_TWISTA()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_TWISTA() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TWISTA),
        "wgplnf_TWISTA not set");
    return wgplnf_TWISTA;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_SSPNDD(double wgplnf_SSPNDD) {
    this.wgplnf_SSPNDD = wgplnf_SSPNDD;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_SSPNDD(Optional<? extends Double> wgplnf_SSPNDD) {
    if (wgplnf_SSPNDD.isPresent()) {
      return setWgplnf_SSPNDD(wgplnf_SSPNDD.get());
    } else {
      return clearWgplnf_SSPNDD();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableWgplnf_SSPNDD(@Nullable Double wgplnf_SSPNDD) {
    if (wgplnf_SSPNDD != null) {
      return setWgplnf_SSPNDD(wgplnf_SSPNDD);
    } else {
      return clearWgplnf_SSPNDD();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getWgplnf_SSPNDD()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapWgplnf_SSPNDD(UnaryOperator<Double> mapper) {
    return setWgplnf_SSPNDD(getWgplnf_SSPNDD().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_SSPNDD()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearWgplnf_SSPNDD() {
    this.wgplnf_SSPNDD = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_SSPNDD()}.
   */
  public Optional<Double> getWgplnf_SSPNDD() {
    return Optional.ofNullable(wgplnf_SSPNDD);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_DHDADI()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wgplnf_DHDADI} is null
   */
  public DatcomInputData.Builder setWgplnf_DHDADI(Double wgplnf_DHDADI) {
    this.wgplnf_DHDADI = Preconditions.checkNotNull(wgplnf_DHDADI);
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__DHDADI);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_DHDADI()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_DHDADI(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_DHDADI(mapper.apply(getWgplnf_DHDADI()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_DHDADI()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWgplnf_DHDADI() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__DHDADI),
        "wgplnf_DHDADI not set");
    return wgplnf_DHDADI;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_DHDADO(double wgplnf_DHDADO) {
    this.wgplnf_DHDADO = wgplnf_DHDADO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_DHDADO(Optional<? extends Double> wgplnf_DHDADO) {
    if (wgplnf_DHDADO.isPresent()) {
      return setWgplnf_DHDADO(wgplnf_DHDADO.get());
    } else {
      return clearWgplnf_DHDADO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableWgplnf_DHDADO(@Nullable Double wgplnf_DHDADO) {
    if (wgplnf_DHDADO != null) {
      return setWgplnf_DHDADO(wgplnf_DHDADO);
    } else {
      return clearWgplnf_DHDADO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getWgplnf_DHDADO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapWgplnf_DHDADO(UnaryOperator<Double> mapper) {
    return setWgplnf_DHDADO(getWgplnf_DHDADO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_DHDADO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearWgplnf_DHDADO() {
    this.wgplnf_DHDADO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_DHDADO()}.
   */
  public Optional<Double> getWgplnf_DHDADO() {
    return Optional.ofNullable(wgplnf_DHDADO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getWgplnf_TYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setWgplnf_TYPE(int wgplnf_TYPE) {
    this.wgplnf_TYPE = wgplnf_TYPE;
    _unsetProperties.remove(DatcomInputData_Builder.Property.WGPLNF__TYPE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getWgplnf_TYPE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapWgplnf_TYPE(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWgplnf_TYPE(mapper.apply(getWgplnf_TYPE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getWgplnf_TYPE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getWgplnf_TYPE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TYPE),
        "wgplnf_TYPE not set");
    return wgplnf_TYPE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHRDR()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_CHRDR} is null
   */
  public DatcomInputData.Builder setVtplnf_CHRDR(Double vtplnf_CHRDR) {
    this.vtplnf_CHRDR = Preconditions.checkNotNull(vtplnf_CHRDR);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__CHRDR);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_CHRDR()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_CHRDR(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_CHRDR(mapper.apply(getVtplnf_CHRDR()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_CHRDR()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_CHRDR() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDR),
        "vtplnf_CHRDR not set");
    return vtplnf_CHRDR;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_CHRDBP(double vtplnf_CHRDBP) {
    this.vtplnf_CHRDBP = vtplnf_CHRDBP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_CHRDBP(Optional<? extends Double> vtplnf_CHRDBP) {
    if (vtplnf_CHRDBP.isPresent()) {
      return setVtplnf_CHRDBP(vtplnf_CHRDBP.get());
    } else {
      return clearVtplnf_CHRDBP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableVtplnf_CHRDBP(@Nullable Double vtplnf_CHRDBP) {
    if (vtplnf_CHRDBP != null) {
      return setVtplnf_CHRDBP(vtplnf_CHRDBP);
    } else {
      return clearVtplnf_CHRDBP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getVtplnf_CHRDBP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapVtplnf_CHRDBP(UnaryOperator<Double> mapper) {
    return setVtplnf_CHRDBP(getVtplnf_CHRDBP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHRDBP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearVtplnf_CHRDBP() {
    this.vtplnf_CHRDBP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_CHRDBP()}.
   */
  public Optional<Double> getVtplnf_CHRDBP() {
    return Optional.ofNullable(vtplnf_CHRDBP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHRDTP()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_CHRDTP} is null
   */
  public DatcomInputData.Builder setVtplnf_CHRDTP(Double vtplnf_CHRDTP) {
    this.vtplnf_CHRDTP = Preconditions.checkNotNull(vtplnf_CHRDTP);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__CHRDTP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_CHRDTP()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_CHRDTP(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_CHRDTP(mapper.apply(getVtplnf_CHRDTP()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_CHRDTP()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_CHRDTP() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDTP),
        "vtplnf_CHRDTP not set");
    return vtplnf_CHRDTP;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPN()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_SSPN} is null
   */
  public DatcomInputData.Builder setVtplnf_SSPN(Double vtplnf_SSPN) {
    this.vtplnf_SSPN = Preconditions.checkNotNull(vtplnf_SSPN);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__SSPN);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_SSPN()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_SSPN(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_SSPN(mapper.apply(getVtplnf_SSPN()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_SSPN()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_SSPN() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPN),
        "vtplnf_SSPN not set");
    return vtplnf_SSPN;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_SSPNE} is null
   */
  public DatcomInputData.Builder setVtplnf_SSPNE(Double vtplnf_SSPNE) {
    this.vtplnf_SSPNE = Preconditions.checkNotNull(vtplnf_SSPNE);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__SSPNE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_SSPNE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_SSPNE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_SSPNE(mapper.apply(getVtplnf_SSPNE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_SSPNE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_SSPNE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPNE),
        "vtplnf_SSPNE not set");
    return vtplnf_SSPNE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_SSPNOP(double vtplnf_SSPNOP) {
    this.vtplnf_SSPNOP = vtplnf_SSPNOP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_SSPNOP(Optional<? extends Double> vtplnf_SSPNOP) {
    if (vtplnf_SSPNOP.isPresent()) {
      return setVtplnf_SSPNOP(vtplnf_SSPNOP.get());
    } else {
      return clearVtplnf_SSPNOP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableVtplnf_SSPNOP(@Nullable Double vtplnf_SSPNOP) {
    if (vtplnf_SSPNOP != null) {
      return setVtplnf_SSPNOP(vtplnf_SSPNOP);
    } else {
      return clearVtplnf_SSPNOP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getVtplnf_SSPNOP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapVtplnf_SSPNOP(UnaryOperator<Double> mapper) {
    return setVtplnf_SSPNOP(getVtplnf_SSPNOP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNOP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearVtplnf_SSPNOP() {
    this.vtplnf_SSPNOP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_SSPNOP()}.
   */
  public Optional<Double> getVtplnf_SSPNOP() {
    return Optional.ofNullable(vtplnf_SSPNOP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SAVSI()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_SAVSI} is null
   */
  public DatcomInputData.Builder setVtplnf_SAVSI(Double vtplnf_SAVSI) {
    this.vtplnf_SAVSI = Preconditions.checkNotNull(vtplnf_SAVSI);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__SAVSI);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_SAVSI()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_SAVSI(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_SAVSI(mapper.apply(getVtplnf_SAVSI()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_SAVSI()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_SAVSI() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SAVSI),
        "vtplnf_SAVSI not set");
    return vtplnf_SAVSI;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_SAVSO(double vtplnf_SAVSO) {
    this.vtplnf_SAVSO = vtplnf_SAVSO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_SAVSO(Optional<? extends Double> vtplnf_SAVSO) {
    if (vtplnf_SAVSO.isPresent()) {
      return setVtplnf_SAVSO(vtplnf_SAVSO.get());
    } else {
      return clearVtplnf_SAVSO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableVtplnf_SAVSO(@Nullable Double vtplnf_SAVSO) {
    if (vtplnf_SAVSO != null) {
      return setVtplnf_SAVSO(vtplnf_SAVSO);
    } else {
      return clearVtplnf_SAVSO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getVtplnf_SAVSO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapVtplnf_SAVSO(UnaryOperator<Double> mapper) {
    return setVtplnf_SAVSO(getVtplnf_SAVSO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SAVSO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearVtplnf_SAVSO() {
    this.vtplnf_SAVSO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_SAVSO()}.
   */
  public Optional<Double> getVtplnf_SAVSO() {
    return Optional.ofNullable(vtplnf_SAVSO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_CHSTAT()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_CHSTAT} is null
   */
  public DatcomInputData.Builder setVtplnf_CHSTAT(Double vtplnf_CHSTAT) {
    this.vtplnf_CHSTAT = Preconditions.checkNotNull(vtplnf_CHSTAT);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__CHSTAT);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_CHSTAT()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_CHSTAT(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_CHSTAT(mapper.apply(getVtplnf_CHSTAT()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_CHSTAT()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_CHSTAT() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHSTAT),
        "vtplnf_CHSTAT not set");
    return vtplnf_CHSTAT;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_TWISTA()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_TWISTA} is null
   */
  public DatcomInputData.Builder setVtplnf_TWISTA(Double vtplnf_TWISTA) {
    this.vtplnf_TWISTA = Preconditions.checkNotNull(vtplnf_TWISTA);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__TWISTA);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_TWISTA()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_TWISTA(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_TWISTA(mapper.apply(getVtplnf_TWISTA()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_TWISTA()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_TWISTA() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TWISTA),
        "vtplnf_TWISTA not set");
    return vtplnf_TWISTA;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_SSPNDD(double vtplnf_SSPNDD) {
    this.vtplnf_SSPNDD = vtplnf_SSPNDD;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_SSPNDD(Optional<? extends Double> vtplnf_SSPNDD) {
    if (vtplnf_SSPNDD.isPresent()) {
      return setVtplnf_SSPNDD(vtplnf_SSPNDD.get());
    } else {
      return clearVtplnf_SSPNDD();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableVtplnf_SSPNDD(@Nullable Double vtplnf_SSPNDD) {
    if (vtplnf_SSPNDD != null) {
      return setVtplnf_SSPNDD(vtplnf_SSPNDD);
    } else {
      return clearVtplnf_SSPNDD();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getVtplnf_SSPNDD()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapVtplnf_SSPNDD(UnaryOperator<Double> mapper) {
    return setVtplnf_SSPNDD(getVtplnf_SSPNDD().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_SSPNDD()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearVtplnf_SSPNDD() {
    this.vtplnf_SSPNDD = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_SSPNDD()}.
   */
  public Optional<Double> getVtplnf_SSPNDD() {
    return Optional.ofNullable(vtplnf_SSPNDD);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_DHDADI()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code vtplnf_DHDADI} is null
   */
  public DatcomInputData.Builder setVtplnf_DHDADI(Double vtplnf_DHDADI) {
    this.vtplnf_DHDADI = Preconditions.checkNotNull(vtplnf_DHDADI);
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__DHDADI);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_DHDADI()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_DHDADI(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_DHDADI(mapper.apply(getVtplnf_DHDADI()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_DHDADI()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getVtplnf_DHDADI() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__DHDADI),
        "vtplnf_DHDADI not set");
    return vtplnf_DHDADI;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_DHDADO(double vtplnf_DHDADO) {
    this.vtplnf_DHDADO = vtplnf_DHDADO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_DHDADO(Optional<? extends Double> vtplnf_DHDADO) {
    if (vtplnf_DHDADO.isPresent()) {
      return setVtplnf_DHDADO(vtplnf_DHDADO.get());
    } else {
      return clearVtplnf_DHDADO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableVtplnf_DHDADO(@Nullable Double vtplnf_DHDADO) {
    if (vtplnf_DHDADO != null) {
      return setVtplnf_DHDADO(vtplnf_DHDADO);
    } else {
      return clearVtplnf_DHDADO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getVtplnf_DHDADO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapVtplnf_DHDADO(UnaryOperator<Double> mapper) {
    return setVtplnf_DHDADO(getVtplnf_DHDADO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_DHDADO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearVtplnf_DHDADO() {
    this.vtplnf_DHDADO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_DHDADO()}.
   */
  public Optional<Double> getVtplnf_DHDADO() {
    return Optional.ofNullable(vtplnf_DHDADO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getVtplnf_TYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setVtplnf_TYPE(int vtplnf_TYPE) {
    this.vtplnf_TYPE = vtplnf_TYPE;
    _unsetProperties.remove(DatcomInputData_Builder.Property.VTPLNF__TYPE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getVtplnf_TYPE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapVtplnf_TYPE(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVtplnf_TYPE(mapper.apply(getVtplnf_TYPE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getVtplnf_TYPE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getVtplnf_TYPE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TYPE),
        "vtplnf_TYPE not set");
    return vtplnf_TYPE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHRDR()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_CHRDR} is null
   */
  public DatcomInputData.Builder setHtplnf_CHRDR(Double htplnf_CHRDR) {
    this.htplnf_CHRDR = Preconditions.checkNotNull(htplnf_CHRDR);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__CHRDR);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_CHRDR()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_CHRDR(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_CHRDR(mapper.apply(getHtplnf_CHRDR()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_CHRDR()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_CHRDR() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDR),
        "htplnf_CHRDR not set");
    return htplnf_CHRDR;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_CHRDBP(double htplnf_CHRDBP) {
    this.htplnf_CHRDBP = htplnf_CHRDBP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_CHRDBP(Optional<? extends Double> htplnf_CHRDBP) {
    if (htplnf_CHRDBP.isPresent()) {
      return setHtplnf_CHRDBP(htplnf_CHRDBP.get());
    } else {
      return clearHtplnf_CHRDBP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHRDBP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableHtplnf_CHRDBP(@Nullable Double htplnf_CHRDBP) {
    if (htplnf_CHRDBP != null) {
      return setHtplnf_CHRDBP(htplnf_CHRDBP);
    } else {
      return clearHtplnf_CHRDBP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getHtplnf_CHRDBP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapHtplnf_CHRDBP(UnaryOperator<Double> mapper) {
    return setHtplnf_CHRDBP(getHtplnf_CHRDBP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHRDBP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearHtplnf_CHRDBP() {
    this.htplnf_CHRDBP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_CHRDBP()}.
   */
  public Optional<Double> getHtplnf_CHRDBP() {
    return Optional.ofNullable(htplnf_CHRDBP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHRDTP()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_CHRDTP} is null
   */
  public DatcomInputData.Builder setHtplnf_CHRDTP(Double htplnf_CHRDTP) {
    this.htplnf_CHRDTP = Preconditions.checkNotNull(htplnf_CHRDTP);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__CHRDTP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_CHRDTP()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_CHRDTP(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_CHRDTP(mapper.apply(getHtplnf_CHRDTP()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_CHRDTP()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_CHRDTP() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDTP),
        "htplnf_CHRDTP not set");
    return htplnf_CHRDTP;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPN()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_SSPN} is null
   */
  public DatcomInputData.Builder setHtplnf_SSPN(Double htplnf_SSPN) {
    this.htplnf_SSPN = Preconditions.checkNotNull(htplnf_SSPN);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__SSPN);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_SSPN()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_SSPN(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_SSPN(mapper.apply(getHtplnf_SSPN()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_SSPN()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_SSPN() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPN),
        "htplnf_SSPN not set");
    return htplnf_SSPN;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_SSPNE} is null
   */
  public DatcomInputData.Builder setHtplnf_SSPNE(Double htplnf_SSPNE) {
    this.htplnf_SSPNE = Preconditions.checkNotNull(htplnf_SSPNE);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__SSPNE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_SSPNE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_SSPNE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_SSPNE(mapper.apply(getHtplnf_SSPNE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_SSPNE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_SSPNE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPNE),
        "htplnf_SSPNE not set");
    return htplnf_SSPNE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_SSPNOP(double htplnf_SSPNOP) {
    this.htplnf_SSPNOP = htplnf_SSPNOP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_SSPNOP(Optional<? extends Double> htplnf_SSPNOP) {
    if (htplnf_SSPNOP.isPresent()) {
      return setHtplnf_SSPNOP(htplnf_SSPNOP.get());
    } else {
      return clearHtplnf_SSPNOP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNOP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableHtplnf_SSPNOP(@Nullable Double htplnf_SSPNOP) {
    if (htplnf_SSPNOP != null) {
      return setHtplnf_SSPNOP(htplnf_SSPNOP);
    } else {
      return clearHtplnf_SSPNOP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getHtplnf_SSPNOP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapHtplnf_SSPNOP(UnaryOperator<Double> mapper) {
    return setHtplnf_SSPNOP(getHtplnf_SSPNOP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNOP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearHtplnf_SSPNOP() {
    this.htplnf_SSPNOP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_SSPNOP()}.
   */
  public Optional<Double> getHtplnf_SSPNOP() {
    return Optional.ofNullable(htplnf_SSPNOP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SAVSI()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_SAVSI} is null
   */
  public DatcomInputData.Builder setHtplnf_SAVSI(Double htplnf_SAVSI) {
    this.htplnf_SAVSI = Preconditions.checkNotNull(htplnf_SAVSI);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__SAVSI);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_SAVSI()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_SAVSI(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_SAVSI(mapper.apply(getHtplnf_SAVSI()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_SAVSI()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_SAVSI() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SAVSI),
        "htplnf_SAVSI not set");
    return htplnf_SAVSI;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_SAVSO(double htplnf_SAVSO) {
    this.htplnf_SAVSO = htplnf_SAVSO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_SAVSO(Optional<? extends Double> htplnf_SAVSO) {
    if (htplnf_SAVSO.isPresent()) {
      return setHtplnf_SAVSO(htplnf_SAVSO.get());
    } else {
      return clearHtplnf_SAVSO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SAVSO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableHtplnf_SAVSO(@Nullable Double htplnf_SAVSO) {
    if (htplnf_SAVSO != null) {
      return setHtplnf_SAVSO(htplnf_SAVSO);
    } else {
      return clearHtplnf_SAVSO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getHtplnf_SAVSO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapHtplnf_SAVSO(UnaryOperator<Double> mapper) {
    return setHtplnf_SAVSO(getHtplnf_SAVSO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SAVSO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearHtplnf_SAVSO() {
    this.htplnf_SAVSO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_SAVSO()}.
   */
  public Optional<Double> getHtplnf_SAVSO() {
    return Optional.ofNullable(htplnf_SAVSO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_CHSTAT()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_CHSTAT} is null
   */
  public DatcomInputData.Builder setHtplnf_CHSTAT(Double htplnf_CHSTAT) {
    this.htplnf_CHSTAT = Preconditions.checkNotNull(htplnf_CHSTAT);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__CHSTAT);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_CHSTAT()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_CHSTAT(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_CHSTAT(mapper.apply(getHtplnf_CHSTAT()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_CHSTAT()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_CHSTAT() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHSTAT),
        "htplnf_CHSTAT not set");
    return htplnf_CHSTAT;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_TWISTA()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_TWISTA} is null
   */
  public DatcomInputData.Builder setHtplnf_TWISTA(Double htplnf_TWISTA) {
    this.htplnf_TWISTA = Preconditions.checkNotNull(htplnf_TWISTA);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__TWISTA);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_TWISTA()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_TWISTA(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_TWISTA(mapper.apply(getHtplnf_TWISTA()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_TWISTA()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_TWISTA() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TWISTA),
        "htplnf_TWISTA not set");
    return htplnf_TWISTA;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_SSPNDD(double htplnf_SSPNDD) {
    this.htplnf_SSPNDD = htplnf_SSPNDD;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_SSPNDD(Optional<? extends Double> htplnf_SSPNDD) {
    if (htplnf_SSPNDD.isPresent()) {
      return setHtplnf_SSPNDD(htplnf_SSPNDD.get());
    } else {
      return clearHtplnf_SSPNDD();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNDD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableHtplnf_SSPNDD(@Nullable Double htplnf_SSPNDD) {
    if (htplnf_SSPNDD != null) {
      return setHtplnf_SSPNDD(htplnf_SSPNDD);
    } else {
      return clearHtplnf_SSPNDD();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getHtplnf_SSPNDD()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapHtplnf_SSPNDD(UnaryOperator<Double> mapper) {
    return setHtplnf_SSPNDD(getHtplnf_SSPNDD().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_SSPNDD()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearHtplnf_SSPNDD() {
    this.htplnf_SSPNDD = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_SSPNDD()}.
   */
  public Optional<Double> getHtplnf_SSPNDD() {
    return Optional.ofNullable(htplnf_SSPNDD);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_DHDADI()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code htplnf_DHDADI} is null
   */
  public DatcomInputData.Builder setHtplnf_DHDADI(Double htplnf_DHDADI) {
    this.htplnf_DHDADI = Preconditions.checkNotNull(htplnf_DHDADI);
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__DHDADI);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_DHDADI()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_DHDADI(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_DHDADI(mapper.apply(getHtplnf_DHDADI()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_DHDADI()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getHtplnf_DHDADI() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__DHDADI),
        "htplnf_DHDADI not set");
    return htplnf_DHDADI;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_DHDADO(double htplnf_DHDADO) {
    this.htplnf_DHDADO = htplnf_DHDADO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_DHDADO(Optional<? extends Double> htplnf_DHDADO) {
    if (htplnf_DHDADO.isPresent()) {
      return setHtplnf_DHDADO(htplnf_DHDADO.get());
    } else {
      return clearHtplnf_DHDADO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_DHDADO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableHtplnf_DHDADO(@Nullable Double htplnf_DHDADO) {
    if (htplnf_DHDADO != null) {
      return setHtplnf_DHDADO(htplnf_DHDADO);
    } else {
      return clearHtplnf_DHDADO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getHtplnf_DHDADO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapHtplnf_DHDADO(UnaryOperator<Double> mapper) {
    return setHtplnf_DHDADO(getHtplnf_DHDADO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_DHDADO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearHtplnf_DHDADO() {
    this.htplnf_DHDADO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_DHDADO()}.
   */
  public Optional<Double> getHtplnf_DHDADO() {
    return Optional.ofNullable(htplnf_DHDADO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getHtplnf_TYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setHtplnf_TYPE(int htplnf_TYPE) {
    this.htplnf_TYPE = htplnf_TYPE;
    _unsetProperties.remove(DatcomInputData_Builder.Property.HTPLNF__TYPE);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link DatcomInputData#getHtplnf_TYPE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public DatcomInputData.Builder mapHtplnf_TYPE(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHtplnf_TYPE(mapper.apply(getHtplnf_TYPE()));
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getHtplnf_TYPE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getHtplnf_TYPE() {
    Preconditions.checkState(
        !_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TYPE),
        "htplnf_TYPE not set");
    return htplnf_TYPE;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AIETLJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_AIETLJ(double jetpwr_AIETLJ) {
    this.jetpwr_AIETLJ = jetpwr_AIETLJ;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AIETLJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_AIETLJ(Optional<? extends Double> jetpwr_AIETLJ) {
    if (jetpwr_AIETLJ.isPresent()) {
      return setJetpwr_AIETLJ(jetpwr_AIETLJ.get());
    } else {
      return clearJetpwr_AIETLJ();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AIETLJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_AIETLJ(@Nullable Double jetpwr_AIETLJ) {
    if (jetpwr_AIETLJ != null) {
      return setJetpwr_AIETLJ(jetpwr_AIETLJ);
    } else {
      return clearJetpwr_AIETLJ();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_AIETLJ()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_AIETLJ(UnaryOperator<Double> mapper) {
    return setJetpwr_AIETLJ(getJetpwr_AIETLJ().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AIETLJ()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_AIETLJ() {
    this.jetpwr_AIETLJ = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_AIETLJ()}.
   */
  public Optional<Double> getJetpwr_AIETLJ() {
    return Optional.ofNullable(jetpwr_AIETLJ);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBSTP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_AMBSTP(double jetpwr_AMBSTP) {
    this.jetpwr_AMBSTP = jetpwr_AMBSTP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBSTP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_AMBSTP(Optional<? extends Double> jetpwr_AMBSTP) {
    if (jetpwr_AMBSTP.isPresent()) {
      return setJetpwr_AMBSTP(jetpwr_AMBSTP.get());
    } else {
      return clearJetpwr_AMBSTP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBSTP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_AMBSTP(@Nullable Double jetpwr_AMBSTP) {
    if (jetpwr_AMBSTP != null) {
      return setJetpwr_AMBSTP(jetpwr_AMBSTP);
    } else {
      return clearJetpwr_AMBSTP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_AMBSTP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_AMBSTP(UnaryOperator<Double> mapper) {
    return setJetpwr_AMBSTP(getJetpwr_AMBSTP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBSTP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_AMBSTP() {
    this.jetpwr_AMBSTP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_AMBSTP()}.
   */
  public Optional<Double> getJetpwr_AMBSTP() {
    return Optional.ofNullable(jetpwr_AMBSTP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBTMP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_AMBTMP(double jetpwr_AMBTMP) {
    this.jetpwr_AMBTMP = jetpwr_AMBTMP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBTMP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_AMBTMP(Optional<? extends Double> jetpwr_AMBTMP) {
    if (jetpwr_AMBTMP.isPresent()) {
      return setJetpwr_AMBTMP(jetpwr_AMBTMP.get());
    } else {
      return clearJetpwr_AMBTMP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBTMP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_AMBTMP(@Nullable Double jetpwr_AMBTMP) {
    if (jetpwr_AMBTMP != null) {
      return setJetpwr_AMBTMP(jetpwr_AMBTMP);
    } else {
      return clearJetpwr_AMBTMP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_AMBTMP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_AMBTMP(UnaryOperator<Double> mapper) {
    return setJetpwr_AMBTMP(getJetpwr_AMBTMP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_AMBTMP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_AMBTMP() {
    this.jetpwr_AMBTMP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_AMBTMP()}.
   */
  public Optional<Double> getJetpwr_AMBTMP() {
    return Optional.ofNullable(jetpwr_AMBTMP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEALOC()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code jetpwr_JEALOC} is null
   */
  public DatcomInputData.Builder setJetpwr_JEALOC(List<Double> jetpwr_JEALOC) {
    this.jetpwr_JEALOC = Preconditions.checkNotNull(jetpwr_JEALOC);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JEALOC(Optional<? extends List<Double>> jetpwr_JEALOC) {
    if (jetpwr_JEALOC.isPresent()) {
      return setJetpwr_JEALOC(jetpwr_JEALOC.get());
    } else {
      return clearJetpwr_JEALOC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JEALOC(@Nullable List<Double> jetpwr_JEALOC) {
    if (jetpwr_JEALOC != null) {
      return setJetpwr_JEALOC(jetpwr_JEALOC);
    } else {
      return clearJetpwr_JEALOC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JEALOC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JEALOC(UnaryOperator<List<Double>> mapper) {
    return setJetpwr_JEALOC(getJetpwr_JEALOC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEALOC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JEALOC() {
    this.jetpwr_JEALOC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JEALOC()}.
   */
  public Optional<List<Double>> getJetpwr_JEALOC() {
    return Optional.ofNullable(jetpwr_JEALOC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JELLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JELLOC(double jetpwr_JELLOC) {
    this.jetpwr_JELLOC = jetpwr_JELLOC;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JELLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JELLOC(Optional<? extends Double> jetpwr_JELLOC) {
    if (jetpwr_JELLOC.isPresent()) {
      return setJetpwr_JELLOC(jetpwr_JELLOC.get());
    } else {
      return clearJetpwr_JELLOC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JELLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JELLOC(@Nullable Double jetpwr_JELLOC) {
    if (jetpwr_JELLOC != null) {
      return setJetpwr_JELLOC(jetpwr_JELLOC);
    } else {
      return clearJetpwr_JELLOC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JELLOC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JELLOC(UnaryOperator<Double> mapper) {
    return setJetpwr_JELLOC(getJetpwr_JELLOC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JELLOC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JELLOC() {
    this.jetpwr_JELLOC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JELLOC()}.
   */
  public Optional<Double> getJetpwr_JELLOC() {
    return Optional.ofNullable(jetpwr_JELLOC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JERAD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JERAD(double jetpwr_JERAD) {
    this.jetpwr_JERAD = jetpwr_JERAD;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JERAD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JERAD(Optional<? extends Double> jetpwr_JERAD) {
    if (jetpwr_JERAD.isPresent()) {
      return setJetpwr_JERAD(jetpwr_JERAD.get());
    } else {
      return clearJetpwr_JERAD();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JERAD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JERAD(@Nullable Double jetpwr_JERAD) {
    if (jetpwr_JERAD != null) {
      return setJetpwr_JERAD(jetpwr_JERAD);
    } else {
      return clearJetpwr_JERAD();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JERAD()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JERAD(UnaryOperator<Double> mapper) {
    return setJetpwr_JERAD(getJetpwr_JERAD().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JERAD()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JERAD() {
    this.jetpwr_JERAD = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JERAD()}.
   */
  public Optional<Double> getJetpwr_JERAD() {
    return Optional.ofNullable(jetpwr_JERAD);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEVLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JEVLOC(double jetpwr_JEVLOC) {
    this.jetpwr_JEVLOC = jetpwr_JEVLOC;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEVLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JEVLOC(Optional<? extends Double> jetpwr_JEVLOC) {
    if (jetpwr_JEVLOC.isPresent()) {
      return setJetpwr_JEVLOC(jetpwr_JEVLOC.get());
    } else {
      return clearJetpwr_JEVLOC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEVLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JEVLOC(@Nullable Double jetpwr_JEVLOC) {
    if (jetpwr_JEVLOC != null) {
      return setJetpwr_JEVLOC(jetpwr_JEVLOC);
    } else {
      return clearJetpwr_JEVLOC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JEVLOC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JEVLOC(UnaryOperator<Double> mapper) {
    return setJetpwr_JEVLOC(getJetpwr_JEVLOC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEVLOC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JEVLOC() {
    this.jetpwr_JEVLOC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JEVLOC()}.
   */
  public Optional<Double> getJetpwr_JEVLOC() {
    return Optional.ofNullable(jetpwr_JEVLOC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JIALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JIALOC(double jetpwr_JIALOC) {
    this.jetpwr_JIALOC = jetpwr_JIALOC;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JIALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JIALOC(Optional<? extends Double> jetpwr_JIALOC) {
    if (jetpwr_JIALOC.isPresent()) {
      return setJetpwr_JIALOC(jetpwr_JIALOC.get());
    } else {
      return clearJetpwr_JIALOC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JIALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JIALOC(@Nullable Double jetpwr_JIALOC) {
    if (jetpwr_JIALOC != null) {
      return setJetpwr_JIALOC(jetpwr_JIALOC);
    } else {
      return clearJetpwr_JIALOC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JIALOC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JIALOC(UnaryOperator<Double> mapper) {
    return setJetpwr_JIALOC(getJetpwr_JIALOC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JIALOC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JIALOC() {
    this.jetpwr_JIALOC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JIALOC()}.
   */
  public Optional<Double> getJetpwr_JIALOC() {
    return Optional.ofNullable(jetpwr_JIALOC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JINLTA()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JINLTA(double jetpwr_JINLTA) {
    this.jetpwr_JINLTA = jetpwr_JINLTA;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JINLTA()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JINLTA(Optional<? extends Double> jetpwr_JINLTA) {
    if (jetpwr_JINLTA.isPresent()) {
      return setJetpwr_JINLTA(jetpwr_JINLTA.get());
    } else {
      return clearJetpwr_JINLTA();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JINLTA()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JINLTA(@Nullable Double jetpwr_JINLTA) {
    if (jetpwr_JINLTA != null) {
      return setJetpwr_JINLTA(jetpwr_JINLTA);
    } else {
      return clearJetpwr_JINLTA();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JINLTA()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JINLTA(UnaryOperator<Double> mapper) {
    return setJetpwr_JINLTA(getJetpwr_JINLTA().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JINLTA()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JINLTA() {
    this.jetpwr_JINLTA = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JINLTA()}.
   */
  public Optional<Double> getJetpwr_JINLTA() {
    return Optional.ofNullable(jetpwr_JINLTA);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_THSTCJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_THSTCJ(double jetpwr_THSTCJ) {
    this.jetpwr_THSTCJ = jetpwr_THSTCJ;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_THSTCJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_THSTCJ(Optional<? extends Double> jetpwr_THSTCJ) {
    if (jetpwr_THSTCJ.isPresent()) {
      return setJetpwr_THSTCJ(jetpwr_THSTCJ.get());
    } else {
      return clearJetpwr_THSTCJ();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_THSTCJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_THSTCJ(@Nullable Double jetpwr_THSTCJ) {
    if (jetpwr_THSTCJ != null) {
      return setJetpwr_THSTCJ(jetpwr_THSTCJ);
    } else {
      return clearJetpwr_THSTCJ();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_THSTCJ()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_THSTCJ(UnaryOperator<Double> mapper) {
    return setJetpwr_THSTCJ(getJetpwr_THSTCJ().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_THSTCJ()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_THSTCJ() {
    this.jetpwr_THSTCJ = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_THSTCJ()}.
   */
  public Optional<Double> getJetpwr_THSTCJ() {
    return Optional.ofNullable(jetpwr_THSTCJ);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEANGL()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JEANGL(double jetpwr_JEANGL) {
    this.jetpwr_JEANGL = jetpwr_JEANGL;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEANGL()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_JEANGL(Optional<? extends Double> jetpwr_JEANGL) {
    if (jetpwr_JEANGL.isPresent()) {
      return setJetpwr_JEANGL(jetpwr_JEANGL.get());
    } else {
      return clearJetpwr_JEANGL();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEANGL()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_JEANGL(@Nullable Double jetpwr_JEANGL) {
    if (jetpwr_JEANGL != null) {
      return setJetpwr_JEANGL(jetpwr_JEANGL);
    } else {
      return clearJetpwr_JEANGL();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_JEANGL()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_JEANGL(UnaryOperator<Double> mapper) {
    return setJetpwr_JEANGL(getJetpwr_JEANGL().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_JEANGL()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_JEANGL() {
    this.jetpwr_JEANGL = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_JEANGL()}.
   */
  public Optional<Double> getJetpwr_JEANGL() {
    return Optional.ofNullable(jetpwr_JEANGL);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_NENGSJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_NENGSJ(int jetpwr_NENGSJ) {
    this.jetpwr_NENGSJ = jetpwr_NENGSJ;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_NENGSJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setJetpwr_NENGSJ(Optional<? extends Integer> jetpwr_NENGSJ) {
    if (jetpwr_NENGSJ.isPresent()) {
      return setJetpwr_NENGSJ(jetpwr_NENGSJ.get());
    } else {
      return clearJetpwr_NENGSJ();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_NENGSJ()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableJetpwr_NENGSJ(@Nullable Integer jetpwr_NENGSJ) {
    if (jetpwr_NENGSJ != null) {
      return setJetpwr_NENGSJ(jetpwr_NENGSJ);
    } else {
      return clearJetpwr_NENGSJ();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getJetpwr_NENGSJ()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapJetpwr_NENGSJ(UnaryOperator<Integer> mapper) {
    return setJetpwr_NENGSJ(getJetpwr_NENGSJ().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getJetpwr_NENGSJ()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearJetpwr_NENGSJ() {
    this.jetpwr_NENGSJ = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getJetpwr_NENGSJ()}.
   */
  public Optional<Integer> getJetpwr_NENGSJ() {
    return Optional.ofNullable(jetpwr_NENGSJ);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NENGSP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_NENGSP(int propwr_NENGSP) {
    this.propwr_NENGSP = propwr_NENGSP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NENGSP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_NENGSP(Optional<? extends Integer> propwr_NENGSP) {
    if (propwr_NENGSP.isPresent()) {
      return setPropwr_NENGSP(propwr_NENGSP.get());
    } else {
      return clearPropwr_NENGSP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NENGSP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_NENGSP(@Nullable Integer propwr_NENGSP) {
    if (propwr_NENGSP != null) {
      return setPropwr_NENGSP(propwr_NENGSP);
    } else {
      return clearPropwr_NENGSP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_NENGSP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_NENGSP(UnaryOperator<Integer> mapper) {
    return setPropwr_NENGSP(getPropwr_NENGSP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NENGSP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_NENGSP() {
    this.propwr_NENGSP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_NENGSP()}.
   */
  public Optional<Integer> getPropwr_NENGSP() {
    return Optional.ofNullable(propwr_NENGSP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_AIETLP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_AIETLP(double propwr_AIETLP) {
    this.propwr_AIETLP = propwr_AIETLP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_AIETLP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_AIETLP(Optional<? extends Double> propwr_AIETLP) {
    if (propwr_AIETLP.isPresent()) {
      return setPropwr_AIETLP(propwr_AIETLP.get());
    } else {
      return clearPropwr_AIETLP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_AIETLP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_AIETLP(@Nullable Double propwr_AIETLP) {
    if (propwr_AIETLP != null) {
      return setPropwr_AIETLP(propwr_AIETLP);
    } else {
      return clearPropwr_AIETLP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_AIETLP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_AIETLP(UnaryOperator<Double> mapper) {
    return setPropwr_AIETLP(getPropwr_AIETLP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_AIETLP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_AIETLP() {
    this.propwr_AIETLP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_AIETLP()}.
   */
  public Optional<Double> getPropwr_AIETLP() {
    return Optional.ofNullable(propwr_AIETLP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_THSTCP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_THSTCP(double propwr_THSTCP) {
    this.propwr_THSTCP = propwr_THSTCP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_THSTCP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_THSTCP(Optional<? extends Double> propwr_THSTCP) {
    if (propwr_THSTCP.isPresent()) {
      return setPropwr_THSTCP(propwr_THSTCP.get());
    } else {
      return clearPropwr_THSTCP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_THSTCP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_THSTCP(@Nullable Double propwr_THSTCP) {
    if (propwr_THSTCP != null) {
      return setPropwr_THSTCP(propwr_THSTCP);
    } else {
      return clearPropwr_THSTCP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_THSTCP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_THSTCP(UnaryOperator<Double> mapper) {
    return setPropwr_THSTCP(getPropwr_THSTCP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_THSTCP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_THSTCP() {
    this.propwr_THSTCP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_THSTCP()}.
   */
  public Optional<Double> getPropwr_THSTCP() {
    return Optional.ofNullable(propwr_THSTCP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_PHALOC(double propwr_PHALOC) {
    this.propwr_PHALOC = propwr_PHALOC;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_PHALOC(Optional<? extends Double> propwr_PHALOC) {
    if (propwr_PHALOC.isPresent()) {
      return setPropwr_PHALOC(propwr_PHALOC.get());
    } else {
      return clearPropwr_PHALOC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHALOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_PHALOC(@Nullable Double propwr_PHALOC) {
    if (propwr_PHALOC != null) {
      return setPropwr_PHALOC(propwr_PHALOC);
    } else {
      return clearPropwr_PHALOC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_PHALOC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_PHALOC(UnaryOperator<Double> mapper) {
    return setPropwr_PHALOC(getPropwr_PHALOC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHALOC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_PHALOC() {
    this.propwr_PHALOC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_PHALOC()}.
   */
  public Optional<Double> getPropwr_PHALOC() {
    return Optional.ofNullable(propwr_PHALOC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHVLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_PHVLOC(double propwr_PHVLOC) {
    this.propwr_PHVLOC = propwr_PHVLOC;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHVLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_PHVLOC(Optional<? extends Double> propwr_PHVLOC) {
    if (propwr_PHVLOC.isPresent()) {
      return setPropwr_PHVLOC(propwr_PHVLOC.get());
    } else {
      return clearPropwr_PHVLOC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHVLOC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_PHVLOC(@Nullable Double propwr_PHVLOC) {
    if (propwr_PHVLOC != null) {
      return setPropwr_PHVLOC(propwr_PHVLOC);
    } else {
      return clearPropwr_PHVLOC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_PHVLOC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_PHVLOC(UnaryOperator<Double> mapper) {
    return setPropwr_PHVLOC(getPropwr_PHVLOC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PHVLOC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_PHVLOC() {
    this.propwr_PHVLOC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_PHVLOC()}.
   */
  public Optional<Double> getPropwr_PHVLOC() {
    return Optional.ofNullable(propwr_PHVLOC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PRPRAD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_PRPRAD(double propwr_PRPRAD) {
    this.propwr_PRPRAD = propwr_PRPRAD;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PRPRAD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_PRPRAD(Optional<? extends Double> propwr_PRPRAD) {
    if (propwr_PRPRAD.isPresent()) {
      return setPropwr_PRPRAD(propwr_PRPRAD.get());
    } else {
      return clearPropwr_PRPRAD();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PRPRAD()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_PRPRAD(@Nullable Double propwr_PRPRAD) {
    if (propwr_PRPRAD != null) {
      return setPropwr_PRPRAD(propwr_PRPRAD);
    } else {
      return clearPropwr_PRPRAD();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_PRPRAD()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_PRPRAD(UnaryOperator<Double> mapper) {
    return setPropwr_PRPRAD(getPropwr_PRPRAD().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_PRPRAD()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_PRPRAD() {
    this.propwr_PRPRAD = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_PRPRAD()}.
   */
  public Optional<Double> getPropwr_PRPRAD() {
    return Optional.ofNullable(propwr_PRPRAD);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_ENGFCT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_ENGFCT(double propwr_ENGFCT) {
    this.propwr_ENGFCT = propwr_ENGFCT;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_ENGFCT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_ENGFCT(Optional<? extends Double> propwr_ENGFCT) {
    if (propwr_ENGFCT.isPresent()) {
      return setPropwr_ENGFCT(propwr_ENGFCT.get());
    } else {
      return clearPropwr_ENGFCT();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_ENGFCT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_ENGFCT(@Nullable Double propwr_ENGFCT) {
    if (propwr_ENGFCT != null) {
      return setPropwr_ENGFCT(propwr_ENGFCT);
    } else {
      return clearPropwr_ENGFCT();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_ENGFCT()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_ENGFCT(UnaryOperator<Double> mapper) {
    return setPropwr_ENGFCT(getPropwr_ENGFCT().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_ENGFCT()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_ENGFCT() {
    this.propwr_ENGFCT = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_ENGFCT()}.
   */
  public Optional<Double> getPropwr_ENGFCT() {
    return Optional.ofNullable(propwr_ENGFCT);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR3()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BWAPR3(double propwr_BWAPR3) {
    this.propwr_BWAPR3 = propwr_BWAPR3;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR3()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BWAPR3(Optional<? extends Double> propwr_BWAPR3) {
    if (propwr_BWAPR3.isPresent()) {
      return setPropwr_BWAPR3(propwr_BWAPR3.get());
    } else {
      return clearPropwr_BWAPR3();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR3()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_BWAPR3(@Nullable Double propwr_BWAPR3) {
    if (propwr_BWAPR3 != null) {
      return setPropwr_BWAPR3(propwr_BWAPR3);
    } else {
      return clearPropwr_BWAPR3();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_BWAPR3()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_BWAPR3(UnaryOperator<Double> mapper) {
    return setPropwr_BWAPR3(getPropwr_BWAPR3().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR3()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_BWAPR3() {
    this.propwr_BWAPR3 = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_BWAPR3()}.
   */
  public Optional<Double> getPropwr_BWAPR3() {
    return Optional.ofNullable(propwr_BWAPR3);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR6()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BWAPR6(double propwr_BWAPR6) {
    this.propwr_BWAPR6 = propwr_BWAPR6;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR6()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BWAPR6(Optional<? extends Double> propwr_BWAPR6) {
    if (propwr_BWAPR6.isPresent()) {
      return setPropwr_BWAPR6(propwr_BWAPR6.get());
    } else {
      return clearPropwr_BWAPR6();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR6()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_BWAPR6(@Nullable Double propwr_BWAPR6) {
    if (propwr_BWAPR6 != null) {
      return setPropwr_BWAPR6(propwr_BWAPR6);
    } else {
      return clearPropwr_BWAPR6();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_BWAPR6()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_BWAPR6(UnaryOperator<Double> mapper) {
    return setPropwr_BWAPR6(getPropwr_BWAPR6().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR6()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_BWAPR6() {
    this.propwr_BWAPR6 = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_BWAPR6()}.
   */
  public Optional<Double> getPropwr_BWAPR6() {
    return Optional.ofNullable(propwr_BWAPR6);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR9()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BWAPR9(double propwr_BWAPR9) {
    this.propwr_BWAPR9 = propwr_BWAPR9;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR9()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BWAPR9(Optional<? extends Double> propwr_BWAPR9) {
    if (propwr_BWAPR9.isPresent()) {
      return setPropwr_BWAPR9(propwr_BWAPR9.get());
    } else {
      return clearPropwr_BWAPR9();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR9()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_BWAPR9(@Nullable Double propwr_BWAPR9) {
    if (propwr_BWAPR9 != null) {
      return setPropwr_BWAPR9(propwr_BWAPR9);
    } else {
      return clearPropwr_BWAPR9();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_BWAPR9()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_BWAPR9(UnaryOperator<Double> mapper) {
    return setPropwr_BWAPR9(getPropwr_BWAPR9().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BWAPR9()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_BWAPR9() {
    this.propwr_BWAPR9 = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_BWAPR9()}.
   */
  public Optional<Double> getPropwr_BWAPR9() {
    return Optional.ofNullable(propwr_BWAPR9);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NOPBPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_NOPBPE(int propwr_NOPBPE) {
    this.propwr_NOPBPE = propwr_NOPBPE;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NOPBPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_NOPBPE(Optional<? extends Integer> propwr_NOPBPE) {
    if (propwr_NOPBPE.isPresent()) {
      return setPropwr_NOPBPE(propwr_NOPBPE.get());
    } else {
      return clearPropwr_NOPBPE();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NOPBPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_NOPBPE(@Nullable Integer propwr_NOPBPE) {
    if (propwr_NOPBPE != null) {
      return setPropwr_NOPBPE(propwr_NOPBPE);
    } else {
      return clearPropwr_NOPBPE();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_NOPBPE()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_NOPBPE(UnaryOperator<Integer> mapper) {
    return setPropwr_NOPBPE(getPropwr_NOPBPE().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_NOPBPE()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_NOPBPE() {
    this.propwr_NOPBPE = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_NOPBPE()}.
   */
  public Optional<Integer> getPropwr_NOPBPE() {
    return Optional.ofNullable(propwr_NOPBPE);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BAPR75()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BAPR75(double propwr_BAPR75) {
    this.propwr_BAPR75 = propwr_BAPR75;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BAPR75()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_BAPR75(Optional<? extends Double> propwr_BAPR75) {
    if (propwr_BAPR75.isPresent()) {
      return setPropwr_BAPR75(propwr_BAPR75.get());
    } else {
      return clearPropwr_BAPR75();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BAPR75()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_BAPR75(@Nullable Double propwr_BAPR75) {
    if (propwr_BAPR75 != null) {
      return setPropwr_BAPR75(propwr_BAPR75);
    } else {
      return clearPropwr_BAPR75();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_BAPR75()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_BAPR75(UnaryOperator<Double> mapper) {
    return setPropwr_BAPR75(getPropwr_BAPR75().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_BAPR75()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_BAPR75() {
    this.propwr_BAPR75 = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_BAPR75()}.
   */
  public Optional<Double> getPropwr_BAPR75() {
    return Optional.ofNullable(propwr_BAPR75);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_YP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_YP(double propwr_YP) {
    this.propwr_YP = propwr_YP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_YP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_YP(Optional<? extends Double> propwr_YP) {
    if (propwr_YP.isPresent()) {
      return setPropwr_YP(propwr_YP.get());
    } else {
      return clearPropwr_YP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_YP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_YP(@Nullable Double propwr_YP) {
    if (propwr_YP != null) {
      return setPropwr_YP(propwr_YP);
    } else {
      return clearPropwr_YP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_YP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_YP(UnaryOperator<Double> mapper) {
    return setPropwr_YP(getPropwr_YP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_YP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_YP() {
    this.propwr_YP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_YP()}.
   */
  public Optional<Double> getPropwr_YP() {
    return Optional.ofNullable(propwr_YP);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_CROT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_CROT(boolean propwr_CROT) {
    this.propwr_CROT = propwr_CROT;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_CROT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setPropwr_CROT(Optional<? extends Boolean> propwr_CROT) {
    if (propwr_CROT.isPresent()) {
      return setPropwr_CROT(propwr_CROT.get());
    } else {
      return clearPropwr_CROT();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_CROT()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullablePropwr_CROT(@Nullable Boolean propwr_CROT) {
    if (propwr_CROT != null) {
      return setPropwr_CROT(propwr_CROT);
    } else {
      return clearPropwr_CROT();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getPropwr_CROT()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapPropwr_CROT(UnaryOperator<Boolean> mapper) {
    return setPropwr_CROT(getPropwr_CROT().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getPropwr_CROT()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearPropwr_CROT() {
    this.propwr_CROT = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getPropwr_CROT()}.
   */
  public Optional<Boolean> getPropwr_CROT() {
    return Optional.ofNullable(propwr_CROT);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_FTYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_FTYPE(int symflp_FTYPE) {
    this.symflp_FTYPE = symflp_FTYPE;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_FTYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_FTYPE(Optional<? extends Integer> symflp_FTYPE) {
    if (symflp_FTYPE.isPresent()) {
      return setSymflp_FTYPE(symflp_FTYPE.get());
    } else {
      return clearSymflp_FTYPE();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_FTYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_FTYPE(@Nullable Integer symflp_FTYPE) {
    if (symflp_FTYPE != null) {
      return setSymflp_FTYPE(symflp_FTYPE);
    } else {
      return clearSymflp_FTYPE();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_FTYPE()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_FTYPE(UnaryOperator<Integer> mapper) {
    return setSymflp_FTYPE(getSymflp_FTYPE().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_FTYPE()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_FTYPE() {
    this.symflp_FTYPE = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_FTYPE()}.
   */
  public Optional<Integer> getSymflp_FTYPE() {
    return Optional.ofNullable(symflp_FTYPE);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_DELTA()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code symflp_DELTA} is null
   */
  public DatcomInputData.Builder setSymflp_DELTA(List<Double> symflp_DELTA) {
    this.symflp_DELTA = Preconditions.checkNotNull(symflp_DELTA);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_DELTA()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_DELTA(Optional<? extends List<Double>> symflp_DELTA) {
    if (symflp_DELTA.isPresent()) {
      return setSymflp_DELTA(symflp_DELTA.get());
    } else {
      return clearSymflp_DELTA();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_DELTA()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_DELTA(@Nullable List<Double> symflp_DELTA) {
    if (symflp_DELTA != null) {
      return setSymflp_DELTA(symflp_DELTA);
    } else {
      return clearSymflp_DELTA();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_DELTA()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_DELTA(UnaryOperator<List<Double>> mapper) {
    return setSymflp_DELTA(getSymflp_DELTA().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_DELTA()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_DELTA() {
    this.symflp_DELTA = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_DELTA()}.
   */
  public Optional<List<Double>> getSymflp_DELTA() {
    return Optional.ofNullable(symflp_DELTA);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFI()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_SPANFI(double symflp_SPANFI) {
    this.symflp_SPANFI = symflp_SPANFI;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFI()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_SPANFI(Optional<? extends Double> symflp_SPANFI) {
    if (symflp_SPANFI.isPresent()) {
      return setSymflp_SPANFI(symflp_SPANFI.get());
    } else {
      return clearSymflp_SPANFI();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFI()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_SPANFI(@Nullable Double symflp_SPANFI) {
    if (symflp_SPANFI != null) {
      return setSymflp_SPANFI(symflp_SPANFI);
    } else {
      return clearSymflp_SPANFI();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_SPANFI()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_SPANFI(UnaryOperator<Double> mapper) {
    return setSymflp_SPANFI(getSymflp_SPANFI().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFI()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_SPANFI() {
    this.symflp_SPANFI = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_SPANFI()}.
   */
  public Optional<Double> getSymflp_SPANFI() {
    return Optional.ofNullable(symflp_SPANFI);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_SPANFO(double symflp_SPANFO) {
    this.symflp_SPANFO = symflp_SPANFO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_SPANFO(Optional<? extends Double> symflp_SPANFO) {
    if (symflp_SPANFO.isPresent()) {
      return setSymflp_SPANFO(symflp_SPANFO.get());
    } else {
      return clearSymflp_SPANFO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_SPANFO(@Nullable Double symflp_SPANFO) {
    if (symflp_SPANFO != null) {
      return setSymflp_SPANFO(symflp_SPANFO);
    } else {
      return clearSymflp_SPANFO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_SPANFO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_SPANFO(UnaryOperator<Double> mapper) {
    return setSymflp_SPANFO(getSymflp_SPANFO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_SPANFO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_SPANFO() {
    this.symflp_SPANFO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_SPANFO()}.
   */
  public Optional<Double> getSymflp_SPANFO() {
    return Optional.ofNullable(symflp_SPANFO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFI()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_CHRDFI(double symflp_CHRDFI) {
    this.symflp_CHRDFI = symflp_CHRDFI;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFI()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_CHRDFI(Optional<? extends Double> symflp_CHRDFI) {
    if (symflp_CHRDFI.isPresent()) {
      return setSymflp_CHRDFI(symflp_CHRDFI.get());
    } else {
      return clearSymflp_CHRDFI();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFI()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_CHRDFI(@Nullable Double symflp_CHRDFI) {
    if (symflp_CHRDFI != null) {
      return setSymflp_CHRDFI(symflp_CHRDFI);
    } else {
      return clearSymflp_CHRDFI();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_CHRDFI()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_CHRDFI(UnaryOperator<Double> mapper) {
    return setSymflp_CHRDFI(getSymflp_CHRDFI().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFI()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_CHRDFI() {
    this.symflp_CHRDFI = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_CHRDFI()}.
   */
  public Optional<Double> getSymflp_CHRDFI() {
    return Optional.ofNullable(symflp_CHRDFI);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_CHRDFO(double symflp_CHRDFO) {
    this.symflp_CHRDFO = symflp_CHRDFO;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_CHRDFO(Optional<? extends Double> symflp_CHRDFO) {
    if (symflp_CHRDFO.isPresent()) {
      return setSymflp_CHRDFO(symflp_CHRDFO.get());
    } else {
      return clearSymflp_CHRDFO();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFO()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_CHRDFO(@Nullable Double symflp_CHRDFO) {
    if (symflp_CHRDFO != null) {
      return setSymflp_CHRDFO(symflp_CHRDFO);
    } else {
      return clearSymflp_CHRDFO();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_CHRDFO()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_CHRDFO(UnaryOperator<Double> mapper) {
    return setSymflp_CHRDFO(getSymflp_CHRDFO().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CHRDFO()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_CHRDFO() {
    this.symflp_CHRDFO = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_CHRDFO()}.
   */
  public Optional<Double> getSymflp_CHRDFO() {
    return Optional.ofNullable(symflp_CHRDFO);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_NTYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_NTYPE(int symflp_NTYPE) {
    this.symflp_NTYPE = symflp_NTYPE;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_NTYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_NTYPE(Optional<? extends Integer> symflp_NTYPE) {
    if (symflp_NTYPE.isPresent()) {
      return setSymflp_NTYPE(symflp_NTYPE.get());
    } else {
      return clearSymflp_NTYPE();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_NTYPE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_NTYPE(@Nullable Integer symflp_NTYPE) {
    if (symflp_NTYPE != null) {
      return setSymflp_NTYPE(symflp_NTYPE);
    } else {
      return clearSymflp_NTYPE();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_NTYPE()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_NTYPE(UnaryOperator<Integer> mapper) {
    return setSymflp_NTYPE(getSymflp_NTYPE().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_NTYPE()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_NTYPE() {
    this.symflp_NTYPE = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_NTYPE()}.
   */
  public Optional<Integer> getSymflp_NTYPE() {
    return Optional.ofNullable(symflp_NTYPE);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CB()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_CB(double symflp_CB) {
    this.symflp_CB = symflp_CB;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CB()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_CB(Optional<? extends Double> symflp_CB) {
    if (symflp_CB.isPresent()) {
      return setSymflp_CB(symflp_CB.get());
    } else {
      return clearSymflp_CB();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CB()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_CB(@Nullable Double symflp_CB) {
    if (symflp_CB != null) {
      return setSymflp_CB(symflp_CB);
    } else {
      return clearSymflp_CB();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_CB()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_CB(UnaryOperator<Double> mapper) {
    return setSymflp_CB(getSymflp_CB().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_CB()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_CB() {
    this.symflp_CB = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_CB()}.
   */
  public Optional<Double> getSymflp_CB() {
    return Optional.ofNullable(symflp_CB);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_TC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_TC(double symflp_TC) {
    this.symflp_TC = symflp_TC;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_TC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_TC(Optional<? extends Double> symflp_TC) {
    if (symflp_TC.isPresent()) {
      return setSymflp_TC(symflp_TC.get());
    } else {
      return clearSymflp_TC();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_TC()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_TC(@Nullable Double symflp_TC) {
    if (symflp_TC != null) {
      return setSymflp_TC(symflp_TC);
    } else {
      return clearSymflp_TC();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_TC()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_TC(UnaryOperator<Double> mapper) {
    return setSymflp_TC(getSymflp_TC().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_TC()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_TC() {
    this.symflp_TC = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_TC()}.
   */
  public Optional<Double> getSymflp_TC() {
    return Optional.ofNullable(symflp_TC);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_PHETE(double symflp_PHETE) {
    this.symflp_PHETE = symflp_PHETE;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_PHETE(Optional<? extends Double> symflp_PHETE) {
    if (symflp_PHETE.isPresent()) {
      return setSymflp_PHETE(symflp_PHETE.get());
    } else {
      return clearSymflp_PHETE();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETE()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_PHETE(@Nullable Double symflp_PHETE) {
    if (symflp_PHETE != null) {
      return setSymflp_PHETE(symflp_PHETE);
    } else {
      return clearSymflp_PHETE();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_PHETE()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_PHETE(UnaryOperator<Double> mapper) {
    return setSymflp_PHETE(getSymflp_PHETE().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETE()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_PHETE() {
    this.symflp_PHETE = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_PHETE()}.
   */
  public Optional<Double> getSymflp_PHETE() {
    return Optional.ofNullable(symflp_PHETE);
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETEP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_PHETEP(double symflp_PHETEP) {
    this.symflp_PHETEP = symflp_PHETEP;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETEP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setSymflp_PHETEP(Optional<? extends Double> symflp_PHETEP) {
    if (symflp_PHETEP.isPresent()) {
      return setSymflp_PHETEP(symflp_PHETEP.get());
    } else {
      return clearSymflp_PHETEP();
    }
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETEP()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder setNullableSymflp_PHETEP(@Nullable Double symflp_PHETEP) {
    if (symflp_PHETEP != null) {
      return setSymflp_PHETEP(symflp_PHETEP);
    } else {
      return clearSymflp_PHETEP();
    }
  }

  /**
   * If the value to be returned by {@link DatcomInputData#getSymflp_PHETEP()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public DatcomInputData.Builder mapSymflp_PHETEP(UnaryOperator<Double> mapper) {
    return setSymflp_PHETEP(getSymflp_PHETEP().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link DatcomInputData#getSymflp_PHETEP()}
   * to {@link Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public DatcomInputData.Builder clearSymflp_PHETEP() {
    this.symflp_PHETEP = null;
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link DatcomInputData#getSymflp_PHETEP()}.
   */
  public Optional<Double> getSymflp_PHETEP() {
    return Optional.ofNullable(symflp_PHETEP);
  }

  /**
   * Sets all property values using the given {@code DatcomInputData} as a template.
   */
  public DatcomInputData.Builder mergeFrom(DatcomInputData value) {
    DatcomInputData_Builder _defaults = new DatcomInputData.Builder();
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.DESCRIPTION)
        || !value.getDescription().equals(_defaults.getDescription())) {
      setDescription(value.getDescription());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.ENGINE_TYPE)
        || !value.getEngineType().equals(_defaults.getEngineType())) {
      setEngineType(value.getEngineType());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DIM)
        || !value.getCommand_DIM().equals(_defaults.getCommand_DIM())) {
      setCommand_DIM(value.getCommand_DIM());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__TRIM)
        || value.getCommand_TRIM() != _defaults.getCommand_TRIM()) {
      setCommand_TRIM(value.getCommand_TRIM());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DAMP)
        || value.getCommand_DAMP() != _defaults.getCommand_DAMP()) {
      setCommand_DAMP(value.getCommand_DAMP());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__PART)
        || value.getCommand_PART() != _defaults.getCommand_PART()) {
      setCommand_PART(value.getCommand_PART());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DERIV)
        || !value.getCommand_DERIV().equals(_defaults.getCommand_DERIV())) {
      setCommand_DERIV(value.getCommand_DERIV());
    }
    addAllFltcon_MACH(value.getFltcon_MACH());
    addAllFltcon_ALT(value.getFltcon_ALT());
    addAllFltcon_ALSCHD(value.getFltcon_ALSCHD());
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__GAMMA)
        || !value.getFltcon_GAMMA().equals(_defaults.getFltcon_GAMMA())) {
      setFltcon_GAMMA(value.getFltcon_GAMMA());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__LOOP)
        || value.getFltcon_LOOP() != _defaults.getFltcon_LOOP()) {
      setFltcon_LOOP(value.getFltcon_LOOP());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__RNNUB)
        || !value.getFltcon_RNNUB().equals(_defaults.getFltcon_RNNUB())) {
      setFltcon_RNNUB(value.getFltcon_RNNUB());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__BLREF)
        || !value.getOptins_BLREF().equals(_defaults.getOptins_BLREF())) {
      setOptins_BLREF(value.getOptins_BLREF());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__SREF)
        || !value.getOptins_SREF().equals(_defaults.getOptins_SREF())) {
      setOptins_SREF(value.getOptins_SREF());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__CBARR)
        || !value.getOptins_CBARR().equals(_defaults.getOptins_CBARR())) {
      setOptins_CBARR(value.getOptins_CBARR());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XW)
        || !value.getSynths_XW().equals(_defaults.getSynths_XW())) {
      setSynths_XW(value.getSynths_XW());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZW)
        || !value.getSynths_ZW().equals(_defaults.getSynths_ZW())) {
      setSynths_ZW(value.getSynths_ZW());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ALIW)
        || !value.getSynths_ALIW().equals(_defaults.getSynths_ALIW())) {
      setSynths_ALIW(value.getSynths_ALIW());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XCG)
        || !value.getSynths_XCG().equals(_defaults.getSynths_XCG())) {
      setSynths_XCG(value.getSynths_XCG());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZCG)
        || !value.getSynths_ZCG().equals(_defaults.getSynths_ZCG())) {
      setSynths_ZCG(value.getSynths_ZCG());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XH)
        || !value.getSynths_XH().equals(_defaults.getSynths_XH())) {
      setSynths_XH(value.getSynths_XH());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZH)
        || !value.getSynths_ZH().equals(_defaults.getSynths_ZH())) {
      setSynths_ZH(value.getSynths_ZH());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XV)
        || !value.getSynths_XV().equals(_defaults.getSynths_XV())) {
      setSynths_XV(value.getSynths_XV());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZV)
        || !value.getSynths_ZV().equals(_defaults.getSynths_ZV())) {
      setSynths_ZV(value.getSynths_ZV());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XVF)
        || !value.getSynths_XVF().equals(_defaults.getSynths_XVF())) {
      setSynths_XVF(value.getSynths_XVF());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZVF)
        || !value.getSynths_ZVF().equals(_defaults.getSynths_ZVF())) {
      setSynths_ZVF(value.getSynths_ZVF());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__VERTUP)
        || value.getSynths_VERTUP() != _defaults.getSynths_VERTUP()) {
      setSynths_VERTUP(value.getSynths_VERTUP());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BNOSE)
        || !value.getBody_BNOSE().equals(_defaults.getBody_BNOSE())) {
      setBody_BNOSE(value.getBody_BNOSE());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BTAIL)
        || !value.getBody_BTAIL().equals(_defaults.getBody_BTAIL())) {
      setBody_BTAIL(value.getBody_BTAIL());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BLA)
        || !value.getBody_BLA().equals(_defaults.getBody_BLA())) {
      setBody_BLA(value.getBody_BLA());
    }
    addAllBody_X(value.getBody_X());
    addAllBody_ZU(value.getBody_ZU());
    addAllBody_ZL(value.getBody_ZL());
    addAllBody_S(value.getBody_S());
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDR)
        || !value.getWgplnf_CHRDR().equals(_defaults.getWgplnf_CHRDR())) {
      setWgplnf_CHRDR(value.getWgplnf_CHRDR());
    }
    value.getWgplnf_CHRDBP().ifPresent(this::setWgplnf_CHRDBP);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDTP)
        || !value.getWgplnf_CHRDTP().equals(_defaults.getWgplnf_CHRDTP())) {
      setWgplnf_CHRDTP(value.getWgplnf_CHRDTP());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPN)
        || !value.getWgplnf_SSPN().equals(_defaults.getWgplnf_SSPN())) {
      setWgplnf_SSPN(value.getWgplnf_SSPN());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPNE)
        || !value.getWgplnf_SSPNE().equals(_defaults.getWgplnf_SSPNE())) {
      setWgplnf_SSPNE(value.getWgplnf_SSPNE());
    }
    value.getWgplnf_SSPNOP().ifPresent(this::setWgplnf_SSPNOP);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SAVSI)
        || !value.getWgplnf_SAVSI().equals(_defaults.getWgplnf_SAVSI())) {
      setWgplnf_SAVSI(value.getWgplnf_SAVSI());
    }
    value.getWgplnf_SAVSO().ifPresent(this::setWgplnf_SAVSO);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHSTAT)
        || !value.getWgplnf_CHSTAT().equals(_defaults.getWgplnf_CHSTAT())) {
      setWgplnf_CHSTAT(value.getWgplnf_CHSTAT());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TWISTA)
        || !value.getWgplnf_TWISTA().equals(_defaults.getWgplnf_TWISTA())) {
      setWgplnf_TWISTA(value.getWgplnf_TWISTA());
    }
    value.getWgplnf_SSPNDD().ifPresent(this::setWgplnf_SSPNDD);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__DHDADI)
        || !value.getWgplnf_DHDADI().equals(_defaults.getWgplnf_DHDADI())) {
      setWgplnf_DHDADI(value.getWgplnf_DHDADI());
    }
    value.getWgplnf_DHDADO().ifPresent(this::setWgplnf_DHDADO);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TYPE)
        || value.getWgplnf_TYPE() != _defaults.getWgplnf_TYPE()) {
      setWgplnf_TYPE(value.getWgplnf_TYPE());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDR)
        || !value.getVtplnf_CHRDR().equals(_defaults.getVtplnf_CHRDR())) {
      setVtplnf_CHRDR(value.getVtplnf_CHRDR());
    }
    value.getVtplnf_CHRDBP().ifPresent(this::setVtplnf_CHRDBP);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDTP)
        || !value.getVtplnf_CHRDTP().equals(_defaults.getVtplnf_CHRDTP())) {
      setVtplnf_CHRDTP(value.getVtplnf_CHRDTP());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPN)
        || !value.getVtplnf_SSPN().equals(_defaults.getVtplnf_SSPN())) {
      setVtplnf_SSPN(value.getVtplnf_SSPN());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPNE)
        || !value.getVtplnf_SSPNE().equals(_defaults.getVtplnf_SSPNE())) {
      setVtplnf_SSPNE(value.getVtplnf_SSPNE());
    }
    value.getVtplnf_SSPNOP().ifPresent(this::setVtplnf_SSPNOP);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SAVSI)
        || !value.getVtplnf_SAVSI().equals(_defaults.getVtplnf_SAVSI())) {
      setVtplnf_SAVSI(value.getVtplnf_SAVSI());
    }
    value.getVtplnf_SAVSO().ifPresent(this::setVtplnf_SAVSO);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHSTAT)
        || !value.getVtplnf_CHSTAT().equals(_defaults.getVtplnf_CHSTAT())) {
      setVtplnf_CHSTAT(value.getVtplnf_CHSTAT());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TWISTA)
        || !value.getVtplnf_TWISTA().equals(_defaults.getVtplnf_TWISTA())) {
      setVtplnf_TWISTA(value.getVtplnf_TWISTA());
    }
    value.getVtplnf_SSPNDD().ifPresent(this::setVtplnf_SSPNDD);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__DHDADI)
        || !value.getVtplnf_DHDADI().equals(_defaults.getVtplnf_DHDADI())) {
      setVtplnf_DHDADI(value.getVtplnf_DHDADI());
    }
    value.getVtplnf_DHDADO().ifPresent(this::setVtplnf_DHDADO);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TYPE)
        || value.getVtplnf_TYPE() != _defaults.getVtplnf_TYPE()) {
      setVtplnf_TYPE(value.getVtplnf_TYPE());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDR)
        || !value.getHtplnf_CHRDR().equals(_defaults.getHtplnf_CHRDR())) {
      setHtplnf_CHRDR(value.getHtplnf_CHRDR());
    }
    value.getHtplnf_CHRDBP().ifPresent(this::setHtplnf_CHRDBP);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDTP)
        || !value.getHtplnf_CHRDTP().equals(_defaults.getHtplnf_CHRDTP())) {
      setHtplnf_CHRDTP(value.getHtplnf_CHRDTP());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPN)
        || !value.getHtplnf_SSPN().equals(_defaults.getHtplnf_SSPN())) {
      setHtplnf_SSPN(value.getHtplnf_SSPN());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPNE)
        || !value.getHtplnf_SSPNE().equals(_defaults.getHtplnf_SSPNE())) {
      setHtplnf_SSPNE(value.getHtplnf_SSPNE());
    }
    value.getHtplnf_SSPNOP().ifPresent(this::setHtplnf_SSPNOP);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SAVSI)
        || !value.getHtplnf_SAVSI().equals(_defaults.getHtplnf_SAVSI())) {
      setHtplnf_SAVSI(value.getHtplnf_SAVSI());
    }
    value.getHtplnf_SAVSO().ifPresent(this::setHtplnf_SAVSO);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHSTAT)
        || !value.getHtplnf_CHSTAT().equals(_defaults.getHtplnf_CHSTAT())) {
      setHtplnf_CHSTAT(value.getHtplnf_CHSTAT());
    }
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TWISTA)
        || !value.getHtplnf_TWISTA().equals(_defaults.getHtplnf_TWISTA())) {
      setHtplnf_TWISTA(value.getHtplnf_TWISTA());
    }
    value.getHtplnf_SSPNDD().ifPresent(this::setHtplnf_SSPNDD);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__DHDADI)
        || !value.getHtplnf_DHDADI().equals(_defaults.getHtplnf_DHDADI())) {
      setHtplnf_DHDADI(value.getHtplnf_DHDADI());
    }
    value.getHtplnf_DHDADO().ifPresent(this::setHtplnf_DHDADO);
    if (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TYPE)
        || value.getHtplnf_TYPE() != _defaults.getHtplnf_TYPE()) {
      setHtplnf_TYPE(value.getHtplnf_TYPE());
    }
    value.getJetpwr_AIETLJ().ifPresent(this::setJetpwr_AIETLJ);
    value.getJetpwr_AMBSTP().ifPresent(this::setJetpwr_AMBSTP);
    value.getJetpwr_AMBTMP().ifPresent(this::setJetpwr_AMBTMP);
    value.getJetpwr_JEALOC().ifPresent(this::setJetpwr_JEALOC);
    value.getJetpwr_JELLOC().ifPresent(this::setJetpwr_JELLOC);
    value.getJetpwr_JERAD().ifPresent(this::setJetpwr_JERAD);
    value.getJetpwr_JEVLOC().ifPresent(this::setJetpwr_JEVLOC);
    value.getJetpwr_JIALOC().ifPresent(this::setJetpwr_JIALOC);
    value.getJetpwr_JINLTA().ifPresent(this::setJetpwr_JINLTA);
    value.getJetpwr_THSTCJ().ifPresent(this::setJetpwr_THSTCJ);
    value.getJetpwr_JEANGL().ifPresent(this::setJetpwr_JEANGL);
    value.getJetpwr_NENGSJ().ifPresent(this::setJetpwr_NENGSJ);
    value.getPropwr_NENGSP().ifPresent(this::setPropwr_NENGSP);
    value.getPropwr_AIETLP().ifPresent(this::setPropwr_AIETLP);
    value.getPropwr_THSTCP().ifPresent(this::setPropwr_THSTCP);
    value.getPropwr_PHALOC().ifPresent(this::setPropwr_PHALOC);
    value.getPropwr_PHVLOC().ifPresent(this::setPropwr_PHVLOC);
    value.getPropwr_PRPRAD().ifPresent(this::setPropwr_PRPRAD);
    value.getPropwr_ENGFCT().ifPresent(this::setPropwr_ENGFCT);
    value.getPropwr_BWAPR3().ifPresent(this::setPropwr_BWAPR3);
    value.getPropwr_BWAPR6().ifPresent(this::setPropwr_BWAPR6);
    value.getPropwr_BWAPR9().ifPresent(this::setPropwr_BWAPR9);
    value.getPropwr_NOPBPE().ifPresent(this::setPropwr_NOPBPE);
    value.getPropwr_BAPR75().ifPresent(this::setPropwr_BAPR75);
    value.getPropwr_YP().ifPresent(this::setPropwr_YP);
    value.getPropwr_CROT().ifPresent(this::setPropwr_CROT);
    value.getSymflp_FTYPE().ifPresent(this::setSymflp_FTYPE);
    value.getSymflp_DELTA().ifPresent(this::setSymflp_DELTA);
    value.getSymflp_SPANFI().ifPresent(this::setSymflp_SPANFI);
    value.getSymflp_SPANFO().ifPresent(this::setSymflp_SPANFO);
    value.getSymflp_CHRDFI().ifPresent(this::setSymflp_CHRDFI);
    value.getSymflp_CHRDFO().ifPresent(this::setSymflp_CHRDFO);
    value.getSymflp_NTYPE().ifPresent(this::setSymflp_NTYPE);
    value.getSymflp_CB().ifPresent(this::setSymflp_CB);
    value.getSymflp_TC().ifPresent(this::setSymflp_TC);
    value.getSymflp_PHETE().ifPresent(this::setSymflp_PHETE);
    value.getSymflp_PHETEP().ifPresent(this::setSymflp_PHETEP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public DatcomInputData.Builder mergeFrom(DatcomInputData.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    DatcomInputData_Builder base = (DatcomInputData_Builder) template;
    DatcomInputData_Builder _defaults = new DatcomInputData.Builder();
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.DESCRIPTION)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.DESCRIPTION)
            || !template.getDescription().equals(_defaults.getDescription()))) {
      setDescription(template.getDescription());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.ENGINE_TYPE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.ENGINE_TYPE)
            || !template.getEngineType().equals(_defaults.getEngineType()))) {
      setEngineType(template.getEngineType());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DIM)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DIM)
            || !template.getCommand_DIM().equals(_defaults.getCommand_DIM()))) {
      setCommand_DIM(template.getCommand_DIM());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__TRIM)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__TRIM)
            || template.getCommand_TRIM() != _defaults.getCommand_TRIM())) {
      setCommand_TRIM(template.getCommand_TRIM());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DAMP)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DAMP)
            || template.getCommand_DAMP() != _defaults.getCommand_DAMP())) {
      setCommand_DAMP(template.getCommand_DAMP());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__PART)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__PART)
            || template.getCommand_PART() != _defaults.getCommand_PART())) {
      setCommand_PART(template.getCommand_PART());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DERIV)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DERIV)
            || !template.getCommand_DERIV().equals(_defaults.getCommand_DERIV()))) {
      setCommand_DERIV(template.getCommand_DERIV());
    }
    addAllFltcon_MACH(((DatcomInputData_Builder) template).fltcon_MACH);
    addAllFltcon_ALT(((DatcomInputData_Builder) template).fltcon_ALT);
    addAllFltcon_ALSCHD(((DatcomInputData_Builder) template).fltcon_ALSCHD);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__GAMMA)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__GAMMA)
            || !template.getFltcon_GAMMA().equals(_defaults.getFltcon_GAMMA()))) {
      setFltcon_GAMMA(template.getFltcon_GAMMA());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__LOOP)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__LOOP)
            || template.getFltcon_LOOP() != _defaults.getFltcon_LOOP())) {
      setFltcon_LOOP(template.getFltcon_LOOP());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__RNNUB)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__RNNUB)
            || !template.getFltcon_RNNUB().equals(_defaults.getFltcon_RNNUB()))) {
      setFltcon_RNNUB(template.getFltcon_RNNUB());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__BLREF)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__BLREF)
            || !template.getOptins_BLREF().equals(_defaults.getOptins_BLREF()))) {
      setOptins_BLREF(template.getOptins_BLREF());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__SREF)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__SREF)
            || !template.getOptins_SREF().equals(_defaults.getOptins_SREF()))) {
      setOptins_SREF(template.getOptins_SREF());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__CBARR)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__CBARR)
            || !template.getOptins_CBARR().equals(_defaults.getOptins_CBARR()))) {
      setOptins_CBARR(template.getOptins_CBARR());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XW)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XW)
            || !template.getSynths_XW().equals(_defaults.getSynths_XW()))) {
      setSynths_XW(template.getSynths_XW());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZW)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZW)
            || !template.getSynths_ZW().equals(_defaults.getSynths_ZW()))) {
      setSynths_ZW(template.getSynths_ZW());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ALIW)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ALIW)
            || !template.getSynths_ALIW().equals(_defaults.getSynths_ALIW()))) {
      setSynths_ALIW(template.getSynths_ALIW());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XCG)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XCG)
            || !template.getSynths_XCG().equals(_defaults.getSynths_XCG()))) {
      setSynths_XCG(template.getSynths_XCG());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZCG)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZCG)
            || !template.getSynths_ZCG().equals(_defaults.getSynths_ZCG()))) {
      setSynths_ZCG(template.getSynths_ZCG());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XH)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XH)
            || !template.getSynths_XH().equals(_defaults.getSynths_XH()))) {
      setSynths_XH(template.getSynths_XH());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZH)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZH)
            || !template.getSynths_ZH().equals(_defaults.getSynths_ZH()))) {
      setSynths_ZH(template.getSynths_ZH());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XV)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XV)
            || !template.getSynths_XV().equals(_defaults.getSynths_XV()))) {
      setSynths_XV(template.getSynths_XV());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZV)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZV)
            || !template.getSynths_ZV().equals(_defaults.getSynths_ZV()))) {
      setSynths_ZV(template.getSynths_ZV());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XVF)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XVF)
            || !template.getSynths_XVF().equals(_defaults.getSynths_XVF()))) {
      setSynths_XVF(template.getSynths_XVF());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZVF)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZVF)
            || !template.getSynths_ZVF().equals(_defaults.getSynths_ZVF()))) {
      setSynths_ZVF(template.getSynths_ZVF());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__VERTUP)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__VERTUP)
            || template.getSynths_VERTUP() != _defaults.getSynths_VERTUP())) {
      setSynths_VERTUP(template.getSynths_VERTUP());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BNOSE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BNOSE)
            || !template.getBody_BNOSE().equals(_defaults.getBody_BNOSE()))) {
      setBody_BNOSE(template.getBody_BNOSE());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BTAIL)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BTAIL)
            || !template.getBody_BTAIL().equals(_defaults.getBody_BTAIL()))) {
      setBody_BTAIL(template.getBody_BTAIL());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BLA)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BLA)
            || !template.getBody_BLA().equals(_defaults.getBody_BLA()))) {
      setBody_BLA(template.getBody_BLA());
    }
    addAllBody_X(((DatcomInputData_Builder) template).body_X);
    addAllBody_ZU(((DatcomInputData_Builder) template).body_ZU);
    addAllBody_ZL(((DatcomInputData_Builder) template).body_ZL);
    addAllBody_S(((DatcomInputData_Builder) template).body_S);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDR)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDR)
            || !template.getWgplnf_CHRDR().equals(_defaults.getWgplnf_CHRDR()))) {
      setWgplnf_CHRDR(template.getWgplnf_CHRDR());
    }
    template.getWgplnf_CHRDBP().ifPresent(this::setWgplnf_CHRDBP);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDTP)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDTP)
            || !template.getWgplnf_CHRDTP().equals(_defaults.getWgplnf_CHRDTP()))) {
      setWgplnf_CHRDTP(template.getWgplnf_CHRDTP());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPN)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPN)
            || !template.getWgplnf_SSPN().equals(_defaults.getWgplnf_SSPN()))) {
      setWgplnf_SSPN(template.getWgplnf_SSPN());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPNE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPNE)
            || !template.getWgplnf_SSPNE().equals(_defaults.getWgplnf_SSPNE()))) {
      setWgplnf_SSPNE(template.getWgplnf_SSPNE());
    }
    template.getWgplnf_SSPNOP().ifPresent(this::setWgplnf_SSPNOP);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SAVSI)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SAVSI)
            || !template.getWgplnf_SAVSI().equals(_defaults.getWgplnf_SAVSI()))) {
      setWgplnf_SAVSI(template.getWgplnf_SAVSI());
    }
    template.getWgplnf_SAVSO().ifPresent(this::setWgplnf_SAVSO);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHSTAT)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHSTAT)
            || !template.getWgplnf_CHSTAT().equals(_defaults.getWgplnf_CHSTAT()))) {
      setWgplnf_CHSTAT(template.getWgplnf_CHSTAT());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TWISTA)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TWISTA)
            || !template.getWgplnf_TWISTA().equals(_defaults.getWgplnf_TWISTA()))) {
      setWgplnf_TWISTA(template.getWgplnf_TWISTA());
    }
    template.getWgplnf_SSPNDD().ifPresent(this::setWgplnf_SSPNDD);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__DHDADI)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__DHDADI)
            || !template.getWgplnf_DHDADI().equals(_defaults.getWgplnf_DHDADI()))) {
      setWgplnf_DHDADI(template.getWgplnf_DHDADI());
    }
    template.getWgplnf_DHDADO().ifPresent(this::setWgplnf_DHDADO);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TYPE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TYPE)
            || template.getWgplnf_TYPE() != _defaults.getWgplnf_TYPE())) {
      setWgplnf_TYPE(template.getWgplnf_TYPE());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDR)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDR)
            || !template.getVtplnf_CHRDR().equals(_defaults.getVtplnf_CHRDR()))) {
      setVtplnf_CHRDR(template.getVtplnf_CHRDR());
    }
    template.getVtplnf_CHRDBP().ifPresent(this::setVtplnf_CHRDBP);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDTP)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDTP)
            || !template.getVtplnf_CHRDTP().equals(_defaults.getVtplnf_CHRDTP()))) {
      setVtplnf_CHRDTP(template.getVtplnf_CHRDTP());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPN)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPN)
            || !template.getVtplnf_SSPN().equals(_defaults.getVtplnf_SSPN()))) {
      setVtplnf_SSPN(template.getVtplnf_SSPN());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPNE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPNE)
            || !template.getVtplnf_SSPNE().equals(_defaults.getVtplnf_SSPNE()))) {
      setVtplnf_SSPNE(template.getVtplnf_SSPNE());
    }
    template.getVtplnf_SSPNOP().ifPresent(this::setVtplnf_SSPNOP);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SAVSI)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SAVSI)
            || !template.getVtplnf_SAVSI().equals(_defaults.getVtplnf_SAVSI()))) {
      setVtplnf_SAVSI(template.getVtplnf_SAVSI());
    }
    template.getVtplnf_SAVSO().ifPresent(this::setVtplnf_SAVSO);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHSTAT)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHSTAT)
            || !template.getVtplnf_CHSTAT().equals(_defaults.getVtplnf_CHSTAT()))) {
      setVtplnf_CHSTAT(template.getVtplnf_CHSTAT());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TWISTA)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TWISTA)
            || !template.getVtplnf_TWISTA().equals(_defaults.getVtplnf_TWISTA()))) {
      setVtplnf_TWISTA(template.getVtplnf_TWISTA());
    }
    template.getVtplnf_SSPNDD().ifPresent(this::setVtplnf_SSPNDD);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__DHDADI)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__DHDADI)
            || !template.getVtplnf_DHDADI().equals(_defaults.getVtplnf_DHDADI()))) {
      setVtplnf_DHDADI(template.getVtplnf_DHDADI());
    }
    template.getVtplnf_DHDADO().ifPresent(this::setVtplnf_DHDADO);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TYPE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TYPE)
            || template.getVtplnf_TYPE() != _defaults.getVtplnf_TYPE())) {
      setVtplnf_TYPE(template.getVtplnf_TYPE());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDR)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDR)
            || !template.getHtplnf_CHRDR().equals(_defaults.getHtplnf_CHRDR()))) {
      setHtplnf_CHRDR(template.getHtplnf_CHRDR());
    }
    template.getHtplnf_CHRDBP().ifPresent(this::setHtplnf_CHRDBP);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDTP)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDTP)
            || !template.getHtplnf_CHRDTP().equals(_defaults.getHtplnf_CHRDTP()))) {
      setHtplnf_CHRDTP(template.getHtplnf_CHRDTP());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPN)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPN)
            || !template.getHtplnf_SSPN().equals(_defaults.getHtplnf_SSPN()))) {
      setHtplnf_SSPN(template.getHtplnf_SSPN());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPNE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPNE)
            || !template.getHtplnf_SSPNE().equals(_defaults.getHtplnf_SSPNE()))) {
      setHtplnf_SSPNE(template.getHtplnf_SSPNE());
    }
    template.getHtplnf_SSPNOP().ifPresent(this::setHtplnf_SSPNOP);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SAVSI)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SAVSI)
            || !template.getHtplnf_SAVSI().equals(_defaults.getHtplnf_SAVSI()))) {
      setHtplnf_SAVSI(template.getHtplnf_SAVSI());
    }
    template.getHtplnf_SAVSO().ifPresent(this::setHtplnf_SAVSO);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHSTAT)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHSTAT)
            || !template.getHtplnf_CHSTAT().equals(_defaults.getHtplnf_CHSTAT()))) {
      setHtplnf_CHSTAT(template.getHtplnf_CHSTAT());
    }
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TWISTA)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TWISTA)
            || !template.getHtplnf_TWISTA().equals(_defaults.getHtplnf_TWISTA()))) {
      setHtplnf_TWISTA(template.getHtplnf_TWISTA());
    }
    template.getHtplnf_SSPNDD().ifPresent(this::setHtplnf_SSPNDD);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__DHDADI)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__DHDADI)
            || !template.getHtplnf_DHDADI().equals(_defaults.getHtplnf_DHDADI()))) {
      setHtplnf_DHDADI(template.getHtplnf_DHDADI());
    }
    template.getHtplnf_DHDADO().ifPresent(this::setHtplnf_DHDADO);
    if (!base._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TYPE)
        && (_defaults._unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TYPE)
            || template.getHtplnf_TYPE() != _defaults.getHtplnf_TYPE())) {
      setHtplnf_TYPE(template.getHtplnf_TYPE());
    }
    template.getJetpwr_AIETLJ().ifPresent(this::setJetpwr_AIETLJ);
    template.getJetpwr_AMBSTP().ifPresent(this::setJetpwr_AMBSTP);
    template.getJetpwr_AMBTMP().ifPresent(this::setJetpwr_AMBTMP);
    template.getJetpwr_JEALOC().ifPresent(this::setJetpwr_JEALOC);
    template.getJetpwr_JELLOC().ifPresent(this::setJetpwr_JELLOC);
    template.getJetpwr_JERAD().ifPresent(this::setJetpwr_JERAD);
    template.getJetpwr_JEVLOC().ifPresent(this::setJetpwr_JEVLOC);
    template.getJetpwr_JIALOC().ifPresent(this::setJetpwr_JIALOC);
    template.getJetpwr_JINLTA().ifPresent(this::setJetpwr_JINLTA);
    template.getJetpwr_THSTCJ().ifPresent(this::setJetpwr_THSTCJ);
    template.getJetpwr_JEANGL().ifPresent(this::setJetpwr_JEANGL);
    template.getJetpwr_NENGSJ().ifPresent(this::setJetpwr_NENGSJ);
    template.getPropwr_NENGSP().ifPresent(this::setPropwr_NENGSP);
    template.getPropwr_AIETLP().ifPresent(this::setPropwr_AIETLP);
    template.getPropwr_THSTCP().ifPresent(this::setPropwr_THSTCP);
    template.getPropwr_PHALOC().ifPresent(this::setPropwr_PHALOC);
    template.getPropwr_PHVLOC().ifPresent(this::setPropwr_PHVLOC);
    template.getPropwr_PRPRAD().ifPresent(this::setPropwr_PRPRAD);
    template.getPropwr_ENGFCT().ifPresent(this::setPropwr_ENGFCT);
    template.getPropwr_BWAPR3().ifPresent(this::setPropwr_BWAPR3);
    template.getPropwr_BWAPR6().ifPresent(this::setPropwr_BWAPR6);
    template.getPropwr_BWAPR9().ifPresent(this::setPropwr_BWAPR9);
    template.getPropwr_NOPBPE().ifPresent(this::setPropwr_NOPBPE);
    template.getPropwr_BAPR75().ifPresent(this::setPropwr_BAPR75);
    template.getPropwr_YP().ifPresent(this::setPropwr_YP);
    template.getPropwr_CROT().ifPresent(this::setPropwr_CROT);
    template.getSymflp_FTYPE().ifPresent(this::setSymflp_FTYPE);
    template.getSymflp_DELTA().ifPresent(this::setSymflp_DELTA);
    template.getSymflp_SPANFI().ifPresent(this::setSymflp_SPANFI);
    template.getSymflp_SPANFO().ifPresent(this::setSymflp_SPANFO);
    template.getSymflp_CHRDFI().ifPresent(this::setSymflp_CHRDFI);
    template.getSymflp_CHRDFO().ifPresent(this::setSymflp_CHRDFO);
    template.getSymflp_NTYPE().ifPresent(this::setSymflp_NTYPE);
    template.getSymflp_CB().ifPresent(this::setSymflp_CB);
    template.getSymflp_TC().ifPresent(this::setSymflp_TC);
    template.getSymflp_PHETE().ifPresent(this::setSymflp_PHETE);
    template.getSymflp_PHETEP().ifPresent(this::setSymflp_PHETEP);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public DatcomInputData.Builder clear() {
    DatcomInputData_Builder _defaults = new DatcomInputData.Builder();
    description = _defaults.description;
    engineType = _defaults.engineType;
    command_DIM = _defaults.command_DIM;
    command_TRIM = _defaults.command_TRIM;
    command_DAMP = _defaults.command_DAMP;
    command_PART = _defaults.command_PART;
    command_DERIV = _defaults.command_DERIV;
    fltcon_MACH.clear();
    fltcon_ALT.clear();
    fltcon_ALSCHD.clear();
    fltcon_GAMMA = _defaults.fltcon_GAMMA;
    fltcon_LOOP = _defaults.fltcon_LOOP;
    fltcon_RNNUB = _defaults.fltcon_RNNUB;
    optins_BLREF = _defaults.optins_BLREF;
    optins_SREF = _defaults.optins_SREF;
    optins_CBARR = _defaults.optins_CBARR;
    synths_XW = _defaults.synths_XW;
    synths_ZW = _defaults.synths_ZW;
    synths_ALIW = _defaults.synths_ALIW;
    synths_XCG = _defaults.synths_XCG;
    synths_ZCG = _defaults.synths_ZCG;
    synths_XH = _defaults.synths_XH;
    synths_ZH = _defaults.synths_ZH;
    synths_XV = _defaults.synths_XV;
    synths_ZV = _defaults.synths_ZV;
    synths_XVF = _defaults.synths_XVF;
    synths_ZVF = _defaults.synths_ZVF;
    synths_VERTUP = _defaults.synths_VERTUP;
    body_BNOSE = _defaults.body_BNOSE;
    body_BTAIL = _defaults.body_BTAIL;
    body_BLA = _defaults.body_BLA;
    body_X.clear();
    body_ZU.clear();
    body_ZL.clear();
    body_S.clear();
    wgplnf_CHRDR = _defaults.wgplnf_CHRDR;
    wgplnf_CHRDBP = _defaults.wgplnf_CHRDBP;
    wgplnf_CHRDTP = _defaults.wgplnf_CHRDTP;
    wgplnf_SSPN = _defaults.wgplnf_SSPN;
    wgplnf_SSPNE = _defaults.wgplnf_SSPNE;
    wgplnf_SSPNOP = _defaults.wgplnf_SSPNOP;
    wgplnf_SAVSI = _defaults.wgplnf_SAVSI;
    wgplnf_SAVSO = _defaults.wgplnf_SAVSO;
    wgplnf_CHSTAT = _defaults.wgplnf_CHSTAT;
    wgplnf_TWISTA = _defaults.wgplnf_TWISTA;
    wgplnf_SSPNDD = _defaults.wgplnf_SSPNDD;
    wgplnf_DHDADI = _defaults.wgplnf_DHDADI;
    wgplnf_DHDADO = _defaults.wgplnf_DHDADO;
    wgplnf_TYPE = _defaults.wgplnf_TYPE;
    vtplnf_CHRDR = _defaults.vtplnf_CHRDR;
    vtplnf_CHRDBP = _defaults.vtplnf_CHRDBP;
    vtplnf_CHRDTP = _defaults.vtplnf_CHRDTP;
    vtplnf_SSPN = _defaults.vtplnf_SSPN;
    vtplnf_SSPNE = _defaults.vtplnf_SSPNE;
    vtplnf_SSPNOP = _defaults.vtplnf_SSPNOP;
    vtplnf_SAVSI = _defaults.vtplnf_SAVSI;
    vtplnf_SAVSO = _defaults.vtplnf_SAVSO;
    vtplnf_CHSTAT = _defaults.vtplnf_CHSTAT;
    vtplnf_TWISTA = _defaults.vtplnf_TWISTA;
    vtplnf_SSPNDD = _defaults.vtplnf_SSPNDD;
    vtplnf_DHDADI = _defaults.vtplnf_DHDADI;
    vtplnf_DHDADO = _defaults.vtplnf_DHDADO;
    vtplnf_TYPE = _defaults.vtplnf_TYPE;
    htplnf_CHRDR = _defaults.htplnf_CHRDR;
    htplnf_CHRDBP = _defaults.htplnf_CHRDBP;
    htplnf_CHRDTP = _defaults.htplnf_CHRDTP;
    htplnf_SSPN = _defaults.htplnf_SSPN;
    htplnf_SSPNE = _defaults.htplnf_SSPNE;
    htplnf_SSPNOP = _defaults.htplnf_SSPNOP;
    htplnf_SAVSI = _defaults.htplnf_SAVSI;
    htplnf_SAVSO = _defaults.htplnf_SAVSO;
    htplnf_CHSTAT = _defaults.htplnf_CHSTAT;
    htplnf_TWISTA = _defaults.htplnf_TWISTA;
    htplnf_SSPNDD = _defaults.htplnf_SSPNDD;
    htplnf_DHDADI = _defaults.htplnf_DHDADI;
    htplnf_DHDADO = _defaults.htplnf_DHDADO;
    htplnf_TYPE = _defaults.htplnf_TYPE;
    jetpwr_AIETLJ = _defaults.jetpwr_AIETLJ;
    jetpwr_AMBSTP = _defaults.jetpwr_AMBSTP;
    jetpwr_AMBTMP = _defaults.jetpwr_AMBTMP;
    jetpwr_JEALOC = _defaults.jetpwr_JEALOC;
    jetpwr_JELLOC = _defaults.jetpwr_JELLOC;
    jetpwr_JERAD = _defaults.jetpwr_JERAD;
    jetpwr_JEVLOC = _defaults.jetpwr_JEVLOC;
    jetpwr_JIALOC = _defaults.jetpwr_JIALOC;
    jetpwr_JINLTA = _defaults.jetpwr_JINLTA;
    jetpwr_THSTCJ = _defaults.jetpwr_THSTCJ;
    jetpwr_JEANGL = _defaults.jetpwr_JEANGL;
    jetpwr_NENGSJ = _defaults.jetpwr_NENGSJ;
    propwr_NENGSP = _defaults.propwr_NENGSP;
    propwr_AIETLP = _defaults.propwr_AIETLP;
    propwr_THSTCP = _defaults.propwr_THSTCP;
    propwr_PHALOC = _defaults.propwr_PHALOC;
    propwr_PHVLOC = _defaults.propwr_PHVLOC;
    propwr_PRPRAD = _defaults.propwr_PRPRAD;
    propwr_ENGFCT = _defaults.propwr_ENGFCT;
    propwr_BWAPR3 = _defaults.propwr_BWAPR3;
    propwr_BWAPR6 = _defaults.propwr_BWAPR6;
    propwr_BWAPR9 = _defaults.propwr_BWAPR9;
    propwr_NOPBPE = _defaults.propwr_NOPBPE;
    propwr_BAPR75 = _defaults.propwr_BAPR75;
    propwr_YP = _defaults.propwr_YP;
    propwr_CROT = _defaults.propwr_CROT;
    symflp_FTYPE = _defaults.symflp_FTYPE;
    symflp_DELTA = _defaults.symflp_DELTA;
    symflp_SPANFI = _defaults.symflp_SPANFI;
    symflp_SPANFO = _defaults.symflp_SPANFO;
    symflp_CHRDFI = _defaults.symflp_CHRDFI;
    symflp_CHRDFO = _defaults.symflp_CHRDFO;
    symflp_NTYPE = _defaults.symflp_NTYPE;
    symflp_CB = _defaults.symflp_CB;
    symflp_TC = _defaults.symflp_TC;
    symflp_PHETE = _defaults.symflp_PHETE;
    symflp_PHETEP = _defaults.symflp_PHETEP;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (DatcomInputData.Builder) this;
  }

  /**
   * Returns a newly-created {@link DatcomInputData} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public DatcomInputData build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new DatcomInputData_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link DatcomInputData}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public DatcomInputData buildPartial() {
    return new DatcomInputData_Builder.Partial(this);
  }

  private static final class Value implements DatcomInputData {
    private final String description;
    private final DatcomEngineType engineType;
    private final String command_DIM;
    private final boolean command_TRIM;
    private final boolean command_DAMP;
    private final boolean command_PART;
    private final String command_DERIV;
    private final List<Double> fltcon_MACH;
    private final List<Double> fltcon_ALT;
    private final List<Double> fltcon_ALSCHD;
    private final Double fltcon_GAMMA;
    private final int fltcon_LOOP;
    private final Double fltcon_RNNUB;
    private final Double optins_BLREF;
    private final Double optins_SREF;
    private final Double optins_CBARR;
    private final Double synths_XW;
    private final Double synths_ZW;
    private final Double synths_ALIW;
    private final Double synths_XCG;
    private final Double synths_ZCG;
    private final Double synths_XH;
    private final Double synths_ZH;
    private final Double synths_XV;
    private final Double synths_ZV;
    private final Double synths_XVF;
    private final Double synths_ZVF;
    private final boolean synths_VERTUP;
    private final Double body_BNOSE;
    private final Double body_BTAIL;
    private final Double body_BLA;
    private final List<Double> body_X;
    private final List<Double> body_ZU;
    private final List<Double> body_ZL;
    private final List<Double> body_S;
    private final Double wgplnf_CHRDR;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_CHRDBP;
    private final Double wgplnf_CHRDTP;
    private final Double wgplnf_SSPN;
    private final Double wgplnf_SSPNE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_SSPNOP;
    private final Double wgplnf_SAVSI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_SAVSO;
    private final Double wgplnf_CHSTAT;
    private final Double wgplnf_TWISTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_SSPNDD;
    private final Double wgplnf_DHDADI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_DHDADO;
    private final int wgplnf_TYPE;
    private final Double vtplnf_CHRDR;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_CHRDBP;
    private final Double vtplnf_CHRDTP;
    private final Double vtplnf_SSPN;
    private final Double vtplnf_SSPNE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_SSPNOP;
    private final Double vtplnf_SAVSI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_SAVSO;
    private final Double vtplnf_CHSTAT;
    private final Double vtplnf_TWISTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_SSPNDD;
    private final Double vtplnf_DHDADI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_DHDADO;
    private final int vtplnf_TYPE;
    private final Double htplnf_CHRDR;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_CHRDBP;
    private final Double htplnf_CHRDTP;
    private final Double htplnf_SSPN;
    private final Double htplnf_SSPNE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_SSPNOP;
    private final Double htplnf_SAVSI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_SAVSO;
    private final Double htplnf_CHSTAT;
    private final Double htplnf_TWISTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_SSPNDD;
    private final Double htplnf_DHDADI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_DHDADO;
    private final int htplnf_TYPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_AIETLJ;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_AMBSTP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_AMBTMP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final List<Double> jetpwr_JEALOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JELLOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JERAD;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JEVLOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JIALOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JINLTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_THSTCJ;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JEANGL;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer jetpwr_NENGSJ;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer propwr_NENGSP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_AIETLP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_THSTCP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_PHALOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_PHVLOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_PRPRAD;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_ENGFCT;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BWAPR3;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BWAPR6;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BWAPR9;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer propwr_NOPBPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BAPR75;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_YP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Boolean propwr_CROT;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer symflp_FTYPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final List<Double> symflp_DELTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_SPANFI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_SPANFO;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_CHRDFI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_CHRDFO;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer symflp_NTYPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_CB;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_TC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_PHETE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_PHETEP;

    private Value(DatcomInputData_Builder builder) {
      this.description = builder.description;
      this.engineType = builder.engineType;
      this.command_DIM = builder.command_DIM;
      this.command_TRIM = builder.command_TRIM;
      this.command_DAMP = builder.command_DAMP;
      this.command_PART = builder.command_PART;
      this.command_DERIV = builder.command_DERIV;
      this.fltcon_MACH = ImmutableList.copyOf(builder.fltcon_MACH);
      this.fltcon_ALT = ImmutableList.copyOf(builder.fltcon_ALT);
      this.fltcon_ALSCHD = ImmutableList.copyOf(builder.fltcon_ALSCHD);
      this.fltcon_GAMMA = builder.fltcon_GAMMA;
      this.fltcon_LOOP = builder.fltcon_LOOP;
      this.fltcon_RNNUB = builder.fltcon_RNNUB;
      this.optins_BLREF = builder.optins_BLREF;
      this.optins_SREF = builder.optins_SREF;
      this.optins_CBARR = builder.optins_CBARR;
      this.synths_XW = builder.synths_XW;
      this.synths_ZW = builder.synths_ZW;
      this.synths_ALIW = builder.synths_ALIW;
      this.synths_XCG = builder.synths_XCG;
      this.synths_ZCG = builder.synths_ZCG;
      this.synths_XH = builder.synths_XH;
      this.synths_ZH = builder.synths_ZH;
      this.synths_XV = builder.synths_XV;
      this.synths_ZV = builder.synths_ZV;
      this.synths_XVF = builder.synths_XVF;
      this.synths_ZVF = builder.synths_ZVF;
      this.synths_VERTUP = builder.synths_VERTUP;
      this.body_BNOSE = builder.body_BNOSE;
      this.body_BTAIL = builder.body_BTAIL;
      this.body_BLA = builder.body_BLA;
      this.body_X = ImmutableList.copyOf(builder.body_X);
      this.body_ZU = ImmutableList.copyOf(builder.body_ZU);
      this.body_ZL = ImmutableList.copyOf(builder.body_ZL);
      this.body_S = ImmutableList.copyOf(builder.body_S);
      this.wgplnf_CHRDR = builder.wgplnf_CHRDR;
      this.wgplnf_CHRDBP = builder.wgplnf_CHRDBP;
      this.wgplnf_CHRDTP = builder.wgplnf_CHRDTP;
      this.wgplnf_SSPN = builder.wgplnf_SSPN;
      this.wgplnf_SSPNE = builder.wgplnf_SSPNE;
      this.wgplnf_SSPNOP = builder.wgplnf_SSPNOP;
      this.wgplnf_SAVSI = builder.wgplnf_SAVSI;
      this.wgplnf_SAVSO = builder.wgplnf_SAVSO;
      this.wgplnf_CHSTAT = builder.wgplnf_CHSTAT;
      this.wgplnf_TWISTA = builder.wgplnf_TWISTA;
      this.wgplnf_SSPNDD = builder.wgplnf_SSPNDD;
      this.wgplnf_DHDADI = builder.wgplnf_DHDADI;
      this.wgplnf_DHDADO = builder.wgplnf_DHDADO;
      this.wgplnf_TYPE = builder.wgplnf_TYPE;
      this.vtplnf_CHRDR = builder.vtplnf_CHRDR;
      this.vtplnf_CHRDBP = builder.vtplnf_CHRDBP;
      this.vtplnf_CHRDTP = builder.vtplnf_CHRDTP;
      this.vtplnf_SSPN = builder.vtplnf_SSPN;
      this.vtplnf_SSPNE = builder.vtplnf_SSPNE;
      this.vtplnf_SSPNOP = builder.vtplnf_SSPNOP;
      this.vtplnf_SAVSI = builder.vtplnf_SAVSI;
      this.vtplnf_SAVSO = builder.vtplnf_SAVSO;
      this.vtplnf_CHSTAT = builder.vtplnf_CHSTAT;
      this.vtplnf_TWISTA = builder.vtplnf_TWISTA;
      this.vtplnf_SSPNDD = builder.vtplnf_SSPNDD;
      this.vtplnf_DHDADI = builder.vtplnf_DHDADI;
      this.vtplnf_DHDADO = builder.vtplnf_DHDADO;
      this.vtplnf_TYPE = builder.vtplnf_TYPE;
      this.htplnf_CHRDR = builder.htplnf_CHRDR;
      this.htplnf_CHRDBP = builder.htplnf_CHRDBP;
      this.htplnf_CHRDTP = builder.htplnf_CHRDTP;
      this.htplnf_SSPN = builder.htplnf_SSPN;
      this.htplnf_SSPNE = builder.htplnf_SSPNE;
      this.htplnf_SSPNOP = builder.htplnf_SSPNOP;
      this.htplnf_SAVSI = builder.htplnf_SAVSI;
      this.htplnf_SAVSO = builder.htplnf_SAVSO;
      this.htplnf_CHSTAT = builder.htplnf_CHSTAT;
      this.htplnf_TWISTA = builder.htplnf_TWISTA;
      this.htplnf_SSPNDD = builder.htplnf_SSPNDD;
      this.htplnf_DHDADI = builder.htplnf_DHDADI;
      this.htplnf_DHDADO = builder.htplnf_DHDADO;
      this.htplnf_TYPE = builder.htplnf_TYPE;
      this.jetpwr_AIETLJ = builder.jetpwr_AIETLJ;
      this.jetpwr_AMBSTP = builder.jetpwr_AMBSTP;
      this.jetpwr_AMBTMP = builder.jetpwr_AMBTMP;
      this.jetpwr_JEALOC = builder.jetpwr_JEALOC;
      this.jetpwr_JELLOC = builder.jetpwr_JELLOC;
      this.jetpwr_JERAD = builder.jetpwr_JERAD;
      this.jetpwr_JEVLOC = builder.jetpwr_JEVLOC;
      this.jetpwr_JIALOC = builder.jetpwr_JIALOC;
      this.jetpwr_JINLTA = builder.jetpwr_JINLTA;
      this.jetpwr_THSTCJ = builder.jetpwr_THSTCJ;
      this.jetpwr_JEANGL = builder.jetpwr_JEANGL;
      this.jetpwr_NENGSJ = builder.jetpwr_NENGSJ;
      this.propwr_NENGSP = builder.propwr_NENGSP;
      this.propwr_AIETLP = builder.propwr_AIETLP;
      this.propwr_THSTCP = builder.propwr_THSTCP;
      this.propwr_PHALOC = builder.propwr_PHALOC;
      this.propwr_PHVLOC = builder.propwr_PHVLOC;
      this.propwr_PRPRAD = builder.propwr_PRPRAD;
      this.propwr_ENGFCT = builder.propwr_ENGFCT;
      this.propwr_BWAPR3 = builder.propwr_BWAPR3;
      this.propwr_BWAPR6 = builder.propwr_BWAPR6;
      this.propwr_BWAPR9 = builder.propwr_BWAPR9;
      this.propwr_NOPBPE = builder.propwr_NOPBPE;
      this.propwr_BAPR75 = builder.propwr_BAPR75;
      this.propwr_YP = builder.propwr_YP;
      this.propwr_CROT = builder.propwr_CROT;
      this.symflp_FTYPE = builder.symflp_FTYPE;
      this.symflp_DELTA = builder.symflp_DELTA;
      this.symflp_SPANFI = builder.symflp_SPANFI;
      this.symflp_SPANFO = builder.symflp_SPANFO;
      this.symflp_CHRDFI = builder.symflp_CHRDFI;
      this.symflp_CHRDFO = builder.symflp_CHRDFO;
      this.symflp_NTYPE = builder.symflp_NTYPE;
      this.symflp_CB = builder.symflp_CB;
      this.symflp_TC = builder.symflp_TC;
      this.symflp_PHETE = builder.symflp_PHETE;
      this.symflp_PHETEP = builder.symflp_PHETEP;
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public DatcomEngineType getEngineType() {
      return engineType;
    }

    @Override
    public String getCommand_DIM() {
      return command_DIM;
    }

    @Override
    public boolean getCommand_TRIM() {
      return command_TRIM;
    }

    @Override
    public boolean getCommand_DAMP() {
      return command_DAMP;
    }

    @Override
    public boolean getCommand_PART() {
      return command_PART;
    }

    @Override
    public String getCommand_DERIV() {
      return command_DERIV;
    }

    @Override
    public List<Double> getFltcon_MACH() {
      return fltcon_MACH;
    }

    @Override
    public List<Double> getFltcon_ALT() {
      return fltcon_ALT;
    }

    @Override
    public List<Double> getFltcon_ALSCHD() {
      return fltcon_ALSCHD;
    }

    @Override
    public Double getFltcon_GAMMA() {
      return fltcon_GAMMA;
    }

    @Override
    public int getFltcon_LOOP() {
      return fltcon_LOOP;
    }

    @Override
    public Double getFltcon_RNNUB() {
      return fltcon_RNNUB;
    }

    @Override
    public Double getOptins_BLREF() {
      return optins_BLREF;
    }

    @Override
    public Double getOptins_SREF() {
      return optins_SREF;
    }

    @Override
    public Double getOptins_CBARR() {
      return optins_CBARR;
    }

    @Override
    public Double getSynths_XW() {
      return synths_XW;
    }

    @Override
    public Double getSynths_ZW() {
      return synths_ZW;
    }

    @Override
    public Double getSynths_ALIW() {
      return synths_ALIW;
    }

    @Override
    public Double getSynths_XCG() {
      return synths_XCG;
    }

    @Override
    public Double getSynths_ZCG() {
      return synths_ZCG;
    }

    @Override
    public Double getSynths_XH() {
      return synths_XH;
    }

    @Override
    public Double getSynths_ZH() {
      return synths_ZH;
    }

    @Override
    public Double getSynths_XV() {
      return synths_XV;
    }

    @Override
    public Double getSynths_ZV() {
      return synths_ZV;
    }

    @Override
    public Double getSynths_XVF() {
      return synths_XVF;
    }

    @Override
    public Double getSynths_ZVF() {
      return synths_ZVF;
    }

    @Override
    public boolean getSynths_VERTUP() {
      return synths_VERTUP;
    }

    @Override
    public Double getBody_BNOSE() {
      return body_BNOSE;
    }

    @Override
    public Double getBody_BTAIL() {
      return body_BTAIL;
    }

    @Override
    public Double getBody_BLA() {
      return body_BLA;
    }

    @Override
    public List<Double> getBody_X() {
      return body_X;
    }

    @Override
    public List<Double> getBody_ZU() {
      return body_ZU;
    }

    @Override
    public List<Double> getBody_ZL() {
      return body_ZL;
    }

    @Override
    public List<Double> getBody_S() {
      return body_S;
    }

    @Override
    public Double getWgplnf_CHRDR() {
      return wgplnf_CHRDR;
    }

    @Override
    public Optional<Double> getWgplnf_CHRDBP() {
      return Optional.ofNullable(wgplnf_CHRDBP);
    }

    @Override
    public Double getWgplnf_CHRDTP() {
      return wgplnf_CHRDTP;
    }

    @Override
    public Double getWgplnf_SSPN() {
      return wgplnf_SSPN;
    }

    @Override
    public Double getWgplnf_SSPNE() {
      return wgplnf_SSPNE;
    }

    @Override
    public Optional<Double> getWgplnf_SSPNOP() {
      return Optional.ofNullable(wgplnf_SSPNOP);
    }

    @Override
    public Double getWgplnf_SAVSI() {
      return wgplnf_SAVSI;
    }

    @Override
    public Optional<Double> getWgplnf_SAVSO() {
      return Optional.ofNullable(wgplnf_SAVSO);
    }

    @Override
    public Double getWgplnf_CHSTAT() {
      return wgplnf_CHSTAT;
    }

    @Override
    public Double getWgplnf_TWISTA() {
      return wgplnf_TWISTA;
    }

    @Override
    public Optional<Double> getWgplnf_SSPNDD() {
      return Optional.ofNullable(wgplnf_SSPNDD);
    }

    @Override
    public Double getWgplnf_DHDADI() {
      return wgplnf_DHDADI;
    }

    @Override
    public Optional<Double> getWgplnf_DHDADO() {
      return Optional.ofNullable(wgplnf_DHDADO);
    }

    @Override
    public int getWgplnf_TYPE() {
      return wgplnf_TYPE;
    }

    @Override
    public Double getVtplnf_CHRDR() {
      return vtplnf_CHRDR;
    }

    @Override
    public Optional<Double> getVtplnf_CHRDBP() {
      return Optional.ofNullable(vtplnf_CHRDBP);
    }

    @Override
    public Double getVtplnf_CHRDTP() {
      return vtplnf_CHRDTP;
    }

    @Override
    public Double getVtplnf_SSPN() {
      return vtplnf_SSPN;
    }

    @Override
    public Double getVtplnf_SSPNE() {
      return vtplnf_SSPNE;
    }

    @Override
    public Optional<Double> getVtplnf_SSPNOP() {
      return Optional.ofNullable(vtplnf_SSPNOP);
    }

    @Override
    public Double getVtplnf_SAVSI() {
      return vtplnf_SAVSI;
    }

    @Override
    public Optional<Double> getVtplnf_SAVSO() {
      return Optional.ofNullable(vtplnf_SAVSO);
    }

    @Override
    public Double getVtplnf_CHSTAT() {
      return vtplnf_CHSTAT;
    }

    @Override
    public Double getVtplnf_TWISTA() {
      return vtplnf_TWISTA;
    }

    @Override
    public Optional<Double> getVtplnf_SSPNDD() {
      return Optional.ofNullable(vtplnf_SSPNDD);
    }

    @Override
    public Double getVtplnf_DHDADI() {
      return vtplnf_DHDADI;
    }

    @Override
    public Optional<Double> getVtplnf_DHDADO() {
      return Optional.ofNullable(vtplnf_DHDADO);
    }

    @Override
    public int getVtplnf_TYPE() {
      return vtplnf_TYPE;
    }

    @Override
    public Double getHtplnf_CHRDR() {
      return htplnf_CHRDR;
    }

    @Override
    public Optional<Double> getHtplnf_CHRDBP() {
      return Optional.ofNullable(htplnf_CHRDBP);
    }

    @Override
    public Double getHtplnf_CHRDTP() {
      return htplnf_CHRDTP;
    }

    @Override
    public Double getHtplnf_SSPN() {
      return htplnf_SSPN;
    }

    @Override
    public Double getHtplnf_SSPNE() {
      return htplnf_SSPNE;
    }

    @Override
    public Optional<Double> getHtplnf_SSPNOP() {
      return Optional.ofNullable(htplnf_SSPNOP);
    }

    @Override
    public Double getHtplnf_SAVSI() {
      return htplnf_SAVSI;
    }

    @Override
    public Optional<Double> getHtplnf_SAVSO() {
      return Optional.ofNullable(htplnf_SAVSO);
    }

    @Override
    public Double getHtplnf_CHSTAT() {
      return htplnf_CHSTAT;
    }

    @Override
    public Double getHtplnf_TWISTA() {
      return htplnf_TWISTA;
    }

    @Override
    public Optional<Double> getHtplnf_SSPNDD() {
      return Optional.ofNullable(htplnf_SSPNDD);
    }

    @Override
    public Double getHtplnf_DHDADI() {
      return htplnf_DHDADI;
    }

    @Override
    public Optional<Double> getHtplnf_DHDADO() {
      return Optional.ofNullable(htplnf_DHDADO);
    }

    @Override
    public int getHtplnf_TYPE() {
      return htplnf_TYPE;
    }

    @Override
    public Optional<Double> getJetpwr_AIETLJ() {
      return Optional.ofNullable(jetpwr_AIETLJ);
    }

    @Override
    public Optional<Double> getJetpwr_AMBSTP() {
      return Optional.ofNullable(jetpwr_AMBSTP);
    }

    @Override
    public Optional<Double> getJetpwr_AMBTMP() {
      return Optional.ofNullable(jetpwr_AMBTMP);
    }

    @Override
    public Optional<List<Double>> getJetpwr_JEALOC() {
      return Optional.ofNullable(jetpwr_JEALOC);
    }

    @Override
    public Optional<Double> getJetpwr_JELLOC() {
      return Optional.ofNullable(jetpwr_JELLOC);
    }

    @Override
    public Optional<Double> getJetpwr_JERAD() {
      return Optional.ofNullable(jetpwr_JERAD);
    }

    @Override
    public Optional<Double> getJetpwr_JEVLOC() {
      return Optional.ofNullable(jetpwr_JEVLOC);
    }

    @Override
    public Optional<Double> getJetpwr_JIALOC() {
      return Optional.ofNullable(jetpwr_JIALOC);
    }

    @Override
    public Optional<Double> getJetpwr_JINLTA() {
      return Optional.ofNullable(jetpwr_JINLTA);
    }

    @Override
    public Optional<Double> getJetpwr_THSTCJ() {
      return Optional.ofNullable(jetpwr_THSTCJ);
    }

    @Override
    public Optional<Double> getJetpwr_JEANGL() {
      return Optional.ofNullable(jetpwr_JEANGL);
    }

    @Override
    public Optional<Integer> getJetpwr_NENGSJ() {
      return Optional.ofNullable(jetpwr_NENGSJ);
    }

    @Override
    public Optional<Integer> getPropwr_NENGSP() {
      return Optional.ofNullable(propwr_NENGSP);
    }

    @Override
    public Optional<Double> getPropwr_AIETLP() {
      return Optional.ofNullable(propwr_AIETLP);
    }

    @Override
    public Optional<Double> getPropwr_THSTCP() {
      return Optional.ofNullable(propwr_THSTCP);
    }

    @Override
    public Optional<Double> getPropwr_PHALOC() {
      return Optional.ofNullable(propwr_PHALOC);
    }

    @Override
    public Optional<Double> getPropwr_PHVLOC() {
      return Optional.ofNullable(propwr_PHVLOC);
    }

    @Override
    public Optional<Double> getPropwr_PRPRAD() {
      return Optional.ofNullable(propwr_PRPRAD);
    }

    @Override
    public Optional<Double> getPropwr_ENGFCT() {
      return Optional.ofNullable(propwr_ENGFCT);
    }

    @Override
    public Optional<Double> getPropwr_BWAPR3() {
      return Optional.ofNullable(propwr_BWAPR3);
    }

    @Override
    public Optional<Double> getPropwr_BWAPR6() {
      return Optional.ofNullable(propwr_BWAPR6);
    }

    @Override
    public Optional<Double> getPropwr_BWAPR9() {
      return Optional.ofNullable(propwr_BWAPR9);
    }

    @Override
    public Optional<Integer> getPropwr_NOPBPE() {
      return Optional.ofNullable(propwr_NOPBPE);
    }

    @Override
    public Optional<Double> getPropwr_BAPR75() {
      return Optional.ofNullable(propwr_BAPR75);
    }

    @Override
    public Optional<Double> getPropwr_YP() {
      return Optional.ofNullable(propwr_YP);
    }

    @Override
    public Optional<Boolean> getPropwr_CROT() {
      return Optional.ofNullable(propwr_CROT);
    }

    @Override
    public Optional<Integer> getSymflp_FTYPE() {
      return Optional.ofNullable(symflp_FTYPE);
    }

    @Override
    public Optional<List<Double>> getSymflp_DELTA() {
      return Optional.ofNullable(symflp_DELTA);
    }

    @Override
    public Optional<Double> getSymflp_SPANFI() {
      return Optional.ofNullable(symflp_SPANFI);
    }

    @Override
    public Optional<Double> getSymflp_SPANFO() {
      return Optional.ofNullable(symflp_SPANFO);
    }

    @Override
    public Optional<Double> getSymflp_CHRDFI() {
      return Optional.ofNullable(symflp_CHRDFI);
    }

    @Override
    public Optional<Double> getSymflp_CHRDFO() {
      return Optional.ofNullable(symflp_CHRDFO);
    }

    @Override
    public Optional<Integer> getSymflp_NTYPE() {
      return Optional.ofNullable(symflp_NTYPE);
    }

    @Override
    public Optional<Double> getSymflp_CB() {
      return Optional.ofNullable(symflp_CB);
    }

    @Override
    public Optional<Double> getSymflp_TC() {
      return Optional.ofNullable(symflp_TC);
    }

    @Override
    public Optional<Double> getSymflp_PHETE() {
      return Optional.ofNullable(symflp_PHETE);
    }

    @Override
    public Optional<Double> getSymflp_PHETEP() {
      return Optional.ofNullable(symflp_PHETEP);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof DatcomInputData_Builder.Value)) {
        return false;
      }
      DatcomInputData_Builder.Value other = (DatcomInputData_Builder.Value) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(engineType, other.engineType)
          && Objects.equals(command_DIM, other.command_DIM)
          && Objects.equals(command_TRIM, other.command_TRIM)
          && Objects.equals(command_DAMP, other.command_DAMP)
          && Objects.equals(command_PART, other.command_PART)
          && Objects.equals(command_DERIV, other.command_DERIV)
          && Objects.equals(fltcon_MACH, other.fltcon_MACH)
          && Objects.equals(fltcon_ALT, other.fltcon_ALT)
          && Objects.equals(fltcon_ALSCHD, other.fltcon_ALSCHD)
          && Objects.equals(fltcon_GAMMA, other.fltcon_GAMMA)
          && Objects.equals(fltcon_LOOP, other.fltcon_LOOP)
          && Objects.equals(fltcon_RNNUB, other.fltcon_RNNUB)
          && Objects.equals(optins_BLREF, other.optins_BLREF)
          && Objects.equals(optins_SREF, other.optins_SREF)
          && Objects.equals(optins_CBARR, other.optins_CBARR)
          && Objects.equals(synths_XW, other.synths_XW)
          && Objects.equals(synths_ZW, other.synths_ZW)
          && Objects.equals(synths_ALIW, other.synths_ALIW)
          && Objects.equals(synths_XCG, other.synths_XCG)
          && Objects.equals(synths_ZCG, other.synths_ZCG)
          && Objects.equals(synths_XH, other.synths_XH)
          && Objects.equals(synths_ZH, other.synths_ZH)
          && Objects.equals(synths_XV, other.synths_XV)
          && Objects.equals(synths_ZV, other.synths_ZV)
          && Objects.equals(synths_XVF, other.synths_XVF)
          && Objects.equals(synths_ZVF, other.synths_ZVF)
          && Objects.equals(synths_VERTUP, other.synths_VERTUP)
          && Objects.equals(body_BNOSE, other.body_BNOSE)
          && Objects.equals(body_BTAIL, other.body_BTAIL)
          && Objects.equals(body_BLA, other.body_BLA)
          && Objects.equals(body_X, other.body_X)
          && Objects.equals(body_ZU, other.body_ZU)
          && Objects.equals(body_ZL, other.body_ZL)
          && Objects.equals(body_S, other.body_S)
          && Objects.equals(wgplnf_CHRDR, other.wgplnf_CHRDR)
          && Objects.equals(wgplnf_CHRDBP, other.wgplnf_CHRDBP)
          && Objects.equals(wgplnf_CHRDTP, other.wgplnf_CHRDTP)
          && Objects.equals(wgplnf_SSPN, other.wgplnf_SSPN)
          && Objects.equals(wgplnf_SSPNE, other.wgplnf_SSPNE)
          && Objects.equals(wgplnf_SSPNOP, other.wgplnf_SSPNOP)
          && Objects.equals(wgplnf_SAVSI, other.wgplnf_SAVSI)
          && Objects.equals(wgplnf_SAVSO, other.wgplnf_SAVSO)
          && Objects.equals(wgplnf_CHSTAT, other.wgplnf_CHSTAT)
          && Objects.equals(wgplnf_TWISTA, other.wgplnf_TWISTA)
          && Objects.equals(wgplnf_SSPNDD, other.wgplnf_SSPNDD)
          && Objects.equals(wgplnf_DHDADI, other.wgplnf_DHDADI)
          && Objects.equals(wgplnf_DHDADO, other.wgplnf_DHDADO)
          && Objects.equals(wgplnf_TYPE, other.wgplnf_TYPE)
          && Objects.equals(vtplnf_CHRDR, other.vtplnf_CHRDR)
          && Objects.equals(vtplnf_CHRDBP, other.vtplnf_CHRDBP)
          && Objects.equals(vtplnf_CHRDTP, other.vtplnf_CHRDTP)
          && Objects.equals(vtplnf_SSPN, other.vtplnf_SSPN)
          && Objects.equals(vtplnf_SSPNE, other.vtplnf_SSPNE)
          && Objects.equals(vtplnf_SSPNOP, other.vtplnf_SSPNOP)
          && Objects.equals(vtplnf_SAVSI, other.vtplnf_SAVSI)
          && Objects.equals(vtplnf_SAVSO, other.vtplnf_SAVSO)
          && Objects.equals(vtplnf_CHSTAT, other.vtplnf_CHSTAT)
          && Objects.equals(vtplnf_TWISTA, other.vtplnf_TWISTA)
          && Objects.equals(vtplnf_SSPNDD, other.vtplnf_SSPNDD)
          && Objects.equals(vtplnf_DHDADI, other.vtplnf_DHDADI)
          && Objects.equals(vtplnf_DHDADO, other.vtplnf_DHDADO)
          && Objects.equals(vtplnf_TYPE, other.vtplnf_TYPE)
          && Objects.equals(htplnf_CHRDR, other.htplnf_CHRDR)
          && Objects.equals(htplnf_CHRDBP, other.htplnf_CHRDBP)
          && Objects.equals(htplnf_CHRDTP, other.htplnf_CHRDTP)
          && Objects.equals(htplnf_SSPN, other.htplnf_SSPN)
          && Objects.equals(htplnf_SSPNE, other.htplnf_SSPNE)
          && Objects.equals(htplnf_SSPNOP, other.htplnf_SSPNOP)
          && Objects.equals(htplnf_SAVSI, other.htplnf_SAVSI)
          && Objects.equals(htplnf_SAVSO, other.htplnf_SAVSO)
          && Objects.equals(htplnf_CHSTAT, other.htplnf_CHSTAT)
          && Objects.equals(htplnf_TWISTA, other.htplnf_TWISTA)
          && Objects.equals(htplnf_SSPNDD, other.htplnf_SSPNDD)
          && Objects.equals(htplnf_DHDADI, other.htplnf_DHDADI)
          && Objects.equals(htplnf_DHDADO, other.htplnf_DHDADO)
          && Objects.equals(htplnf_TYPE, other.htplnf_TYPE)
          && Objects.equals(jetpwr_AIETLJ, other.jetpwr_AIETLJ)
          && Objects.equals(jetpwr_AMBSTP, other.jetpwr_AMBSTP)
          && Objects.equals(jetpwr_AMBTMP, other.jetpwr_AMBTMP)
          && Objects.equals(jetpwr_JEALOC, other.jetpwr_JEALOC)
          && Objects.equals(jetpwr_JELLOC, other.jetpwr_JELLOC)
          && Objects.equals(jetpwr_JERAD, other.jetpwr_JERAD)
          && Objects.equals(jetpwr_JEVLOC, other.jetpwr_JEVLOC)
          && Objects.equals(jetpwr_JIALOC, other.jetpwr_JIALOC)
          && Objects.equals(jetpwr_JINLTA, other.jetpwr_JINLTA)
          && Objects.equals(jetpwr_THSTCJ, other.jetpwr_THSTCJ)
          && Objects.equals(jetpwr_JEANGL, other.jetpwr_JEANGL)
          && Objects.equals(jetpwr_NENGSJ, other.jetpwr_NENGSJ)
          && Objects.equals(propwr_NENGSP, other.propwr_NENGSP)
          && Objects.equals(propwr_AIETLP, other.propwr_AIETLP)
          && Objects.equals(propwr_THSTCP, other.propwr_THSTCP)
          && Objects.equals(propwr_PHALOC, other.propwr_PHALOC)
          && Objects.equals(propwr_PHVLOC, other.propwr_PHVLOC)
          && Objects.equals(propwr_PRPRAD, other.propwr_PRPRAD)
          && Objects.equals(propwr_ENGFCT, other.propwr_ENGFCT)
          && Objects.equals(propwr_BWAPR3, other.propwr_BWAPR3)
          && Objects.equals(propwr_BWAPR6, other.propwr_BWAPR6)
          && Objects.equals(propwr_BWAPR9, other.propwr_BWAPR9)
          && Objects.equals(propwr_NOPBPE, other.propwr_NOPBPE)
          && Objects.equals(propwr_BAPR75, other.propwr_BAPR75)
          && Objects.equals(propwr_YP, other.propwr_YP)
          && Objects.equals(propwr_CROT, other.propwr_CROT)
          && Objects.equals(symflp_FTYPE, other.symflp_FTYPE)
          && Objects.equals(symflp_DELTA, other.symflp_DELTA)
          && Objects.equals(symflp_SPANFI, other.symflp_SPANFI)
          && Objects.equals(symflp_SPANFO, other.symflp_SPANFO)
          && Objects.equals(symflp_CHRDFI, other.symflp_CHRDFI)
          && Objects.equals(symflp_CHRDFO, other.symflp_CHRDFO)
          && Objects.equals(symflp_NTYPE, other.symflp_NTYPE)
          && Objects.equals(symflp_CB, other.symflp_CB)
          && Objects.equals(symflp_TC, other.symflp_TC)
          && Objects.equals(symflp_PHETE, other.symflp_PHETE)
          && Objects.equals(symflp_PHETEP, other.symflp_PHETEP);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          engineType,
          command_DIM,
          command_TRIM,
          command_DAMP,
          command_PART,
          command_DERIV,
          fltcon_MACH,
          fltcon_ALT,
          fltcon_ALSCHD,
          fltcon_GAMMA,
          fltcon_LOOP,
          fltcon_RNNUB,
          optins_BLREF,
          optins_SREF,
          optins_CBARR,
          synths_XW,
          synths_ZW,
          synths_ALIW,
          synths_XCG,
          synths_ZCG,
          synths_XH,
          synths_ZH,
          synths_XV,
          synths_ZV,
          synths_XVF,
          synths_ZVF,
          synths_VERTUP,
          body_BNOSE,
          body_BTAIL,
          body_BLA,
          body_X,
          body_ZU,
          body_ZL,
          body_S,
          wgplnf_CHRDR,
          wgplnf_CHRDBP,
          wgplnf_CHRDTP,
          wgplnf_SSPN,
          wgplnf_SSPNE,
          wgplnf_SSPNOP,
          wgplnf_SAVSI,
          wgplnf_SAVSO,
          wgplnf_CHSTAT,
          wgplnf_TWISTA,
          wgplnf_SSPNDD,
          wgplnf_DHDADI,
          wgplnf_DHDADO,
          wgplnf_TYPE,
          vtplnf_CHRDR,
          vtplnf_CHRDBP,
          vtplnf_CHRDTP,
          vtplnf_SSPN,
          vtplnf_SSPNE,
          vtplnf_SSPNOP,
          vtplnf_SAVSI,
          vtplnf_SAVSO,
          vtplnf_CHSTAT,
          vtplnf_TWISTA,
          vtplnf_SSPNDD,
          vtplnf_DHDADI,
          vtplnf_DHDADO,
          vtplnf_TYPE,
          htplnf_CHRDR,
          htplnf_CHRDBP,
          htplnf_CHRDTP,
          htplnf_SSPN,
          htplnf_SSPNE,
          htplnf_SSPNOP,
          htplnf_SAVSI,
          htplnf_SAVSO,
          htplnf_CHSTAT,
          htplnf_TWISTA,
          htplnf_SSPNDD,
          htplnf_DHDADI,
          htplnf_DHDADO,
          htplnf_TYPE,
          jetpwr_AIETLJ,
          jetpwr_AMBSTP,
          jetpwr_AMBTMP,
          jetpwr_JEALOC,
          jetpwr_JELLOC,
          jetpwr_JERAD,
          jetpwr_JEVLOC,
          jetpwr_JIALOC,
          jetpwr_JINLTA,
          jetpwr_THSTCJ,
          jetpwr_JEANGL,
          jetpwr_NENGSJ,
          propwr_NENGSP,
          propwr_AIETLP,
          propwr_THSTCP,
          propwr_PHALOC,
          propwr_PHVLOC,
          propwr_PRPRAD,
          propwr_ENGFCT,
          propwr_BWAPR3,
          propwr_BWAPR6,
          propwr_BWAPR9,
          propwr_NOPBPE,
          propwr_BAPR75,
          propwr_YP,
          propwr_CROT,
          symflp_FTYPE,
          symflp_DELTA,
          symflp_SPANFI,
          symflp_SPANFO,
          symflp_CHRDFI,
          symflp_CHRDFO,
          symflp_NTYPE,
          symflp_CB,
          symflp_TC,
          symflp_PHETE,
          symflp_PHETEP);
    }

    @Override
    public String toString() {
      return "DatcomInputData{"
          + COMMA_JOINER.join(
              "description=" + description,
              "engineType=" + engineType,
              "command_DIM=" + command_DIM,
              "command_TRIM=" + command_TRIM,
              "command_DAMP=" + command_DAMP,
              "command_PART=" + command_PART,
              "command_DERIV=" + command_DERIV,
              "fltcon_MACH=" + fltcon_MACH,
              "fltcon_ALT=" + fltcon_ALT,
              "fltcon_ALSCHD=" + fltcon_ALSCHD,
              "fltcon_GAMMA=" + fltcon_GAMMA,
              "fltcon_LOOP=" + fltcon_LOOP,
              "fltcon_RNNUB=" + fltcon_RNNUB,
              "optins_BLREF=" + optins_BLREF,
              "optins_SREF=" + optins_SREF,
              "optins_CBARR=" + optins_CBARR,
              "synths_XW=" + synths_XW,
              "synths_ZW=" + synths_ZW,
              "synths_ALIW=" + synths_ALIW,
              "synths_XCG=" + synths_XCG,
              "synths_ZCG=" + synths_ZCG,
              "synths_XH=" + synths_XH,
              "synths_ZH=" + synths_ZH,
              "synths_XV=" + synths_XV,
              "synths_ZV=" + synths_ZV,
              "synths_XVF=" + synths_XVF,
              "synths_ZVF=" + synths_ZVF,
              "synths_VERTUP=" + synths_VERTUP,
              "body_BNOSE=" + body_BNOSE,
              "body_BTAIL=" + body_BTAIL,
              "body_BLA=" + body_BLA,
              "body_X=" + body_X,
              "body_ZU=" + body_ZU,
              "body_ZL=" + body_ZL,
              "body_S=" + body_S,
              "wgplnf_CHRDR=" + wgplnf_CHRDR,
              (wgplnf_CHRDBP != null ? "wgplnf_CHRDBP=" + wgplnf_CHRDBP : null),
              "wgplnf_CHRDTP=" + wgplnf_CHRDTP,
              "wgplnf_SSPN=" + wgplnf_SSPN,
              "wgplnf_SSPNE=" + wgplnf_SSPNE,
              (wgplnf_SSPNOP != null ? "wgplnf_SSPNOP=" + wgplnf_SSPNOP : null),
              "wgplnf_SAVSI=" + wgplnf_SAVSI,
              (wgplnf_SAVSO != null ? "wgplnf_SAVSO=" + wgplnf_SAVSO : null),
              "wgplnf_CHSTAT=" + wgplnf_CHSTAT,
              "wgplnf_TWISTA=" + wgplnf_TWISTA,
              (wgplnf_SSPNDD != null ? "wgplnf_SSPNDD=" + wgplnf_SSPNDD : null),
              "wgplnf_DHDADI=" + wgplnf_DHDADI,
              (wgplnf_DHDADO != null ? "wgplnf_DHDADO=" + wgplnf_DHDADO : null),
              "wgplnf_TYPE=" + wgplnf_TYPE,
              "vtplnf_CHRDR=" + vtplnf_CHRDR,
              (vtplnf_CHRDBP != null ? "vtplnf_CHRDBP=" + vtplnf_CHRDBP : null),
              "vtplnf_CHRDTP=" + vtplnf_CHRDTP,
              "vtplnf_SSPN=" + vtplnf_SSPN,
              "vtplnf_SSPNE=" + vtplnf_SSPNE,
              (vtplnf_SSPNOP != null ? "vtplnf_SSPNOP=" + vtplnf_SSPNOP : null),
              "vtplnf_SAVSI=" + vtplnf_SAVSI,
              (vtplnf_SAVSO != null ? "vtplnf_SAVSO=" + vtplnf_SAVSO : null),
              "vtplnf_CHSTAT=" + vtplnf_CHSTAT,
              "vtplnf_TWISTA=" + vtplnf_TWISTA,
              (vtplnf_SSPNDD != null ? "vtplnf_SSPNDD=" + vtplnf_SSPNDD : null),
              "vtplnf_DHDADI=" + vtplnf_DHDADI,
              (vtplnf_DHDADO != null ? "vtplnf_DHDADO=" + vtplnf_DHDADO : null),
              "vtplnf_TYPE=" + vtplnf_TYPE,
              "htplnf_CHRDR=" + htplnf_CHRDR,
              (htplnf_CHRDBP != null ? "htplnf_CHRDBP=" + htplnf_CHRDBP : null),
              "htplnf_CHRDTP=" + htplnf_CHRDTP,
              "htplnf_SSPN=" + htplnf_SSPN,
              "htplnf_SSPNE=" + htplnf_SSPNE,
              (htplnf_SSPNOP != null ? "htplnf_SSPNOP=" + htplnf_SSPNOP : null),
              "htplnf_SAVSI=" + htplnf_SAVSI,
              (htplnf_SAVSO != null ? "htplnf_SAVSO=" + htplnf_SAVSO : null),
              "htplnf_CHSTAT=" + htplnf_CHSTAT,
              "htplnf_TWISTA=" + htplnf_TWISTA,
              (htplnf_SSPNDD != null ? "htplnf_SSPNDD=" + htplnf_SSPNDD : null),
              "htplnf_DHDADI=" + htplnf_DHDADI,
              (htplnf_DHDADO != null ? "htplnf_DHDADO=" + htplnf_DHDADO : null),
              "htplnf_TYPE=" + htplnf_TYPE,
              (jetpwr_AIETLJ != null ? "jetpwr_AIETLJ=" + jetpwr_AIETLJ : null),
              (jetpwr_AMBSTP != null ? "jetpwr_AMBSTP=" + jetpwr_AMBSTP : null),
              (jetpwr_AMBTMP != null ? "jetpwr_AMBTMP=" + jetpwr_AMBTMP : null),
              (jetpwr_JEALOC != null ? "jetpwr_JEALOC=" + jetpwr_JEALOC : null),
              (jetpwr_JELLOC != null ? "jetpwr_JELLOC=" + jetpwr_JELLOC : null),
              (jetpwr_JERAD != null ? "jetpwr_JERAD=" + jetpwr_JERAD : null),
              (jetpwr_JEVLOC != null ? "jetpwr_JEVLOC=" + jetpwr_JEVLOC : null),
              (jetpwr_JIALOC != null ? "jetpwr_JIALOC=" + jetpwr_JIALOC : null),
              (jetpwr_JINLTA != null ? "jetpwr_JINLTA=" + jetpwr_JINLTA : null),
              (jetpwr_THSTCJ != null ? "jetpwr_THSTCJ=" + jetpwr_THSTCJ : null),
              (jetpwr_JEANGL != null ? "jetpwr_JEANGL=" + jetpwr_JEANGL : null),
              (jetpwr_NENGSJ != null ? "jetpwr_NENGSJ=" + jetpwr_NENGSJ : null),
              (propwr_NENGSP != null ? "propwr_NENGSP=" + propwr_NENGSP : null),
              (propwr_AIETLP != null ? "propwr_AIETLP=" + propwr_AIETLP : null),
              (propwr_THSTCP != null ? "propwr_THSTCP=" + propwr_THSTCP : null),
              (propwr_PHALOC != null ? "propwr_PHALOC=" + propwr_PHALOC : null),
              (propwr_PHVLOC != null ? "propwr_PHVLOC=" + propwr_PHVLOC : null),
              (propwr_PRPRAD != null ? "propwr_PRPRAD=" + propwr_PRPRAD : null),
              (propwr_ENGFCT != null ? "propwr_ENGFCT=" + propwr_ENGFCT : null),
              (propwr_BWAPR3 != null ? "propwr_BWAPR3=" + propwr_BWAPR3 : null),
              (propwr_BWAPR6 != null ? "propwr_BWAPR6=" + propwr_BWAPR6 : null),
              (propwr_BWAPR9 != null ? "propwr_BWAPR9=" + propwr_BWAPR9 : null),
              (propwr_NOPBPE != null ? "propwr_NOPBPE=" + propwr_NOPBPE : null),
              (propwr_BAPR75 != null ? "propwr_BAPR75=" + propwr_BAPR75 : null),
              (propwr_YP != null ? "propwr_YP=" + propwr_YP : null),
              (propwr_CROT != null ? "propwr_CROT=" + propwr_CROT : null),
              (symflp_FTYPE != null ? "symflp_FTYPE=" + symflp_FTYPE : null),
              (symflp_DELTA != null ? "symflp_DELTA=" + symflp_DELTA : null),
              (symflp_SPANFI != null ? "symflp_SPANFI=" + symflp_SPANFI : null),
              (symflp_SPANFO != null ? "symflp_SPANFO=" + symflp_SPANFO : null),
              (symflp_CHRDFI != null ? "symflp_CHRDFI=" + symflp_CHRDFI : null),
              (symflp_CHRDFO != null ? "symflp_CHRDFO=" + symflp_CHRDFO : null),
              (symflp_NTYPE != null ? "symflp_NTYPE=" + symflp_NTYPE : null),
              (symflp_CB != null ? "symflp_CB=" + symflp_CB : null),
              (symflp_TC != null ? "symflp_TC=" + symflp_TC : null),
              (symflp_PHETE != null ? "symflp_PHETE=" + symflp_PHETE : null),
              (symflp_PHETEP != null ? "symflp_PHETEP=" + symflp_PHETEP : null))
          + "}";
    }
  }

  private static final class Partial implements DatcomInputData {
    private final String description;
    private final DatcomEngineType engineType;
    private final String command_DIM;
    private final boolean command_TRIM;
    private final boolean command_DAMP;
    private final boolean command_PART;
    private final String command_DERIV;
    private final List<Double> fltcon_MACH;
    private final List<Double> fltcon_ALT;
    private final List<Double> fltcon_ALSCHD;
    private final Double fltcon_GAMMA;
    private final int fltcon_LOOP;
    private final Double fltcon_RNNUB;
    private final Double optins_BLREF;
    private final Double optins_SREF;
    private final Double optins_CBARR;
    private final Double synths_XW;
    private final Double synths_ZW;
    private final Double synths_ALIW;
    private final Double synths_XCG;
    private final Double synths_ZCG;
    private final Double synths_XH;
    private final Double synths_ZH;
    private final Double synths_XV;
    private final Double synths_ZV;
    private final Double synths_XVF;
    private final Double synths_ZVF;
    private final boolean synths_VERTUP;
    private final Double body_BNOSE;
    private final Double body_BTAIL;
    private final Double body_BLA;
    private final List<Double> body_X;
    private final List<Double> body_ZU;
    private final List<Double> body_ZL;
    private final List<Double> body_S;
    private final Double wgplnf_CHRDR;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_CHRDBP;
    private final Double wgplnf_CHRDTP;
    private final Double wgplnf_SSPN;
    private final Double wgplnf_SSPNE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_SSPNOP;
    private final Double wgplnf_SAVSI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_SAVSO;
    private final Double wgplnf_CHSTAT;
    private final Double wgplnf_TWISTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_SSPNDD;
    private final Double wgplnf_DHDADI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double wgplnf_DHDADO;
    private final int wgplnf_TYPE;
    private final Double vtplnf_CHRDR;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_CHRDBP;
    private final Double vtplnf_CHRDTP;
    private final Double vtplnf_SSPN;
    private final Double vtplnf_SSPNE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_SSPNOP;
    private final Double vtplnf_SAVSI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_SAVSO;
    private final Double vtplnf_CHSTAT;
    private final Double vtplnf_TWISTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_SSPNDD;
    private final Double vtplnf_DHDADI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double vtplnf_DHDADO;
    private final int vtplnf_TYPE;
    private final Double htplnf_CHRDR;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_CHRDBP;
    private final Double htplnf_CHRDTP;
    private final Double htplnf_SSPN;
    private final Double htplnf_SSPNE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_SSPNOP;
    private final Double htplnf_SAVSI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_SAVSO;
    private final Double htplnf_CHSTAT;
    private final Double htplnf_TWISTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_SSPNDD;
    private final Double htplnf_DHDADI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double htplnf_DHDADO;
    private final int htplnf_TYPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_AIETLJ;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_AMBSTP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_AMBTMP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final List<Double> jetpwr_JEALOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JELLOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JERAD;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JEVLOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JIALOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JINLTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_THSTCJ;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double jetpwr_JEANGL;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer jetpwr_NENGSJ;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer propwr_NENGSP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_AIETLP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_THSTCP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_PHALOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_PHVLOC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_PRPRAD;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_ENGFCT;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BWAPR3;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BWAPR6;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BWAPR9;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer propwr_NOPBPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_BAPR75;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double propwr_YP;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Boolean propwr_CROT;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer symflp_FTYPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final List<Double> symflp_DELTA;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_SPANFI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_SPANFO;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_CHRDFI;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_CHRDFO;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Integer symflp_NTYPE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_CB;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_TC;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_PHETE;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Double symflp_PHETEP;
    private final EnumSet<DatcomInputData_Builder.Property> _unsetProperties;

    Partial(DatcomInputData_Builder builder) {
      this.description = builder.description;
      this.engineType = builder.engineType;
      this.command_DIM = builder.command_DIM;
      this.command_TRIM = builder.command_TRIM;
      this.command_DAMP = builder.command_DAMP;
      this.command_PART = builder.command_PART;
      this.command_DERIV = builder.command_DERIV;
      this.fltcon_MACH = ImmutableList.copyOf(builder.fltcon_MACH);
      this.fltcon_ALT = ImmutableList.copyOf(builder.fltcon_ALT);
      this.fltcon_ALSCHD = ImmutableList.copyOf(builder.fltcon_ALSCHD);
      this.fltcon_GAMMA = builder.fltcon_GAMMA;
      this.fltcon_LOOP = builder.fltcon_LOOP;
      this.fltcon_RNNUB = builder.fltcon_RNNUB;
      this.optins_BLREF = builder.optins_BLREF;
      this.optins_SREF = builder.optins_SREF;
      this.optins_CBARR = builder.optins_CBARR;
      this.synths_XW = builder.synths_XW;
      this.synths_ZW = builder.synths_ZW;
      this.synths_ALIW = builder.synths_ALIW;
      this.synths_XCG = builder.synths_XCG;
      this.synths_ZCG = builder.synths_ZCG;
      this.synths_XH = builder.synths_XH;
      this.synths_ZH = builder.synths_ZH;
      this.synths_XV = builder.synths_XV;
      this.synths_ZV = builder.synths_ZV;
      this.synths_XVF = builder.synths_XVF;
      this.synths_ZVF = builder.synths_ZVF;
      this.synths_VERTUP = builder.synths_VERTUP;
      this.body_BNOSE = builder.body_BNOSE;
      this.body_BTAIL = builder.body_BTAIL;
      this.body_BLA = builder.body_BLA;
      this.body_X = ImmutableList.copyOf(builder.body_X);
      this.body_ZU = ImmutableList.copyOf(builder.body_ZU);
      this.body_ZL = ImmutableList.copyOf(builder.body_ZL);
      this.body_S = ImmutableList.copyOf(builder.body_S);
      this.wgplnf_CHRDR = builder.wgplnf_CHRDR;
      this.wgplnf_CHRDBP = builder.wgplnf_CHRDBP;
      this.wgplnf_CHRDTP = builder.wgplnf_CHRDTP;
      this.wgplnf_SSPN = builder.wgplnf_SSPN;
      this.wgplnf_SSPNE = builder.wgplnf_SSPNE;
      this.wgplnf_SSPNOP = builder.wgplnf_SSPNOP;
      this.wgplnf_SAVSI = builder.wgplnf_SAVSI;
      this.wgplnf_SAVSO = builder.wgplnf_SAVSO;
      this.wgplnf_CHSTAT = builder.wgplnf_CHSTAT;
      this.wgplnf_TWISTA = builder.wgplnf_TWISTA;
      this.wgplnf_SSPNDD = builder.wgplnf_SSPNDD;
      this.wgplnf_DHDADI = builder.wgplnf_DHDADI;
      this.wgplnf_DHDADO = builder.wgplnf_DHDADO;
      this.wgplnf_TYPE = builder.wgplnf_TYPE;
      this.vtplnf_CHRDR = builder.vtplnf_CHRDR;
      this.vtplnf_CHRDBP = builder.vtplnf_CHRDBP;
      this.vtplnf_CHRDTP = builder.vtplnf_CHRDTP;
      this.vtplnf_SSPN = builder.vtplnf_SSPN;
      this.vtplnf_SSPNE = builder.vtplnf_SSPNE;
      this.vtplnf_SSPNOP = builder.vtplnf_SSPNOP;
      this.vtplnf_SAVSI = builder.vtplnf_SAVSI;
      this.vtplnf_SAVSO = builder.vtplnf_SAVSO;
      this.vtplnf_CHSTAT = builder.vtplnf_CHSTAT;
      this.vtplnf_TWISTA = builder.vtplnf_TWISTA;
      this.vtplnf_SSPNDD = builder.vtplnf_SSPNDD;
      this.vtplnf_DHDADI = builder.vtplnf_DHDADI;
      this.vtplnf_DHDADO = builder.vtplnf_DHDADO;
      this.vtplnf_TYPE = builder.vtplnf_TYPE;
      this.htplnf_CHRDR = builder.htplnf_CHRDR;
      this.htplnf_CHRDBP = builder.htplnf_CHRDBP;
      this.htplnf_CHRDTP = builder.htplnf_CHRDTP;
      this.htplnf_SSPN = builder.htplnf_SSPN;
      this.htplnf_SSPNE = builder.htplnf_SSPNE;
      this.htplnf_SSPNOP = builder.htplnf_SSPNOP;
      this.htplnf_SAVSI = builder.htplnf_SAVSI;
      this.htplnf_SAVSO = builder.htplnf_SAVSO;
      this.htplnf_CHSTAT = builder.htplnf_CHSTAT;
      this.htplnf_TWISTA = builder.htplnf_TWISTA;
      this.htplnf_SSPNDD = builder.htplnf_SSPNDD;
      this.htplnf_DHDADI = builder.htplnf_DHDADI;
      this.htplnf_DHDADO = builder.htplnf_DHDADO;
      this.htplnf_TYPE = builder.htplnf_TYPE;
      this.jetpwr_AIETLJ = builder.jetpwr_AIETLJ;
      this.jetpwr_AMBSTP = builder.jetpwr_AMBSTP;
      this.jetpwr_AMBTMP = builder.jetpwr_AMBTMP;
      this.jetpwr_JEALOC = builder.jetpwr_JEALOC;
      this.jetpwr_JELLOC = builder.jetpwr_JELLOC;
      this.jetpwr_JERAD = builder.jetpwr_JERAD;
      this.jetpwr_JEVLOC = builder.jetpwr_JEVLOC;
      this.jetpwr_JIALOC = builder.jetpwr_JIALOC;
      this.jetpwr_JINLTA = builder.jetpwr_JINLTA;
      this.jetpwr_THSTCJ = builder.jetpwr_THSTCJ;
      this.jetpwr_JEANGL = builder.jetpwr_JEANGL;
      this.jetpwr_NENGSJ = builder.jetpwr_NENGSJ;
      this.propwr_NENGSP = builder.propwr_NENGSP;
      this.propwr_AIETLP = builder.propwr_AIETLP;
      this.propwr_THSTCP = builder.propwr_THSTCP;
      this.propwr_PHALOC = builder.propwr_PHALOC;
      this.propwr_PHVLOC = builder.propwr_PHVLOC;
      this.propwr_PRPRAD = builder.propwr_PRPRAD;
      this.propwr_ENGFCT = builder.propwr_ENGFCT;
      this.propwr_BWAPR3 = builder.propwr_BWAPR3;
      this.propwr_BWAPR6 = builder.propwr_BWAPR6;
      this.propwr_BWAPR9 = builder.propwr_BWAPR9;
      this.propwr_NOPBPE = builder.propwr_NOPBPE;
      this.propwr_BAPR75 = builder.propwr_BAPR75;
      this.propwr_YP = builder.propwr_YP;
      this.propwr_CROT = builder.propwr_CROT;
      this.symflp_FTYPE = builder.symflp_FTYPE;
      this.symflp_DELTA = builder.symflp_DELTA;
      this.symflp_SPANFI = builder.symflp_SPANFI;
      this.symflp_SPANFO = builder.symflp_SPANFO;
      this.symflp_CHRDFI = builder.symflp_CHRDFI;
      this.symflp_CHRDFO = builder.symflp_CHRDFO;
      this.symflp_NTYPE = builder.symflp_NTYPE;
      this.symflp_CB = builder.symflp_CB;
      this.symflp_TC = builder.symflp_TC;
      this.symflp_PHETE = builder.symflp_PHETE;
      this.symflp_PHETEP = builder.symflp_PHETEP;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getDescription() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.DESCRIPTION)) {
        throw new UnsupportedOperationException("description not set");
      }
      return description;
    }

    @Override
    public DatcomEngineType getEngineType() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.ENGINE_TYPE)) {
        throw new UnsupportedOperationException("engineType not set");
      }
      return engineType;
    }

    @Override
    public String getCommand_DIM() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DIM)) {
        throw new UnsupportedOperationException("command_DIM not set");
      }
      return command_DIM;
    }

    @Override
    public boolean getCommand_TRIM() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__TRIM)) {
        throw new UnsupportedOperationException("command_TRIM not set");
      }
      return command_TRIM;
    }

    @Override
    public boolean getCommand_DAMP() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DAMP)) {
        throw new UnsupportedOperationException("command_DAMP not set");
      }
      return command_DAMP;
    }

    @Override
    public boolean getCommand_PART() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__PART)) {
        throw new UnsupportedOperationException("command_PART not set");
      }
      return command_PART;
    }

    @Override
    public String getCommand_DERIV() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DERIV)) {
        throw new UnsupportedOperationException("command_DERIV not set");
      }
      return command_DERIV;
    }

    @Override
    public List<Double> getFltcon_MACH() {
      return fltcon_MACH;
    }

    @Override
    public List<Double> getFltcon_ALT() {
      return fltcon_ALT;
    }

    @Override
    public List<Double> getFltcon_ALSCHD() {
      return fltcon_ALSCHD;
    }

    @Override
    public Double getFltcon_GAMMA() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__GAMMA)) {
        throw new UnsupportedOperationException("fltcon_GAMMA not set");
      }
      return fltcon_GAMMA;
    }

    @Override
    public int getFltcon_LOOP() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__LOOP)) {
        throw new UnsupportedOperationException("fltcon_LOOP not set");
      }
      return fltcon_LOOP;
    }

    @Override
    public Double getFltcon_RNNUB() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__RNNUB)) {
        throw new UnsupportedOperationException("fltcon_RNNUB not set");
      }
      return fltcon_RNNUB;
    }

    @Override
    public Double getOptins_BLREF() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__BLREF)) {
        throw new UnsupportedOperationException("optins_BLREF not set");
      }
      return optins_BLREF;
    }

    @Override
    public Double getOptins_SREF() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__SREF)) {
        throw new UnsupportedOperationException("optins_SREF not set");
      }
      return optins_SREF;
    }

    @Override
    public Double getOptins_CBARR() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__CBARR)) {
        throw new UnsupportedOperationException("optins_CBARR not set");
      }
      return optins_CBARR;
    }

    @Override
    public Double getSynths_XW() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XW)) {
        throw new UnsupportedOperationException("synths_XW not set");
      }
      return synths_XW;
    }

    @Override
    public Double getSynths_ZW() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZW)) {
        throw new UnsupportedOperationException("synths_ZW not set");
      }
      return synths_ZW;
    }

    @Override
    public Double getSynths_ALIW() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ALIW)) {
        throw new UnsupportedOperationException("synths_ALIW not set");
      }
      return synths_ALIW;
    }

    @Override
    public Double getSynths_XCG() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XCG)) {
        throw new UnsupportedOperationException("synths_XCG not set");
      }
      return synths_XCG;
    }

    @Override
    public Double getSynths_ZCG() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZCG)) {
        throw new UnsupportedOperationException("synths_ZCG not set");
      }
      return synths_ZCG;
    }

    @Override
    public Double getSynths_XH() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XH)) {
        throw new UnsupportedOperationException("synths_XH not set");
      }
      return synths_XH;
    }

    @Override
    public Double getSynths_ZH() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZH)) {
        throw new UnsupportedOperationException("synths_ZH not set");
      }
      return synths_ZH;
    }

    @Override
    public Double getSynths_XV() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XV)) {
        throw new UnsupportedOperationException("synths_XV not set");
      }
      return synths_XV;
    }

    @Override
    public Double getSynths_ZV() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZV)) {
        throw new UnsupportedOperationException("synths_ZV not set");
      }
      return synths_ZV;
    }

    @Override
    public Double getSynths_XVF() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XVF)) {
        throw new UnsupportedOperationException("synths_XVF not set");
      }
      return synths_XVF;
    }

    @Override
    public Double getSynths_ZVF() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZVF)) {
        throw new UnsupportedOperationException("synths_ZVF not set");
      }
      return synths_ZVF;
    }

    @Override
    public boolean getSynths_VERTUP() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__VERTUP)) {
        throw new UnsupportedOperationException("synths_VERTUP not set");
      }
      return synths_VERTUP;
    }

    @Override
    public Double getBody_BNOSE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BNOSE)) {
        throw new UnsupportedOperationException("body_BNOSE not set");
      }
      return body_BNOSE;
    }

    @Override
    public Double getBody_BTAIL() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BTAIL)) {
        throw new UnsupportedOperationException("body_BTAIL not set");
      }
      return body_BTAIL;
    }

    @Override
    public Double getBody_BLA() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BLA)) {
        throw new UnsupportedOperationException("body_BLA not set");
      }
      return body_BLA;
    }

    @Override
    public List<Double> getBody_X() {
      return body_X;
    }

    @Override
    public List<Double> getBody_ZU() {
      return body_ZU;
    }

    @Override
    public List<Double> getBody_ZL() {
      return body_ZL;
    }

    @Override
    public List<Double> getBody_S() {
      return body_S;
    }

    @Override
    public Double getWgplnf_CHRDR() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDR)) {
        throw new UnsupportedOperationException("wgplnf_CHRDR not set");
      }
      return wgplnf_CHRDR;
    }

    @Override
    public Optional<Double> getWgplnf_CHRDBP() {
      return Optional.ofNullable(wgplnf_CHRDBP);
    }

    @Override
    public Double getWgplnf_CHRDTP() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDTP)) {
        throw new UnsupportedOperationException("wgplnf_CHRDTP not set");
      }
      return wgplnf_CHRDTP;
    }

    @Override
    public Double getWgplnf_SSPN() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPN)) {
        throw new UnsupportedOperationException("wgplnf_SSPN not set");
      }
      return wgplnf_SSPN;
    }

    @Override
    public Double getWgplnf_SSPNE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPNE)) {
        throw new UnsupportedOperationException("wgplnf_SSPNE not set");
      }
      return wgplnf_SSPNE;
    }

    @Override
    public Optional<Double> getWgplnf_SSPNOP() {
      return Optional.ofNullable(wgplnf_SSPNOP);
    }

    @Override
    public Double getWgplnf_SAVSI() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SAVSI)) {
        throw new UnsupportedOperationException("wgplnf_SAVSI not set");
      }
      return wgplnf_SAVSI;
    }

    @Override
    public Optional<Double> getWgplnf_SAVSO() {
      return Optional.ofNullable(wgplnf_SAVSO);
    }

    @Override
    public Double getWgplnf_CHSTAT() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHSTAT)) {
        throw new UnsupportedOperationException("wgplnf_CHSTAT not set");
      }
      return wgplnf_CHSTAT;
    }

    @Override
    public Double getWgplnf_TWISTA() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TWISTA)) {
        throw new UnsupportedOperationException("wgplnf_TWISTA not set");
      }
      return wgplnf_TWISTA;
    }

    @Override
    public Optional<Double> getWgplnf_SSPNDD() {
      return Optional.ofNullable(wgplnf_SSPNDD);
    }

    @Override
    public Double getWgplnf_DHDADI() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__DHDADI)) {
        throw new UnsupportedOperationException("wgplnf_DHDADI not set");
      }
      return wgplnf_DHDADI;
    }

    @Override
    public Optional<Double> getWgplnf_DHDADO() {
      return Optional.ofNullable(wgplnf_DHDADO);
    }

    @Override
    public int getWgplnf_TYPE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TYPE)) {
        throw new UnsupportedOperationException("wgplnf_TYPE not set");
      }
      return wgplnf_TYPE;
    }

    @Override
    public Double getVtplnf_CHRDR() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDR)) {
        throw new UnsupportedOperationException("vtplnf_CHRDR not set");
      }
      return vtplnf_CHRDR;
    }

    @Override
    public Optional<Double> getVtplnf_CHRDBP() {
      return Optional.ofNullable(vtplnf_CHRDBP);
    }

    @Override
    public Double getVtplnf_CHRDTP() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDTP)) {
        throw new UnsupportedOperationException("vtplnf_CHRDTP not set");
      }
      return vtplnf_CHRDTP;
    }

    @Override
    public Double getVtplnf_SSPN() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPN)) {
        throw new UnsupportedOperationException("vtplnf_SSPN not set");
      }
      return vtplnf_SSPN;
    }

    @Override
    public Double getVtplnf_SSPNE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPNE)) {
        throw new UnsupportedOperationException("vtplnf_SSPNE not set");
      }
      return vtplnf_SSPNE;
    }

    @Override
    public Optional<Double> getVtplnf_SSPNOP() {
      return Optional.ofNullable(vtplnf_SSPNOP);
    }

    @Override
    public Double getVtplnf_SAVSI() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SAVSI)) {
        throw new UnsupportedOperationException("vtplnf_SAVSI not set");
      }
      return vtplnf_SAVSI;
    }

    @Override
    public Optional<Double> getVtplnf_SAVSO() {
      return Optional.ofNullable(vtplnf_SAVSO);
    }

    @Override
    public Double getVtplnf_CHSTAT() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHSTAT)) {
        throw new UnsupportedOperationException("vtplnf_CHSTAT not set");
      }
      return vtplnf_CHSTAT;
    }

    @Override
    public Double getVtplnf_TWISTA() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TWISTA)) {
        throw new UnsupportedOperationException("vtplnf_TWISTA not set");
      }
      return vtplnf_TWISTA;
    }

    @Override
    public Optional<Double> getVtplnf_SSPNDD() {
      return Optional.ofNullable(vtplnf_SSPNDD);
    }

    @Override
    public Double getVtplnf_DHDADI() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__DHDADI)) {
        throw new UnsupportedOperationException("vtplnf_DHDADI not set");
      }
      return vtplnf_DHDADI;
    }

    @Override
    public Optional<Double> getVtplnf_DHDADO() {
      return Optional.ofNullable(vtplnf_DHDADO);
    }

    @Override
    public int getVtplnf_TYPE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TYPE)) {
        throw new UnsupportedOperationException("vtplnf_TYPE not set");
      }
      return vtplnf_TYPE;
    }

    @Override
    public Double getHtplnf_CHRDR() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDR)) {
        throw new UnsupportedOperationException("htplnf_CHRDR not set");
      }
      return htplnf_CHRDR;
    }

    @Override
    public Optional<Double> getHtplnf_CHRDBP() {
      return Optional.ofNullable(htplnf_CHRDBP);
    }

    @Override
    public Double getHtplnf_CHRDTP() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDTP)) {
        throw new UnsupportedOperationException("htplnf_CHRDTP not set");
      }
      return htplnf_CHRDTP;
    }

    @Override
    public Double getHtplnf_SSPN() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPN)) {
        throw new UnsupportedOperationException("htplnf_SSPN not set");
      }
      return htplnf_SSPN;
    }

    @Override
    public Double getHtplnf_SSPNE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPNE)) {
        throw new UnsupportedOperationException("htplnf_SSPNE not set");
      }
      return htplnf_SSPNE;
    }

    @Override
    public Optional<Double> getHtplnf_SSPNOP() {
      return Optional.ofNullable(htplnf_SSPNOP);
    }

    @Override
    public Double getHtplnf_SAVSI() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SAVSI)) {
        throw new UnsupportedOperationException("htplnf_SAVSI not set");
      }
      return htplnf_SAVSI;
    }

    @Override
    public Optional<Double> getHtplnf_SAVSO() {
      return Optional.ofNullable(htplnf_SAVSO);
    }

    @Override
    public Double getHtplnf_CHSTAT() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHSTAT)) {
        throw new UnsupportedOperationException("htplnf_CHSTAT not set");
      }
      return htplnf_CHSTAT;
    }

    @Override
    public Double getHtplnf_TWISTA() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TWISTA)) {
        throw new UnsupportedOperationException("htplnf_TWISTA not set");
      }
      return htplnf_TWISTA;
    }

    @Override
    public Optional<Double> getHtplnf_SSPNDD() {
      return Optional.ofNullable(htplnf_SSPNDD);
    }

    @Override
    public Double getHtplnf_DHDADI() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__DHDADI)) {
        throw new UnsupportedOperationException("htplnf_DHDADI not set");
      }
      return htplnf_DHDADI;
    }

    @Override
    public Optional<Double> getHtplnf_DHDADO() {
      return Optional.ofNullable(htplnf_DHDADO);
    }

    @Override
    public int getHtplnf_TYPE() {
      if (_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TYPE)) {
        throw new UnsupportedOperationException("htplnf_TYPE not set");
      }
      return htplnf_TYPE;
    }

    @Override
    public Optional<Double> getJetpwr_AIETLJ() {
      return Optional.ofNullable(jetpwr_AIETLJ);
    }

    @Override
    public Optional<Double> getJetpwr_AMBSTP() {
      return Optional.ofNullable(jetpwr_AMBSTP);
    }

    @Override
    public Optional<Double> getJetpwr_AMBTMP() {
      return Optional.ofNullable(jetpwr_AMBTMP);
    }

    @Override
    public Optional<List<Double>> getJetpwr_JEALOC() {
      return Optional.ofNullable(jetpwr_JEALOC);
    }

    @Override
    public Optional<Double> getJetpwr_JELLOC() {
      return Optional.ofNullable(jetpwr_JELLOC);
    }

    @Override
    public Optional<Double> getJetpwr_JERAD() {
      return Optional.ofNullable(jetpwr_JERAD);
    }

    @Override
    public Optional<Double> getJetpwr_JEVLOC() {
      return Optional.ofNullable(jetpwr_JEVLOC);
    }

    @Override
    public Optional<Double> getJetpwr_JIALOC() {
      return Optional.ofNullable(jetpwr_JIALOC);
    }

    @Override
    public Optional<Double> getJetpwr_JINLTA() {
      return Optional.ofNullable(jetpwr_JINLTA);
    }

    @Override
    public Optional<Double> getJetpwr_THSTCJ() {
      return Optional.ofNullable(jetpwr_THSTCJ);
    }

    @Override
    public Optional<Double> getJetpwr_JEANGL() {
      return Optional.ofNullable(jetpwr_JEANGL);
    }

    @Override
    public Optional<Integer> getJetpwr_NENGSJ() {
      return Optional.ofNullable(jetpwr_NENGSJ);
    }

    @Override
    public Optional<Integer> getPropwr_NENGSP() {
      return Optional.ofNullable(propwr_NENGSP);
    }

    @Override
    public Optional<Double> getPropwr_AIETLP() {
      return Optional.ofNullable(propwr_AIETLP);
    }

    @Override
    public Optional<Double> getPropwr_THSTCP() {
      return Optional.ofNullable(propwr_THSTCP);
    }

    @Override
    public Optional<Double> getPropwr_PHALOC() {
      return Optional.ofNullable(propwr_PHALOC);
    }

    @Override
    public Optional<Double> getPropwr_PHVLOC() {
      return Optional.ofNullable(propwr_PHVLOC);
    }

    @Override
    public Optional<Double> getPropwr_PRPRAD() {
      return Optional.ofNullable(propwr_PRPRAD);
    }

    @Override
    public Optional<Double> getPropwr_ENGFCT() {
      return Optional.ofNullable(propwr_ENGFCT);
    }

    @Override
    public Optional<Double> getPropwr_BWAPR3() {
      return Optional.ofNullable(propwr_BWAPR3);
    }

    @Override
    public Optional<Double> getPropwr_BWAPR6() {
      return Optional.ofNullable(propwr_BWAPR6);
    }

    @Override
    public Optional<Double> getPropwr_BWAPR9() {
      return Optional.ofNullable(propwr_BWAPR9);
    }

    @Override
    public Optional<Integer> getPropwr_NOPBPE() {
      return Optional.ofNullable(propwr_NOPBPE);
    }

    @Override
    public Optional<Double> getPropwr_BAPR75() {
      return Optional.ofNullable(propwr_BAPR75);
    }

    @Override
    public Optional<Double> getPropwr_YP() {
      return Optional.ofNullable(propwr_YP);
    }

    @Override
    public Optional<Boolean> getPropwr_CROT() {
      return Optional.ofNullable(propwr_CROT);
    }

    @Override
    public Optional<Integer> getSymflp_FTYPE() {
      return Optional.ofNullable(symflp_FTYPE);
    }

    @Override
    public Optional<List<Double>> getSymflp_DELTA() {
      return Optional.ofNullable(symflp_DELTA);
    }

    @Override
    public Optional<Double> getSymflp_SPANFI() {
      return Optional.ofNullable(symflp_SPANFI);
    }

    @Override
    public Optional<Double> getSymflp_SPANFO() {
      return Optional.ofNullable(symflp_SPANFO);
    }

    @Override
    public Optional<Double> getSymflp_CHRDFI() {
      return Optional.ofNullable(symflp_CHRDFI);
    }

    @Override
    public Optional<Double> getSymflp_CHRDFO() {
      return Optional.ofNullable(symflp_CHRDFO);
    }

    @Override
    public Optional<Integer> getSymflp_NTYPE() {
      return Optional.ofNullable(symflp_NTYPE);
    }

    @Override
    public Optional<Double> getSymflp_CB() {
      return Optional.ofNullable(symflp_CB);
    }

    @Override
    public Optional<Double> getSymflp_TC() {
      return Optional.ofNullable(symflp_TC);
    }

    @Override
    public Optional<Double> getSymflp_PHETE() {
      return Optional.ofNullable(symflp_PHETE);
    }

    @Override
    public Optional<Double> getSymflp_PHETEP() {
      return Optional.ofNullable(symflp_PHETEP);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof DatcomInputData_Builder.Partial)) {
        return false;
      }
      DatcomInputData_Builder.Partial other = (DatcomInputData_Builder.Partial) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(engineType, other.engineType)
          && Objects.equals(command_DIM, other.command_DIM)
          && Objects.equals(command_TRIM, other.command_TRIM)
          && Objects.equals(command_DAMP, other.command_DAMP)
          && Objects.equals(command_PART, other.command_PART)
          && Objects.equals(command_DERIV, other.command_DERIV)
          && Objects.equals(fltcon_MACH, other.fltcon_MACH)
          && Objects.equals(fltcon_ALT, other.fltcon_ALT)
          && Objects.equals(fltcon_ALSCHD, other.fltcon_ALSCHD)
          && Objects.equals(fltcon_GAMMA, other.fltcon_GAMMA)
          && Objects.equals(fltcon_LOOP, other.fltcon_LOOP)
          && Objects.equals(fltcon_RNNUB, other.fltcon_RNNUB)
          && Objects.equals(optins_BLREF, other.optins_BLREF)
          && Objects.equals(optins_SREF, other.optins_SREF)
          && Objects.equals(optins_CBARR, other.optins_CBARR)
          && Objects.equals(synths_XW, other.synths_XW)
          && Objects.equals(synths_ZW, other.synths_ZW)
          && Objects.equals(synths_ALIW, other.synths_ALIW)
          && Objects.equals(synths_XCG, other.synths_XCG)
          && Objects.equals(synths_ZCG, other.synths_ZCG)
          && Objects.equals(synths_XH, other.synths_XH)
          && Objects.equals(synths_ZH, other.synths_ZH)
          && Objects.equals(synths_XV, other.synths_XV)
          && Objects.equals(synths_ZV, other.synths_ZV)
          && Objects.equals(synths_XVF, other.synths_XVF)
          && Objects.equals(synths_ZVF, other.synths_ZVF)
          && Objects.equals(synths_VERTUP, other.synths_VERTUP)
          && Objects.equals(body_BNOSE, other.body_BNOSE)
          && Objects.equals(body_BTAIL, other.body_BTAIL)
          && Objects.equals(body_BLA, other.body_BLA)
          && Objects.equals(body_X, other.body_X)
          && Objects.equals(body_ZU, other.body_ZU)
          && Objects.equals(body_ZL, other.body_ZL)
          && Objects.equals(body_S, other.body_S)
          && Objects.equals(wgplnf_CHRDR, other.wgplnf_CHRDR)
          && Objects.equals(wgplnf_CHRDBP, other.wgplnf_CHRDBP)
          && Objects.equals(wgplnf_CHRDTP, other.wgplnf_CHRDTP)
          && Objects.equals(wgplnf_SSPN, other.wgplnf_SSPN)
          && Objects.equals(wgplnf_SSPNE, other.wgplnf_SSPNE)
          && Objects.equals(wgplnf_SSPNOP, other.wgplnf_SSPNOP)
          && Objects.equals(wgplnf_SAVSI, other.wgplnf_SAVSI)
          && Objects.equals(wgplnf_SAVSO, other.wgplnf_SAVSO)
          && Objects.equals(wgplnf_CHSTAT, other.wgplnf_CHSTAT)
          && Objects.equals(wgplnf_TWISTA, other.wgplnf_TWISTA)
          && Objects.equals(wgplnf_SSPNDD, other.wgplnf_SSPNDD)
          && Objects.equals(wgplnf_DHDADI, other.wgplnf_DHDADI)
          && Objects.equals(wgplnf_DHDADO, other.wgplnf_DHDADO)
          && Objects.equals(wgplnf_TYPE, other.wgplnf_TYPE)
          && Objects.equals(vtplnf_CHRDR, other.vtplnf_CHRDR)
          && Objects.equals(vtplnf_CHRDBP, other.vtplnf_CHRDBP)
          && Objects.equals(vtplnf_CHRDTP, other.vtplnf_CHRDTP)
          && Objects.equals(vtplnf_SSPN, other.vtplnf_SSPN)
          && Objects.equals(vtplnf_SSPNE, other.vtplnf_SSPNE)
          && Objects.equals(vtplnf_SSPNOP, other.vtplnf_SSPNOP)
          && Objects.equals(vtplnf_SAVSI, other.vtplnf_SAVSI)
          && Objects.equals(vtplnf_SAVSO, other.vtplnf_SAVSO)
          && Objects.equals(vtplnf_CHSTAT, other.vtplnf_CHSTAT)
          && Objects.equals(vtplnf_TWISTA, other.vtplnf_TWISTA)
          && Objects.equals(vtplnf_SSPNDD, other.vtplnf_SSPNDD)
          && Objects.equals(vtplnf_DHDADI, other.vtplnf_DHDADI)
          && Objects.equals(vtplnf_DHDADO, other.vtplnf_DHDADO)
          && Objects.equals(vtplnf_TYPE, other.vtplnf_TYPE)
          && Objects.equals(htplnf_CHRDR, other.htplnf_CHRDR)
          && Objects.equals(htplnf_CHRDBP, other.htplnf_CHRDBP)
          && Objects.equals(htplnf_CHRDTP, other.htplnf_CHRDTP)
          && Objects.equals(htplnf_SSPN, other.htplnf_SSPN)
          && Objects.equals(htplnf_SSPNE, other.htplnf_SSPNE)
          && Objects.equals(htplnf_SSPNOP, other.htplnf_SSPNOP)
          && Objects.equals(htplnf_SAVSI, other.htplnf_SAVSI)
          && Objects.equals(htplnf_SAVSO, other.htplnf_SAVSO)
          && Objects.equals(htplnf_CHSTAT, other.htplnf_CHSTAT)
          && Objects.equals(htplnf_TWISTA, other.htplnf_TWISTA)
          && Objects.equals(htplnf_SSPNDD, other.htplnf_SSPNDD)
          && Objects.equals(htplnf_DHDADI, other.htplnf_DHDADI)
          && Objects.equals(htplnf_DHDADO, other.htplnf_DHDADO)
          && Objects.equals(htplnf_TYPE, other.htplnf_TYPE)
          && Objects.equals(jetpwr_AIETLJ, other.jetpwr_AIETLJ)
          && Objects.equals(jetpwr_AMBSTP, other.jetpwr_AMBSTP)
          && Objects.equals(jetpwr_AMBTMP, other.jetpwr_AMBTMP)
          && Objects.equals(jetpwr_JEALOC, other.jetpwr_JEALOC)
          && Objects.equals(jetpwr_JELLOC, other.jetpwr_JELLOC)
          && Objects.equals(jetpwr_JERAD, other.jetpwr_JERAD)
          && Objects.equals(jetpwr_JEVLOC, other.jetpwr_JEVLOC)
          && Objects.equals(jetpwr_JIALOC, other.jetpwr_JIALOC)
          && Objects.equals(jetpwr_JINLTA, other.jetpwr_JINLTA)
          && Objects.equals(jetpwr_THSTCJ, other.jetpwr_THSTCJ)
          && Objects.equals(jetpwr_JEANGL, other.jetpwr_JEANGL)
          && Objects.equals(jetpwr_NENGSJ, other.jetpwr_NENGSJ)
          && Objects.equals(propwr_NENGSP, other.propwr_NENGSP)
          && Objects.equals(propwr_AIETLP, other.propwr_AIETLP)
          && Objects.equals(propwr_THSTCP, other.propwr_THSTCP)
          && Objects.equals(propwr_PHALOC, other.propwr_PHALOC)
          && Objects.equals(propwr_PHVLOC, other.propwr_PHVLOC)
          && Objects.equals(propwr_PRPRAD, other.propwr_PRPRAD)
          && Objects.equals(propwr_ENGFCT, other.propwr_ENGFCT)
          && Objects.equals(propwr_BWAPR3, other.propwr_BWAPR3)
          && Objects.equals(propwr_BWAPR6, other.propwr_BWAPR6)
          && Objects.equals(propwr_BWAPR9, other.propwr_BWAPR9)
          && Objects.equals(propwr_NOPBPE, other.propwr_NOPBPE)
          && Objects.equals(propwr_BAPR75, other.propwr_BAPR75)
          && Objects.equals(propwr_YP, other.propwr_YP)
          && Objects.equals(propwr_CROT, other.propwr_CROT)
          && Objects.equals(symflp_FTYPE, other.symflp_FTYPE)
          && Objects.equals(symflp_DELTA, other.symflp_DELTA)
          && Objects.equals(symflp_SPANFI, other.symflp_SPANFI)
          && Objects.equals(symflp_SPANFO, other.symflp_SPANFO)
          && Objects.equals(symflp_CHRDFI, other.symflp_CHRDFI)
          && Objects.equals(symflp_CHRDFO, other.symflp_CHRDFO)
          && Objects.equals(symflp_NTYPE, other.symflp_NTYPE)
          && Objects.equals(symflp_CB, other.symflp_CB)
          && Objects.equals(symflp_TC, other.symflp_TC)
          && Objects.equals(symflp_PHETE, other.symflp_PHETE)
          && Objects.equals(symflp_PHETEP, other.symflp_PHETEP)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          engineType,
          command_DIM,
          command_TRIM,
          command_DAMP,
          command_PART,
          command_DERIV,
          fltcon_MACH,
          fltcon_ALT,
          fltcon_ALSCHD,
          fltcon_GAMMA,
          fltcon_LOOP,
          fltcon_RNNUB,
          optins_BLREF,
          optins_SREF,
          optins_CBARR,
          synths_XW,
          synths_ZW,
          synths_ALIW,
          synths_XCG,
          synths_ZCG,
          synths_XH,
          synths_ZH,
          synths_XV,
          synths_ZV,
          synths_XVF,
          synths_ZVF,
          synths_VERTUP,
          body_BNOSE,
          body_BTAIL,
          body_BLA,
          body_X,
          body_ZU,
          body_ZL,
          body_S,
          wgplnf_CHRDR,
          wgplnf_CHRDBP,
          wgplnf_CHRDTP,
          wgplnf_SSPN,
          wgplnf_SSPNE,
          wgplnf_SSPNOP,
          wgplnf_SAVSI,
          wgplnf_SAVSO,
          wgplnf_CHSTAT,
          wgplnf_TWISTA,
          wgplnf_SSPNDD,
          wgplnf_DHDADI,
          wgplnf_DHDADO,
          wgplnf_TYPE,
          vtplnf_CHRDR,
          vtplnf_CHRDBP,
          vtplnf_CHRDTP,
          vtplnf_SSPN,
          vtplnf_SSPNE,
          vtplnf_SSPNOP,
          vtplnf_SAVSI,
          vtplnf_SAVSO,
          vtplnf_CHSTAT,
          vtplnf_TWISTA,
          vtplnf_SSPNDD,
          vtplnf_DHDADI,
          vtplnf_DHDADO,
          vtplnf_TYPE,
          htplnf_CHRDR,
          htplnf_CHRDBP,
          htplnf_CHRDTP,
          htplnf_SSPN,
          htplnf_SSPNE,
          htplnf_SSPNOP,
          htplnf_SAVSI,
          htplnf_SAVSO,
          htplnf_CHSTAT,
          htplnf_TWISTA,
          htplnf_SSPNDD,
          htplnf_DHDADI,
          htplnf_DHDADO,
          htplnf_TYPE,
          jetpwr_AIETLJ,
          jetpwr_AMBSTP,
          jetpwr_AMBTMP,
          jetpwr_JEALOC,
          jetpwr_JELLOC,
          jetpwr_JERAD,
          jetpwr_JEVLOC,
          jetpwr_JIALOC,
          jetpwr_JINLTA,
          jetpwr_THSTCJ,
          jetpwr_JEANGL,
          jetpwr_NENGSJ,
          propwr_NENGSP,
          propwr_AIETLP,
          propwr_THSTCP,
          propwr_PHALOC,
          propwr_PHVLOC,
          propwr_PRPRAD,
          propwr_ENGFCT,
          propwr_BWAPR3,
          propwr_BWAPR6,
          propwr_BWAPR9,
          propwr_NOPBPE,
          propwr_BAPR75,
          propwr_YP,
          propwr_CROT,
          symflp_FTYPE,
          symflp_DELTA,
          symflp_SPANFI,
          symflp_SPANFO,
          symflp_CHRDFI,
          symflp_CHRDFO,
          symflp_NTYPE,
          symflp_CB,
          symflp_TC,
          symflp_PHETE,
          symflp_PHETEP,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial DatcomInputData{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.DESCRIPTION)
                  ? "description=" + description
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.ENGINE_TYPE)
                  ? "engineType=" + engineType
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DIM)
                  ? "command_DIM=" + command_DIM
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__TRIM)
                  ? "command_TRIM=" + command_TRIM
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DAMP)
                  ? "command_DAMP=" + command_DAMP
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__PART)
                  ? "command_PART=" + command_PART
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.COMMAND__DERIV)
                  ? "command_DERIV=" + command_DERIV
                  : null),
              "fltcon_MACH=" + fltcon_MACH,
              "fltcon_ALT=" + fltcon_ALT,
              "fltcon_ALSCHD=" + fltcon_ALSCHD,
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__GAMMA)
                  ? "fltcon_GAMMA=" + fltcon_GAMMA
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__LOOP)
                  ? "fltcon_LOOP=" + fltcon_LOOP
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.FLTCON__RNNUB)
                  ? "fltcon_RNNUB=" + fltcon_RNNUB
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__BLREF)
                  ? "optins_BLREF=" + optins_BLREF
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__SREF)
                  ? "optins_SREF=" + optins_SREF
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.OPTINS__CBARR)
                  ? "optins_CBARR=" + optins_CBARR
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XW)
                  ? "synths_XW=" + synths_XW
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZW)
                  ? "synths_ZW=" + synths_ZW
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ALIW)
                  ? "synths_ALIW=" + synths_ALIW
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XCG)
                  ? "synths_XCG=" + synths_XCG
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZCG)
                  ? "synths_ZCG=" + synths_ZCG
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XH)
                  ? "synths_XH=" + synths_XH
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZH)
                  ? "synths_ZH=" + synths_ZH
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XV)
                  ? "synths_XV=" + synths_XV
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZV)
                  ? "synths_ZV=" + synths_ZV
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__XVF)
                  ? "synths_XVF=" + synths_XVF
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__ZVF)
                  ? "synths_ZVF=" + synths_ZVF
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.SYNTHS__VERTUP)
                  ? "synths_VERTUP=" + synths_VERTUP
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BNOSE)
                  ? "body_BNOSE=" + body_BNOSE
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BTAIL)
                  ? "body_BTAIL=" + body_BTAIL
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.BODY__BLA)
                  ? "body_BLA=" + body_BLA
                  : null),
              "body_X=" + body_X,
              "body_ZU=" + body_ZU,
              "body_ZL=" + body_ZL,
              "body_S=" + body_S,
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDR)
                  ? "wgplnf_CHRDR=" + wgplnf_CHRDR
                  : null),
              (wgplnf_CHRDBP != null ? "wgplnf_CHRDBP=" + wgplnf_CHRDBP : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHRDTP)
                  ? "wgplnf_CHRDTP=" + wgplnf_CHRDTP
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPN)
                  ? "wgplnf_SSPN=" + wgplnf_SSPN
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SSPNE)
                  ? "wgplnf_SSPNE=" + wgplnf_SSPNE
                  : null),
              (wgplnf_SSPNOP != null ? "wgplnf_SSPNOP=" + wgplnf_SSPNOP : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__SAVSI)
                  ? "wgplnf_SAVSI=" + wgplnf_SAVSI
                  : null),
              (wgplnf_SAVSO != null ? "wgplnf_SAVSO=" + wgplnf_SAVSO : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__CHSTAT)
                  ? "wgplnf_CHSTAT=" + wgplnf_CHSTAT
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TWISTA)
                  ? "wgplnf_TWISTA=" + wgplnf_TWISTA
                  : null),
              (wgplnf_SSPNDD != null ? "wgplnf_SSPNDD=" + wgplnf_SSPNDD : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__DHDADI)
                  ? "wgplnf_DHDADI=" + wgplnf_DHDADI
                  : null),
              (wgplnf_DHDADO != null ? "wgplnf_DHDADO=" + wgplnf_DHDADO : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.WGPLNF__TYPE)
                  ? "wgplnf_TYPE=" + wgplnf_TYPE
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDR)
                  ? "vtplnf_CHRDR=" + vtplnf_CHRDR
                  : null),
              (vtplnf_CHRDBP != null ? "vtplnf_CHRDBP=" + vtplnf_CHRDBP : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHRDTP)
                  ? "vtplnf_CHRDTP=" + vtplnf_CHRDTP
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPN)
                  ? "vtplnf_SSPN=" + vtplnf_SSPN
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SSPNE)
                  ? "vtplnf_SSPNE=" + vtplnf_SSPNE
                  : null),
              (vtplnf_SSPNOP != null ? "vtplnf_SSPNOP=" + vtplnf_SSPNOP : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__SAVSI)
                  ? "vtplnf_SAVSI=" + vtplnf_SAVSI
                  : null),
              (vtplnf_SAVSO != null ? "vtplnf_SAVSO=" + vtplnf_SAVSO : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__CHSTAT)
                  ? "vtplnf_CHSTAT=" + vtplnf_CHSTAT
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TWISTA)
                  ? "vtplnf_TWISTA=" + vtplnf_TWISTA
                  : null),
              (vtplnf_SSPNDD != null ? "vtplnf_SSPNDD=" + vtplnf_SSPNDD : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__DHDADI)
                  ? "vtplnf_DHDADI=" + vtplnf_DHDADI
                  : null),
              (vtplnf_DHDADO != null ? "vtplnf_DHDADO=" + vtplnf_DHDADO : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.VTPLNF__TYPE)
                  ? "vtplnf_TYPE=" + vtplnf_TYPE
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDR)
                  ? "htplnf_CHRDR=" + htplnf_CHRDR
                  : null),
              (htplnf_CHRDBP != null ? "htplnf_CHRDBP=" + htplnf_CHRDBP : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHRDTP)
                  ? "htplnf_CHRDTP=" + htplnf_CHRDTP
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPN)
                  ? "htplnf_SSPN=" + htplnf_SSPN
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SSPNE)
                  ? "htplnf_SSPNE=" + htplnf_SSPNE
                  : null),
              (htplnf_SSPNOP != null ? "htplnf_SSPNOP=" + htplnf_SSPNOP : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__SAVSI)
                  ? "htplnf_SAVSI=" + htplnf_SAVSI
                  : null),
              (htplnf_SAVSO != null ? "htplnf_SAVSO=" + htplnf_SAVSO : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__CHSTAT)
                  ? "htplnf_CHSTAT=" + htplnf_CHSTAT
                  : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TWISTA)
                  ? "htplnf_TWISTA=" + htplnf_TWISTA
                  : null),
              (htplnf_SSPNDD != null ? "htplnf_SSPNDD=" + htplnf_SSPNDD : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__DHDADI)
                  ? "htplnf_DHDADI=" + htplnf_DHDADI
                  : null),
              (htplnf_DHDADO != null ? "htplnf_DHDADO=" + htplnf_DHDADO : null),
              (!_unsetProperties.contains(DatcomInputData_Builder.Property.HTPLNF__TYPE)
                  ? "htplnf_TYPE=" + htplnf_TYPE
                  : null),
              (jetpwr_AIETLJ != null ? "jetpwr_AIETLJ=" + jetpwr_AIETLJ : null),
              (jetpwr_AMBSTP != null ? "jetpwr_AMBSTP=" + jetpwr_AMBSTP : null),
              (jetpwr_AMBTMP != null ? "jetpwr_AMBTMP=" + jetpwr_AMBTMP : null),
              (jetpwr_JEALOC != null ? "jetpwr_JEALOC=" + jetpwr_JEALOC : null),
              (jetpwr_JELLOC != null ? "jetpwr_JELLOC=" + jetpwr_JELLOC : null),
              (jetpwr_JERAD != null ? "jetpwr_JERAD=" + jetpwr_JERAD : null),
              (jetpwr_JEVLOC != null ? "jetpwr_JEVLOC=" + jetpwr_JEVLOC : null),
              (jetpwr_JIALOC != null ? "jetpwr_JIALOC=" + jetpwr_JIALOC : null),
              (jetpwr_JINLTA != null ? "jetpwr_JINLTA=" + jetpwr_JINLTA : null),
              (jetpwr_THSTCJ != null ? "jetpwr_THSTCJ=" + jetpwr_THSTCJ : null),
              (jetpwr_JEANGL != null ? "jetpwr_JEANGL=" + jetpwr_JEANGL : null),
              (jetpwr_NENGSJ != null ? "jetpwr_NENGSJ=" + jetpwr_NENGSJ : null),
              (propwr_NENGSP != null ? "propwr_NENGSP=" + propwr_NENGSP : null),
              (propwr_AIETLP != null ? "propwr_AIETLP=" + propwr_AIETLP : null),
              (propwr_THSTCP != null ? "propwr_THSTCP=" + propwr_THSTCP : null),
              (propwr_PHALOC != null ? "propwr_PHALOC=" + propwr_PHALOC : null),
              (propwr_PHVLOC != null ? "propwr_PHVLOC=" + propwr_PHVLOC : null),
              (propwr_PRPRAD != null ? "propwr_PRPRAD=" + propwr_PRPRAD : null),
              (propwr_ENGFCT != null ? "propwr_ENGFCT=" + propwr_ENGFCT : null),
              (propwr_BWAPR3 != null ? "propwr_BWAPR3=" + propwr_BWAPR3 : null),
              (propwr_BWAPR6 != null ? "propwr_BWAPR6=" + propwr_BWAPR6 : null),
              (propwr_BWAPR9 != null ? "propwr_BWAPR9=" + propwr_BWAPR9 : null),
              (propwr_NOPBPE != null ? "propwr_NOPBPE=" + propwr_NOPBPE : null),
              (propwr_BAPR75 != null ? "propwr_BAPR75=" + propwr_BAPR75 : null),
              (propwr_YP != null ? "propwr_YP=" + propwr_YP : null),
              (propwr_CROT != null ? "propwr_CROT=" + propwr_CROT : null),
              (symflp_FTYPE != null ? "symflp_FTYPE=" + symflp_FTYPE : null),
              (symflp_DELTA != null ? "symflp_DELTA=" + symflp_DELTA : null),
              (symflp_SPANFI != null ? "symflp_SPANFI=" + symflp_SPANFI : null),
              (symflp_SPANFO != null ? "symflp_SPANFO=" + symflp_SPANFO : null),
              (symflp_CHRDFI != null ? "symflp_CHRDFI=" + symflp_CHRDFI : null),
              (symflp_CHRDFO != null ? "symflp_CHRDFO=" + symflp_CHRDFO : null),
              (symflp_NTYPE != null ? "symflp_NTYPE=" + symflp_NTYPE : null),
              (symflp_CB != null ? "symflp_CB=" + symflp_CB : null),
              (symflp_TC != null ? "symflp_TC=" + symflp_TC : null),
              (symflp_PHETE != null ? "symflp_PHETE=" + symflp_PHETE : null),
              (symflp_PHETEP != null ? "symflp_PHETEP=" + symflp_PHETEP : null))
          + "}";
    }
  }
}
