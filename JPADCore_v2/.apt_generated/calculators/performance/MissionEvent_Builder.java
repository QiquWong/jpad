// Autogenerated code. Do not modify.
package calculators.performance;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import configuration.enumerations.EngineOperatingConditionEnum;
import java.util.EnumSet;
import java.util.Objects;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link MissionEvent.Builder},
 * derived from the API of {@link MissionEvent}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class MissionEvent_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static MissionEvent.Builder from(MissionEvent value) {
    return new MissionEvent.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    DESCRIPTION("description"),
    TIME("time"),
    COEFFICIENT_LIFT_MAX("coefficientLiftMax"),
    COMMANDED_SPEED("commandedSpeed"),
    COMMANDED_FLIGHTPATH_ANGLE("commandedFlightpathAngle"),
    COMMANDED_HEADING_ANGLE("commandedHeadingAngle"),
    WIND_SPEED_XE("windSpeedXE"),
    WIND_SPEED_YE("windSpeedYE"),
    WIND_SPEED_ZE("windSpeedZE"),
    ENGINE_CONDITION("engineCondition"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String description;
  private Double time;
  private Double coefficientLiftMax;
  private Double commandedSpeed;
  private Double commandedFlightpathAngle;
  private Double commandedHeadingAngle;
  private Double windSpeedXE;
  private Double windSpeedYE;
  private Double windSpeedZE;
  private EngineOperatingConditionEnum engineCondition;
  private final EnumSet<MissionEvent_Builder.Property> _unsetProperties =
      EnumSet.allOf(MissionEvent_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link MissionEvent#getDescription()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public MissionEvent.Builder setDescription(String description) {
    this.description = Preconditions.checkNotNull(description);
    _unsetProperties.remove(MissionEvent_Builder.Property.DESCRIPTION);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getDescription()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapDescription(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDescription(mapper.apply(getDescription()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getDescription()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDescription() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.DESCRIPTION),
        "description not set");
    return description;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getTime()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code time} is null
   */
  public MissionEvent.Builder setTime(Double time) {
    this.time = Preconditions.checkNotNull(time);
    _unsetProperties.remove(MissionEvent_Builder.Property.TIME);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getTime()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapTime(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTime(mapper.apply(getTime()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getTime()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getTime() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.TIME), "time not set");
    return time;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getCoefficientLiftMax()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code coefficientLiftMax} is null
   */
  public MissionEvent.Builder setCoefficientLiftMax(Double coefficientLiftMax) {
    this.coefficientLiftMax = Preconditions.checkNotNull(coefficientLiftMax);
    _unsetProperties.remove(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getCoefficientLiftMax()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapCoefficientLiftMax(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCoefficientLiftMax(mapper.apply(getCoefficientLiftMax()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getCoefficientLiftMax()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getCoefficientLiftMax() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX),
        "coefficientLiftMax not set");
    return coefficientLiftMax;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getCommandedSpeed()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code commandedSpeed} is null
   */
  public MissionEvent.Builder setCommandedSpeed(Double commandedSpeed) {
    this.commandedSpeed = Preconditions.checkNotNull(commandedSpeed);
    _unsetProperties.remove(MissionEvent_Builder.Property.COMMANDED_SPEED);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getCommandedSpeed()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapCommandedSpeed(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommandedSpeed(mapper.apply(getCommandedSpeed()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getCommandedSpeed()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getCommandedSpeed() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_SPEED),
        "commandedSpeed not set");
    return commandedSpeed;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getCommandedFlightpathAngle()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code commandedFlightpathAngle} is null
   */
  public MissionEvent.Builder setCommandedFlightpathAngle(Double commandedFlightpathAngle) {
    this.commandedFlightpathAngle = Preconditions.checkNotNull(commandedFlightpathAngle);
    _unsetProperties.remove(MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getCommandedFlightpathAngle()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapCommandedFlightpathAngle(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommandedFlightpathAngle(mapper.apply(getCommandedFlightpathAngle()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getCommandedFlightpathAngle()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getCommandedFlightpathAngle() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE),
        "commandedFlightpathAngle not set");
    return commandedFlightpathAngle;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getCommandedHeadingAngle()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code commandedHeadingAngle} is null
   */
  public MissionEvent.Builder setCommandedHeadingAngle(Double commandedHeadingAngle) {
    this.commandedHeadingAngle = Preconditions.checkNotNull(commandedHeadingAngle);
    _unsetProperties.remove(MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getCommandedHeadingAngle()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapCommandedHeadingAngle(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCommandedHeadingAngle(mapper.apply(getCommandedHeadingAngle()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getCommandedHeadingAngle()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getCommandedHeadingAngle() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE),
        "commandedHeadingAngle not set");
    return commandedHeadingAngle;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getWindSpeedXE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code windSpeedXE} is null
   */
  public MissionEvent.Builder setWindSpeedXE(Double windSpeedXE) {
    this.windSpeedXE = Preconditions.checkNotNull(windSpeedXE);
    _unsetProperties.remove(MissionEvent_Builder.Property.WIND_SPEED_XE);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getWindSpeedXE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapWindSpeedXE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWindSpeedXE(mapper.apply(getWindSpeedXE()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getWindSpeedXE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWindSpeedXE() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_XE),
        "windSpeedXE not set");
    return windSpeedXE;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getWindSpeedYE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code windSpeedYE} is null
   */
  public MissionEvent.Builder setWindSpeedYE(Double windSpeedYE) {
    this.windSpeedYE = Preconditions.checkNotNull(windSpeedYE);
    _unsetProperties.remove(MissionEvent_Builder.Property.WIND_SPEED_YE);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getWindSpeedYE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapWindSpeedYE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWindSpeedYE(mapper.apply(getWindSpeedYE()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getWindSpeedYE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWindSpeedYE() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_YE),
        "windSpeedYE not set");
    return windSpeedYE;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getWindSpeedZE()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code windSpeedZE} is null
   */
  public MissionEvent.Builder setWindSpeedZE(Double windSpeedZE) {
    this.windSpeedZE = Preconditions.checkNotNull(windSpeedZE);
    _unsetProperties.remove(MissionEvent_Builder.Property.WIND_SPEED_ZE);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getWindSpeedZE()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapWindSpeedZE(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWindSpeedZE(mapper.apply(getWindSpeedZE()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getWindSpeedZE()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getWindSpeedZE() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_ZE),
        "windSpeedZE not set");
    return windSpeedZE;
  }

  /**
   * Sets the value to be returned by {@link MissionEvent#getEngineCondition()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code engineCondition} is null
   */
  public MissionEvent.Builder setEngineCondition(EngineOperatingConditionEnum engineCondition) {
    this.engineCondition = Preconditions.checkNotNull(engineCondition);
    _unsetProperties.remove(MissionEvent_Builder.Property.ENGINE_CONDITION);
    return (MissionEvent.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link MissionEvent#getEngineCondition()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public MissionEvent.Builder mapEngineCondition(
      UnaryOperator<EngineOperatingConditionEnum> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEngineCondition(mapper.apply(getEngineCondition()));
  }

  /**
   * Returns the value that will be returned by {@link MissionEvent#getEngineCondition()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public EngineOperatingConditionEnum getEngineCondition() {
    Preconditions.checkState(
        !_unsetProperties.contains(MissionEvent_Builder.Property.ENGINE_CONDITION),
        "engineCondition not set");
    return engineCondition;
  }

  /**
   * Sets all property values using the given {@code MissionEvent} as a template.
   */
  public MissionEvent.Builder mergeFrom(MissionEvent value) {
    MissionEvent_Builder _defaults = new MissionEvent.Builder();
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.DESCRIPTION)
        || !value.getDescription().equals(_defaults.getDescription())) {
      setDescription(value.getDescription());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.TIME)
        || !value.getTime().equals(_defaults.getTime())) {
      setTime(value.getTime());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX)
        || !value.getCoefficientLiftMax().equals(_defaults.getCoefficientLiftMax())) {
      setCoefficientLiftMax(value.getCoefficientLiftMax());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_SPEED)
        || !value.getCommandedSpeed().equals(_defaults.getCommandedSpeed())) {
      setCommandedSpeed(value.getCommandedSpeed());
    }
    if (_defaults._unsetProperties.contains(
            MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE)
        || !value.getCommandedFlightpathAngle().equals(_defaults.getCommandedFlightpathAngle())) {
      setCommandedFlightpathAngle(value.getCommandedFlightpathAngle());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE)
        || !value.getCommandedHeadingAngle().equals(_defaults.getCommandedHeadingAngle())) {
      setCommandedHeadingAngle(value.getCommandedHeadingAngle());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_XE)
        || !value.getWindSpeedXE().equals(_defaults.getWindSpeedXE())) {
      setWindSpeedXE(value.getWindSpeedXE());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_YE)
        || !value.getWindSpeedYE().equals(_defaults.getWindSpeedYE())) {
      setWindSpeedYE(value.getWindSpeedYE());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_ZE)
        || !value.getWindSpeedZE().equals(_defaults.getWindSpeedZE())) {
      setWindSpeedZE(value.getWindSpeedZE());
    }
    if (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.ENGINE_CONDITION)
        || !value.getEngineCondition().equals(_defaults.getEngineCondition())) {
      setEngineCondition(value.getEngineCondition());
    }
    return (MissionEvent.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public MissionEvent.Builder mergeFrom(MissionEvent.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    MissionEvent_Builder base = (MissionEvent_Builder) template;
    MissionEvent_Builder _defaults = new MissionEvent.Builder();
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.DESCRIPTION)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.DESCRIPTION)
            || !template.getDescription().equals(_defaults.getDescription()))) {
      setDescription(template.getDescription());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.TIME)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.TIME)
            || !template.getTime().equals(_defaults.getTime()))) {
      setTime(template.getTime());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX)
            || !template.getCoefficientLiftMax().equals(_defaults.getCoefficientLiftMax()))) {
      setCoefficientLiftMax(template.getCoefficientLiftMax());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_SPEED)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_SPEED)
            || !template.getCommandedSpeed().equals(_defaults.getCommandedSpeed()))) {
      setCommandedSpeed(template.getCommandedSpeed());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE)
        && (_defaults._unsetProperties.contains(
                MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE)
            || !template
                .getCommandedFlightpathAngle()
                .equals(_defaults.getCommandedFlightpathAngle()))) {
      setCommandedFlightpathAngle(template.getCommandedFlightpathAngle());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE)
        && (_defaults._unsetProperties.contains(
                MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE)
            || !template.getCommandedHeadingAngle().equals(_defaults.getCommandedHeadingAngle()))) {
      setCommandedHeadingAngle(template.getCommandedHeadingAngle());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_XE)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_XE)
            || !template.getWindSpeedXE().equals(_defaults.getWindSpeedXE()))) {
      setWindSpeedXE(template.getWindSpeedXE());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_YE)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_YE)
            || !template.getWindSpeedYE().equals(_defaults.getWindSpeedYE()))) {
      setWindSpeedYE(template.getWindSpeedYE());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_ZE)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_ZE)
            || !template.getWindSpeedZE().equals(_defaults.getWindSpeedZE()))) {
      setWindSpeedZE(template.getWindSpeedZE());
    }
    if (!base._unsetProperties.contains(MissionEvent_Builder.Property.ENGINE_CONDITION)
        && (_defaults._unsetProperties.contains(MissionEvent_Builder.Property.ENGINE_CONDITION)
            || !template.getEngineCondition().equals(_defaults.getEngineCondition()))) {
      setEngineCondition(template.getEngineCondition());
    }
    return (MissionEvent.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public MissionEvent.Builder clear() {
    MissionEvent_Builder _defaults = new MissionEvent.Builder();
    description = _defaults.description;
    time = _defaults.time;
    coefficientLiftMax = _defaults.coefficientLiftMax;
    commandedSpeed = _defaults.commandedSpeed;
    commandedFlightpathAngle = _defaults.commandedFlightpathAngle;
    commandedHeadingAngle = _defaults.commandedHeadingAngle;
    windSpeedXE = _defaults.windSpeedXE;
    windSpeedYE = _defaults.windSpeedYE;
    windSpeedZE = _defaults.windSpeedZE;
    engineCondition = _defaults.engineCondition;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (MissionEvent.Builder) this;
  }

  /**
   * Returns a newly-created {@link MissionEvent} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public MissionEvent build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new MissionEvent_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link MissionEvent}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public MissionEvent buildPartial() {
    return new MissionEvent_Builder.Partial(this);
  }

  private static final class Value implements MissionEvent {
    private final String description;
    private final Double time;
    private final Double coefficientLiftMax;
    private final Double commandedSpeed;
    private final Double commandedFlightpathAngle;
    private final Double commandedHeadingAngle;
    private final Double windSpeedXE;
    private final Double windSpeedYE;
    private final Double windSpeedZE;
    private final EngineOperatingConditionEnum engineCondition;

    private Value(MissionEvent_Builder builder) {
      this.description = builder.description;
      this.time = builder.time;
      this.coefficientLiftMax = builder.coefficientLiftMax;
      this.commandedSpeed = builder.commandedSpeed;
      this.commandedFlightpathAngle = builder.commandedFlightpathAngle;
      this.commandedHeadingAngle = builder.commandedHeadingAngle;
      this.windSpeedXE = builder.windSpeedXE;
      this.windSpeedYE = builder.windSpeedYE;
      this.windSpeedZE = builder.windSpeedZE;
      this.engineCondition = builder.engineCondition;
    }

    @Override
    public String getDescription() {
      return description;
    }

    @Override
    public Double getTime() {
      return time;
    }

    @Override
    public Double getCoefficientLiftMax() {
      return coefficientLiftMax;
    }

    @Override
    public Double getCommandedSpeed() {
      return commandedSpeed;
    }

    @Override
    public Double getCommandedFlightpathAngle() {
      return commandedFlightpathAngle;
    }

    @Override
    public Double getCommandedHeadingAngle() {
      return commandedHeadingAngle;
    }

    @Override
    public Double getWindSpeedXE() {
      return windSpeedXE;
    }

    @Override
    public Double getWindSpeedYE() {
      return windSpeedYE;
    }

    @Override
    public Double getWindSpeedZE() {
      return windSpeedZE;
    }

    @Override
    public EngineOperatingConditionEnum getEngineCondition() {
      return engineCondition;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof MissionEvent_Builder.Value)) {
        return false;
      }
      MissionEvent_Builder.Value other = (MissionEvent_Builder.Value) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(time, other.time)
          && Objects.equals(coefficientLiftMax, other.coefficientLiftMax)
          && Objects.equals(commandedSpeed, other.commandedSpeed)
          && Objects.equals(commandedFlightpathAngle, other.commandedFlightpathAngle)
          && Objects.equals(commandedHeadingAngle, other.commandedHeadingAngle)
          && Objects.equals(windSpeedXE, other.windSpeedXE)
          && Objects.equals(windSpeedYE, other.windSpeedYE)
          && Objects.equals(windSpeedZE, other.windSpeedZE)
          && Objects.equals(engineCondition, other.engineCondition);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          time,
          coefficientLiftMax,
          commandedSpeed,
          commandedFlightpathAngle,
          commandedHeadingAngle,
          windSpeedXE,
          windSpeedYE,
          windSpeedZE,
          engineCondition);
    }

    @Override
    public String toString() {
      return "MissionEvent{"
          + "description="
          + description
          + ", "
          + "time="
          + time
          + ", "
          + "coefficientLiftMax="
          + coefficientLiftMax
          + ", "
          + "commandedSpeed="
          + commandedSpeed
          + ", "
          + "commandedFlightpathAngle="
          + commandedFlightpathAngle
          + ", "
          + "commandedHeadingAngle="
          + commandedHeadingAngle
          + ", "
          + "windSpeedXE="
          + windSpeedXE
          + ", "
          + "windSpeedYE="
          + windSpeedYE
          + ", "
          + "windSpeedZE="
          + windSpeedZE
          + ", "
          + "engineCondition="
          + engineCondition
          + "}";
    }
  }

  private static final class Partial implements MissionEvent {
    private final String description;
    private final Double time;
    private final Double coefficientLiftMax;
    private final Double commandedSpeed;
    private final Double commandedFlightpathAngle;
    private final Double commandedHeadingAngle;
    private final Double windSpeedXE;
    private final Double windSpeedYE;
    private final Double windSpeedZE;
    private final EngineOperatingConditionEnum engineCondition;
    private final EnumSet<MissionEvent_Builder.Property> _unsetProperties;

    Partial(MissionEvent_Builder builder) {
      this.description = builder.description;
      this.time = builder.time;
      this.coefficientLiftMax = builder.coefficientLiftMax;
      this.commandedSpeed = builder.commandedSpeed;
      this.commandedFlightpathAngle = builder.commandedFlightpathAngle;
      this.commandedHeadingAngle = builder.commandedHeadingAngle;
      this.windSpeedXE = builder.windSpeedXE;
      this.windSpeedYE = builder.windSpeedYE;
      this.windSpeedZE = builder.windSpeedZE;
      this.engineCondition = builder.engineCondition;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getDescription() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.DESCRIPTION)) {
        throw new UnsupportedOperationException("description not set");
      }
      return description;
    }

    @Override
    public Double getTime() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.TIME)) {
        throw new UnsupportedOperationException("time not set");
      }
      return time;
    }

    @Override
    public Double getCoefficientLiftMax() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX)) {
        throw new UnsupportedOperationException("coefficientLiftMax not set");
      }
      return coefficientLiftMax;
    }

    @Override
    public Double getCommandedSpeed() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_SPEED)) {
        throw new UnsupportedOperationException("commandedSpeed not set");
      }
      return commandedSpeed;
    }

    @Override
    public Double getCommandedFlightpathAngle() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE)) {
        throw new UnsupportedOperationException("commandedFlightpathAngle not set");
      }
      return commandedFlightpathAngle;
    }

    @Override
    public Double getCommandedHeadingAngle() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE)) {
        throw new UnsupportedOperationException("commandedHeadingAngle not set");
      }
      return commandedHeadingAngle;
    }

    @Override
    public Double getWindSpeedXE() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_XE)) {
        throw new UnsupportedOperationException("windSpeedXE not set");
      }
      return windSpeedXE;
    }

    @Override
    public Double getWindSpeedYE() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_YE)) {
        throw new UnsupportedOperationException("windSpeedYE not set");
      }
      return windSpeedYE;
    }

    @Override
    public Double getWindSpeedZE() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_ZE)) {
        throw new UnsupportedOperationException("windSpeedZE not set");
      }
      return windSpeedZE;
    }

    @Override
    public EngineOperatingConditionEnum getEngineCondition() {
      if (_unsetProperties.contains(MissionEvent_Builder.Property.ENGINE_CONDITION)) {
        throw new UnsupportedOperationException("engineCondition not set");
      }
      return engineCondition;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof MissionEvent_Builder.Partial)) {
        return false;
      }
      MissionEvent_Builder.Partial other = (MissionEvent_Builder.Partial) obj;
      return Objects.equals(description, other.description)
          && Objects.equals(time, other.time)
          && Objects.equals(coefficientLiftMax, other.coefficientLiftMax)
          && Objects.equals(commandedSpeed, other.commandedSpeed)
          && Objects.equals(commandedFlightpathAngle, other.commandedFlightpathAngle)
          && Objects.equals(commandedHeadingAngle, other.commandedHeadingAngle)
          && Objects.equals(windSpeedXE, other.windSpeedXE)
          && Objects.equals(windSpeedYE, other.windSpeedYE)
          && Objects.equals(windSpeedZE, other.windSpeedZE)
          && Objects.equals(engineCondition, other.engineCondition)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          description,
          time,
          coefficientLiftMax,
          commandedSpeed,
          commandedFlightpathAngle,
          commandedHeadingAngle,
          windSpeedXE,
          windSpeedYE,
          windSpeedZE,
          engineCondition,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial MissionEvent{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(MissionEvent_Builder.Property.DESCRIPTION)
                  ? "description=" + description
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.TIME)
                  ? "time=" + time
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.COEFFICIENT_LIFT_MAX)
                  ? "coefficientLiftMax=" + coefficientLiftMax
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_SPEED)
                  ? "commandedSpeed=" + commandedSpeed
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_FLIGHTPATH_ANGLE)
                  ? "commandedFlightpathAngle=" + commandedFlightpathAngle
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.COMMANDED_HEADING_ANGLE)
                  ? "commandedHeadingAngle=" + commandedHeadingAngle
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_XE)
                  ? "windSpeedXE=" + windSpeedXE
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_YE)
                  ? "windSpeedYE=" + windSpeedYE
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.WIND_SPEED_ZE)
                  ? "windSpeedZE=" + windSpeedZE
                  : null),
              (!_unsetProperties.contains(MissionEvent_Builder.Property.ENGINE_CONDITION)
                  ? "engineCondition=" + engineCondition
                  : null))
          + "}";
    }
  }
}
