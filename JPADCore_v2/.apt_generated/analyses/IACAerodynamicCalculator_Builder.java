// Autogenerated code. Do not modify.
package analyses;

import aircraft.components.Aircraft;
import analyses.IACAerodynamicCalculator;
import analyses.OperatingConditions;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import configuration.enumerations.AerodynamicAndStabilityEnum;
import configuration.enumerations.AerodynamicAndStabilityPlotEnum;
import configuration.enumerations.ComponentEnum;
import configuration.enumerations.ConditionEnum;
import configuration.enumerations.MethodEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.measure.quantity.Angle;
import javax.measure.quantity.Length;
import org.jscience.physics.amount.Amount;
import standaloneutils.MyInterpolatingFunction;

/**
 * Auto-generated superclass of {@link IACAerodynamicCalculator.Builder},
 * derived from the API of {@link IACAerodynamicCalculator}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IACAerodynamicCalculator_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static IACAerodynamicCalculator.Builder from(IACAerodynamicCalculator value) {
    return new IACAerodynamicCalculator.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    THE_AIRCRAFT("theAircraft"),
    THE_OPERATING_CONDITIONS("theOperatingConditions"),
    CURRENT_CONDITION("currentCondition"),
    ZCG_LANDING_GEAR("ZCGLandingGear"),
    LANDING_GEAR_DRAG_COEFFICIENT("landingGearDragCoefficient"),
    ALPHA_BODY_INITIAL("alphaBodyInitial"),
    ALPHA_BODY_FINAL("alphaBodyFinal"),
    NUMBER_OF_ALPHAS_BODY("numberOfAlphasBody"),
    BETA_INITIAL("betaInitial"),
    BETA_FINAL("betaFinal"),
    NUMBER_OF_BETA("numberOfBeta"),
    WING_NUMBER_OF_POINT_SEMI_SPAN_WISE("wingNumberOfPointSemiSpanWise"),
    H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE("HTailNumberOfPointSemiSpanWise"),
    V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE("VTailNumberOfPointSemiSpanWise"),
    DOWNWASH_CONSTANT("downwashConstant"),
    DYNAMIC_PRESSURE_RATIO("dynamicPressureRatio"),
    TAU_ELEVATOR_FUNCTION("tauElevatorFunction"),
    TAU_RUDDER_FUNCTION("tauRudderFunction"),
    FUSELAGE_EFFECT_ON_WING_LIFT_CURVE("fuselageEffectOnWingLiftCurve"),
    WING_PENDULAR_STABILITY("wingPendularStability"),
    C_D0_MISCELLANEOUS("CD0Miscellaneous"),
    WING_MOMENTUM_POLE("wingMomentumPole"),
    H_TAIL_MOMENTUM_POLE("HTailMomentumPole"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private Aircraft theAircraft;
  private OperatingConditions theOperatingConditions;
  private ConditionEnum currentCondition;
  private final LinkedHashMap<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>
      componentTaskList = new LinkedHashMap<>();
  private final ArrayList<AerodynamicAndStabilityPlotEnum> plotList = new ArrayList<>();
  private final ArrayList<Double> XCGAircraft = new ArrayList<>();
  private final ArrayList<Double> ZCGAircraft = new ArrayList<>();
  private Amount<Length> ZCGLandingGear;
  private Double landingGearDragCoefficient;
  private Amount<Angle> alphaBodyInitial;
  private Amount<Angle> alphaBodyFinal;
  private int numberOfAlphasBody;
  private Amount<Angle> betaInitial;
  private Amount<Angle> betaFinal;
  private int numberOfBeta;
  private int wingNumberOfPointSemiSpanWise;
  private int HTailNumberOfPointSemiSpanWise;
  private int VTailNumberOfPointSemiSpanWise;
  private final ArrayList<Amount<Angle>> alphaWingForDistribution = new ArrayList<>();
  private final ArrayList<Amount<Angle>> alphaHorizontalTailForDistribution = new ArrayList<>();
  private final ArrayList<Amount<Angle>> alphaVerticalTailForDistribution = new ArrayList<>();
  private Boolean downwashConstant;
  private Double dynamicPressureRatio;
  private MyInterpolatingFunction tauElevatorFunction;
  private MyInterpolatingFunction tauRudderFunction;
  private final ArrayList<Amount<Angle>> deltaElevatorList = new ArrayList<>();
  private final ArrayList<Amount<Angle>> deltaRudderList = new ArrayList<>();
  private Boolean fuselageEffectOnWingLiftCurve;
  private Boolean wingPendularStability;
  private Double CD0Miscellaneous;
  private Amount<Length> wingMomentumPole;
  private Amount<Length> HTailMomentumPole;
  private final EnumSet<IACAerodynamicCalculator_Builder.Property> _unsetProperties =
      EnumSet.allOf(IACAerodynamicCalculator_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTheAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code theAircraft} is null
   */
  public IACAerodynamicCalculator.Builder setTheAircraft(Aircraft theAircraft) {
    this.theAircraft = Preconditions.checkNotNull(theAircraft);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTheAircraft()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTheAircraft(UnaryOperator<Aircraft> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTheAircraft(mapper.apply(getTheAircraft()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTheAircraft()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Aircraft getTheAircraft() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT),
        "theAircraft not set");
    return theAircraft;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTheOperatingConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code theOperatingConditions} is null
   */
  public IACAerodynamicCalculator.Builder setTheOperatingConditions(
      OperatingConditions theOperatingConditions) {
    this.theOperatingConditions = Preconditions.checkNotNull(theOperatingConditions);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTheOperatingConditions()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTheOperatingConditions(
      UnaryOperator<OperatingConditions> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTheOperatingConditions(mapper.apply(getTheOperatingConditions()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTheOperatingConditions()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public OperatingConditions getTheOperatingConditions() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS),
        "theOperatingConditions not set");
    return theOperatingConditions;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getCurrentCondition()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code currentCondition} is null
   */
  public IACAerodynamicCalculator.Builder setCurrentCondition(ConditionEnum currentCondition) {
    this.currentCondition = Preconditions.checkNotNull(currentCondition);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getCurrentCondition()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapCurrentCondition(UnaryOperator<ConditionEnum> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCurrentCondition(mapper.apply(getCurrentCondition()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getCurrentCondition()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public ConditionEnum getCurrentCondition() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION),
        "currentCondition not set");
    return currentCondition;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACAerodynamicCalculator.Builder putComponentTaskList(
      ComponentEnum key, Map<AerodynamicAndStabilityEnum, MethodEnum> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    componentTaskList.put(key, value);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACAerodynamicCalculator.Builder putAllComponentTaskList(
      Map<? extends ComponentEnum, ? extends Map<AerodynamicAndStabilityEnum, MethodEnum>> map) {
    for (Map.Entry<? extends ComponentEnum, ? extends Map<AerodynamicAndStabilityEnum, MethodEnum>>
        entry : map.entrySet()) {
      putComponentTaskList(entry.getKey(), entry.getValue());
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACAerodynamicCalculator.Builder removeComponentTaskList(ComponentEnum key) {
    Preconditions.checkNotNull(key);
    componentTaskList.remove(key);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateComponentTaskList(
      Consumer<? super Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>> mutator) {
    // If putComponentTaskList is overridden, this method will be updated to delegate to it
    mutator.accept(componentTaskList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearComponentTaskList() {
    componentTaskList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>> getComponentTaskList() {
    return Collections.unmodifiableMap(componentTaskList);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addPlotList(AerodynamicAndStabilityPlotEnum element) {
    this.plotList.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addPlotList(AerodynamicAndStabilityPlotEnum... elements) {
    plotList.ensureCapacity(plotList.size() + elements.length);
    for (AerodynamicAndStabilityPlotEnum element : elements) {
      addPlotList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllPlotList(
      Iterable<? extends AerodynamicAndStabilityPlotEnum> elements) {
    if (elements instanceof Collection) {
      plotList.ensureCapacity(plotList.size() + ((Collection<?>) elements).size());
    }
    for (AerodynamicAndStabilityPlotEnum element : elements) {
      addPlotList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getPlotList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutatePlotList(
      Consumer<? super List<AerodynamicAndStabilityPlotEnum>> mutator) {
    // If addPlotList is overridden, this method will be updated to delegate to it
    mutator.accept(plotList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getPlotList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearPlotList() {
    this.plotList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getPlotList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<AerodynamicAndStabilityPlotEnum> getPlotList() {
    return Collections.unmodifiableList(plotList);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addXCGAircraft(double element) {
    this.XCGAircraft.add(element);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addXCGAircraft(double... elements) {
    XCGAircraft.ensureCapacity(XCGAircraft.size() + elements.length);
    for (double element : elements) {
      addXCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllXCGAircraft(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      XCGAircraft.ensureCapacity(XCGAircraft.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addXCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateXCGAircraft(
      Consumer<? super List<Double>> mutator) {
    // If addXCGAircraft is overridden, this method will be updated to delegate to it
    mutator.accept(XCGAircraft);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearXCGAircraft() {
    this.XCGAircraft.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getXCGAircraft()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getXCGAircraft() {
    return Collections.unmodifiableList(XCGAircraft);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addZCGAircraft(double element) {
    this.ZCGAircraft.add(element);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addZCGAircraft(double... elements) {
    ZCGAircraft.ensureCapacity(ZCGAircraft.size() + elements.length);
    for (double element : elements) {
      addZCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllZCGAircraft(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      ZCGAircraft.ensureCapacity(ZCGAircraft.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addZCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateZCGAircraft(
      Consumer<? super List<Double>> mutator) {
    // If addZCGAircraft is overridden, this method will be updated to delegate to it
    mutator.accept(ZCGAircraft);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearZCGAircraft() {
    this.ZCGAircraft.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getZCGAircraft()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getZCGAircraft() {
    return Collections.unmodifiableList(ZCGAircraft);
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getZCGLandingGear()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code ZCGLandingGear} is null
   */
  public IACAerodynamicCalculator.Builder setZCGLandingGear(Amount<Length> ZCGLandingGear) {
    this.ZCGLandingGear = Preconditions.checkNotNull(ZCGLandingGear);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getZCGLandingGear()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapZCGLandingGear(UnaryOperator<Amount<Length>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setZCGLandingGear(mapper.apply(getZCGLandingGear()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getZCGLandingGear()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Length> getZCGLandingGear() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR),
        "ZCGLandingGear not set");
    return ZCGLandingGear;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getLandingGearDragCoefficient()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code landingGearDragCoefficient} is null
   */
  public IACAerodynamicCalculator.Builder setLandingGearDragCoefficient(
      Double landingGearDragCoefficient) {
    this.landingGearDragCoefficient = Preconditions.checkNotNull(landingGearDragCoefficient);
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getLandingGearDragCoefficient()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapLandingGearDragCoefficient(
      UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLandingGearDragCoefficient(mapper.apply(getLandingGearDragCoefficient()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getLandingGearDragCoefficient()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getLandingGearDragCoefficient() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT),
        "landingGearDragCoefficient not set");
    return landingGearDragCoefficient;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyInitial()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code alphaBodyInitial} is null
   */
  public IACAerodynamicCalculator.Builder setAlphaBodyInitial(Amount<Angle> alphaBodyInitial) {
    this.alphaBodyInitial = Preconditions.checkNotNull(alphaBodyInitial);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyInitial()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapAlphaBodyInitial(UnaryOperator<Amount<Angle>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAlphaBodyInitial(mapper.apply(getAlphaBodyInitial()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getAlphaBodyInitial()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Angle> getAlphaBodyInitial() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL),
        "alphaBodyInitial not set");
    return alphaBodyInitial;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyFinal()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code alphaBodyFinal} is null
   */
  public IACAerodynamicCalculator.Builder setAlphaBodyFinal(Amount<Angle> alphaBodyFinal) {
    this.alphaBodyFinal = Preconditions.checkNotNull(alphaBodyFinal);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyFinal()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapAlphaBodyFinal(UnaryOperator<Amount<Angle>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAlphaBodyFinal(mapper.apply(getAlphaBodyFinal()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getAlphaBodyFinal()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Angle> getAlphaBodyFinal() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL),
        "alphaBodyFinal not set");
    return alphaBodyFinal;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getNumberOfAlphasBody()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setNumberOfAlphasBody(int numberOfAlphasBody) {
    this.numberOfAlphasBody = numberOfAlphasBody;
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getNumberOfAlphasBody()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapNumberOfAlphasBody(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNumberOfAlphasBody(mapper.apply(getNumberOfAlphasBody()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getNumberOfAlphasBody()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getNumberOfAlphasBody() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY),
        "numberOfAlphasBody not set");
    return numberOfAlphasBody;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getBetaInitial()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code betaInitial} is null
   */
  public IACAerodynamicCalculator.Builder setBetaInitial(Amount<Angle> betaInitial) {
    this.betaInitial = Preconditions.checkNotNull(betaInitial);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.BETA_INITIAL);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getBetaInitial()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapBetaInitial(UnaryOperator<Amount<Angle>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBetaInitial(mapper.apply(getBetaInitial()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getBetaInitial()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Angle> getBetaInitial() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_INITIAL),
        "betaInitial not set");
    return betaInitial;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getBetaFinal()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code betaFinal} is null
   */
  public IACAerodynamicCalculator.Builder setBetaFinal(Amount<Angle> betaFinal) {
    this.betaFinal = Preconditions.checkNotNull(betaFinal);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.BETA_FINAL);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getBetaFinal()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapBetaFinal(UnaryOperator<Amount<Angle>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBetaFinal(mapper.apply(getBetaFinal()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getBetaFinal()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Angle> getBetaFinal() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_FINAL),
        "betaFinal not set");
    return betaFinal;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getNumberOfBeta()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setNumberOfBeta(int numberOfBeta) {
    this.numberOfBeta = numberOfBeta;
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getNumberOfBeta()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapNumberOfBeta(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNumberOfBeta(mapper.apply(getNumberOfBeta()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getNumberOfBeta()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getNumberOfBeta() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA),
        "numberOfBeta not set");
    return numberOfBeta;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getWingNumberOfPointSemiSpanWise()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setWingNumberOfPointSemiSpanWise(
      int wingNumberOfPointSemiSpanWise) {
    this.wingNumberOfPointSemiSpanWise = wingNumberOfPointSemiSpanWise;
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getWingNumberOfPointSemiSpanWise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapWingNumberOfPointSemiSpanWise(
      UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWingNumberOfPointSemiSpanWise(mapper.apply(getWingNumberOfPointSemiSpanWise()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getWingNumberOfPointSemiSpanWise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getWingNumberOfPointSemiSpanWise() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE),
        "wingNumberOfPointSemiSpanWise not set");
    return wingNumberOfPointSemiSpanWise;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getHTailNumberOfPointSemiSpanWise()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setHTailNumberOfPointSemiSpanWise(
      int HTailNumberOfPointSemiSpanWise) {
    this.HTailNumberOfPointSemiSpanWise = HTailNumberOfPointSemiSpanWise;
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getHTailNumberOfPointSemiSpanWise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapHTailNumberOfPointSemiSpanWise(
      UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHTailNumberOfPointSemiSpanWise(mapper.apply(getHTailNumberOfPointSemiSpanWise()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getHTailNumberOfPointSemiSpanWise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getHTailNumberOfPointSemiSpanWise() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE),
        "HTailNumberOfPointSemiSpanWise not set");
    return HTailNumberOfPointSemiSpanWise;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getVTailNumberOfPointSemiSpanWise()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setVTailNumberOfPointSemiSpanWise(
      int VTailNumberOfPointSemiSpanWise) {
    this.VTailNumberOfPointSemiSpanWise = VTailNumberOfPointSemiSpanWise;
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getVTailNumberOfPointSemiSpanWise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapVTailNumberOfPointSemiSpanWise(
      UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVTailNumberOfPointSemiSpanWise(mapper.apply(getVTailNumberOfPointSemiSpanWise()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getVTailNumberOfPointSemiSpanWise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getVTailNumberOfPointSemiSpanWise() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE),
        "VTailNumberOfPointSemiSpanWise not set");
    return VTailNumberOfPointSemiSpanWise;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addAlphaWingForDistribution(Amount<Angle> element) {
    this.alphaWingForDistribution.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAlphaWingForDistribution(Amount<Angle>... elements) {
    alphaWingForDistribution.ensureCapacity(alphaWingForDistribution.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addAlphaWingForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllAlphaWingForDistribution(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      alphaWingForDistribution.ensureCapacity(
          alphaWingForDistribution.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addAlphaWingForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateAlphaWingForDistribution(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addAlphaWingForDistribution is overridden, this method will be updated to delegate to it
    mutator.accept(alphaWingForDistribution);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearAlphaWingForDistribution() {
    this.alphaWingForDistribution.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getAlphaWingForDistribution() {
    return Collections.unmodifiableList(alphaWingForDistribution);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addAlphaHorizontalTailForDistribution(
      Amount<Angle> element) {
    this.alphaHorizontalTailForDistribution.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAlphaHorizontalTailForDistribution(
      Amount<Angle>... elements) {
    alphaHorizontalTailForDistribution.ensureCapacity(
        alphaHorizontalTailForDistribution.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addAlphaHorizontalTailForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllAlphaHorizontalTailForDistribution(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      alphaHorizontalTailForDistribution.ensureCapacity(
          alphaHorizontalTailForDistribution.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addAlphaHorizontalTailForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateAlphaHorizontalTailForDistribution(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addAlphaHorizontalTailForDistribution is overridden, this method will be updated to delegate to it
    mutator.accept(alphaHorizontalTailForDistribution);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearAlphaHorizontalTailForDistribution() {
    this.alphaHorizontalTailForDistribution.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getAlphaHorizontalTailForDistribution() {
    return Collections.unmodifiableList(alphaHorizontalTailForDistribution);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaVerticalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addAlphaVerticalTailForDistribution(
      Amount<Angle> element) {
    this.alphaVerticalTailForDistribution.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaVerticalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAlphaVerticalTailForDistribution(
      Amount<Angle>... elements) {
    alphaVerticalTailForDistribution.ensureCapacity(
        alphaVerticalTailForDistribution.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addAlphaVerticalTailForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaVerticalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllAlphaVerticalTailForDistribution(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      alphaVerticalTailForDistribution.ensureCapacity(
          alphaVerticalTailForDistribution.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addAlphaVerticalTailForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaVerticalTailForDistribution()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateAlphaVerticalTailForDistribution(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addAlphaVerticalTailForDistribution is overridden, this method will be updated to delegate to it
    mutator.accept(alphaVerticalTailForDistribution);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getAlphaVerticalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearAlphaVerticalTailForDistribution() {
    this.alphaVerticalTailForDistribution.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getAlphaVerticalTailForDistribution()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getAlphaVerticalTailForDistribution() {
    return Collections.unmodifiableList(alphaVerticalTailForDistribution);
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getDownwashConstant()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code downwashConstant} is null
   */
  public IACAerodynamicCalculator.Builder setDownwashConstant(Boolean downwashConstant) {
    this.downwashConstant = Preconditions.checkNotNull(downwashConstant);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getDownwashConstant()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapDownwashConstant(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDownwashConstant(mapper.apply(getDownwashConstant()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getDownwashConstant()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Boolean getDownwashConstant() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT),
        "downwashConstant not set");
    return downwashConstant;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getDynamicPressureRatio()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dynamicPressureRatio} is null
   */
  public IACAerodynamicCalculator.Builder setDynamicPressureRatio(Double dynamicPressureRatio) {
    this.dynamicPressureRatio = Preconditions.checkNotNull(dynamicPressureRatio);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getDynamicPressureRatio()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapDynamicPressureRatio(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDynamicPressureRatio(mapper.apply(getDynamicPressureRatio()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getDynamicPressureRatio()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getDynamicPressureRatio() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO),
        "dynamicPressureRatio not set");
    return dynamicPressureRatio;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTauElevatorFunction()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code tauElevatorFunction} is null
   */
  public IACAerodynamicCalculator.Builder setTauElevatorFunction(
      MyInterpolatingFunction tauElevatorFunction) {
    this.tauElevatorFunction = Preconditions.checkNotNull(tauElevatorFunction);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTauElevatorFunction()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTauElevatorFunction(
      UnaryOperator<MyInterpolatingFunction> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTauElevatorFunction(mapper.apply(getTauElevatorFunction()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTauElevatorFunction()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public MyInterpolatingFunction getTauElevatorFunction() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION),
        "tauElevatorFunction not set");
    return tauElevatorFunction;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTauRudderFunction()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code tauRudderFunction} is null
   */
  public IACAerodynamicCalculator.Builder setTauRudderFunction(
      MyInterpolatingFunction tauRudderFunction) {
    this.tauRudderFunction = Preconditions.checkNotNull(tauRudderFunction);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTauRudderFunction()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTauRudderFunction(
      UnaryOperator<MyInterpolatingFunction> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTauRudderFunction(mapper.apply(getTauRudderFunction()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTauRudderFunction()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public MyInterpolatingFunction getTauRudderFunction() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION),
        "tauRudderFunction not set");
    return tauRudderFunction;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addDeltaElevatorList(Amount<Angle> element) {
    this.deltaElevatorList.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addDeltaElevatorList(Amount<Angle>... elements) {
    deltaElevatorList.ensureCapacity(deltaElevatorList.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addDeltaElevatorList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllDeltaElevatorList(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      deltaElevatorList.ensureCapacity(
          deltaElevatorList.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addDeltaElevatorList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateDeltaElevatorList(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addDeltaElevatorList is overridden, this method will be updated to delegate to it
    mutator.accept(deltaElevatorList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearDeltaElevatorList() {
    this.deltaElevatorList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getDeltaElevatorList() {
    return Collections.unmodifiableList(deltaElevatorList);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addDeltaRudderList(Amount<Angle> element) {
    this.deltaRudderList.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addDeltaRudderList(Amount<Angle>... elements) {
    deltaRudderList.ensureCapacity(deltaRudderList.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addDeltaRudderList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllDeltaRudderList(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      deltaRudderList.ensureCapacity(deltaRudderList.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addDeltaRudderList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateDeltaRudderList(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addDeltaRudderList is overridden, this method will be updated to delegate to it
    mutator.accept(deltaRudderList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearDeltaRudderList() {
    this.deltaRudderList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getDeltaRudderList() {
    return Collections.unmodifiableList(deltaRudderList);
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getFuselageEffectOnWingLiftCurve()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fuselageEffectOnWingLiftCurve} is null
   */
  public IACAerodynamicCalculator.Builder setFuselageEffectOnWingLiftCurve(
      Boolean fuselageEffectOnWingLiftCurve) {
    this.fuselageEffectOnWingLiftCurve = Preconditions.checkNotNull(fuselageEffectOnWingLiftCurve);
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getFuselageEffectOnWingLiftCurve()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapFuselageEffectOnWingLiftCurve(
      UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFuselageEffectOnWingLiftCurve(mapper.apply(getFuselageEffectOnWingLiftCurve()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getFuselageEffectOnWingLiftCurve()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Boolean getFuselageEffectOnWingLiftCurve() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE),
        "fuselageEffectOnWingLiftCurve not set");
    return fuselageEffectOnWingLiftCurve;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getWingPendularStability()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wingPendularStability} is null
   */
  public IACAerodynamicCalculator.Builder setWingPendularStability(Boolean wingPendularStability) {
    this.wingPendularStability = Preconditions.checkNotNull(wingPendularStability);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getWingPendularStability()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapWingPendularStability(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWingPendularStability(mapper.apply(getWingPendularStability()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getWingPendularStability()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Boolean getWingPendularStability() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY),
        "wingPendularStability not set");
    return wingPendularStability;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getCD0Miscellaneous()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code CD0Miscellaneous} is null
   */
  public IACAerodynamicCalculator.Builder setCD0Miscellaneous(Double CD0Miscellaneous) {
    this.CD0Miscellaneous = Preconditions.checkNotNull(CD0Miscellaneous);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getCD0Miscellaneous()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapCD0Miscellaneous(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCD0Miscellaneous(mapper.apply(getCD0Miscellaneous()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getCD0Miscellaneous()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getCD0Miscellaneous() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS),
        "CD0Miscellaneous not set");
    return CD0Miscellaneous;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getWingMomentumPole()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wingMomentumPole} is null
   */
  public IACAerodynamicCalculator.Builder setWingMomentumPole(Amount<Length> wingMomentumPole) {
    this.wingMomentumPole = Preconditions.checkNotNull(wingMomentumPole);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getWingMomentumPole()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapWingMomentumPole(
      UnaryOperator<Amount<Length>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWingMomentumPole(mapper.apply(getWingMomentumPole()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getWingMomentumPole()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Length> getWingMomentumPole() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE),
        "wingMomentumPole not set");
    return wingMomentumPole;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getHTailMomentumPole()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code HTailMomentumPole} is null
   */
  public IACAerodynamicCalculator.Builder setHTailMomentumPole(Amount<Length> HTailMomentumPole) {
    this.HTailMomentumPole = Preconditions.checkNotNull(HTailMomentumPole);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getHTailMomentumPole()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapHTailMomentumPole(
      UnaryOperator<Amount<Length>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHTailMomentumPole(mapper.apply(getHTailMomentumPole()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getHTailMomentumPole()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Length> getHTailMomentumPole() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE),
        "HTailMomentumPole not set");
    return HTailMomentumPole;
  }

  /**
   * Sets all property values using the given {@code IACAerodynamicCalculator} as a template.
   */
  public IACAerodynamicCalculator.Builder mergeFrom(IACAerodynamicCalculator value) {
    IACAerodynamicCalculator_Builder _defaults = new IACAerodynamicCalculator.Builder();
    if (_defaults._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
        || !value.getTheAircraft().equals(_defaults.getTheAircraft())) {
      setTheAircraft(value.getTheAircraft());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
        || !value.getTheOperatingConditions().equals(_defaults.getTheOperatingConditions())) {
      setTheOperatingConditions(value.getTheOperatingConditions());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION)
        || !value.getCurrentCondition().equals(_defaults.getCurrentCondition())) {
      setCurrentCondition(value.getCurrentCondition());
    }
    putAllComponentTaskList(value.getComponentTaskList());
    addAllPlotList(value.getPlotList());
    addAllXCGAircraft(value.getXCGAircraft());
    addAllZCGAircraft(value.getZCGAircraft());
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR)
        || !value.getZCGLandingGear().equals(_defaults.getZCGLandingGear())) {
      setZCGLandingGear(value.getZCGLandingGear());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT)
        || !value
            .getLandingGearDragCoefficient()
            .equals(_defaults.getLandingGearDragCoefficient())) {
      setLandingGearDragCoefficient(value.getLandingGearDragCoefficient());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
        || !value.getAlphaBodyInitial().equals(_defaults.getAlphaBodyInitial())) {
      setAlphaBodyInitial(value.getAlphaBodyInitial());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
        || !value.getAlphaBodyFinal().equals(_defaults.getAlphaBodyFinal())) {
      setAlphaBodyFinal(value.getAlphaBodyFinal());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
        || value.getNumberOfAlphasBody() != _defaults.getNumberOfAlphasBody()) {
      setNumberOfAlphasBody(value.getNumberOfAlphasBody());
    }
    if (_defaults._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_INITIAL)
        || !value.getBetaInitial().equals(_defaults.getBetaInitial())) {
      setBetaInitial(value.getBetaInitial());
    }
    if (_defaults._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_FINAL)
        || !value.getBetaFinal().equals(_defaults.getBetaFinal())) {
      setBetaFinal(value.getBetaFinal());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA)
        || value.getNumberOfBeta() != _defaults.getNumberOfBeta()) {
      setNumberOfBeta(value.getNumberOfBeta());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        || value.getWingNumberOfPointSemiSpanWise()
            != _defaults.getWingNumberOfPointSemiSpanWise()) {
      setWingNumberOfPointSemiSpanWise(value.getWingNumberOfPointSemiSpanWise());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        || value.getHTailNumberOfPointSemiSpanWise()
            != _defaults.getHTailNumberOfPointSemiSpanWise()) {
      setHTailNumberOfPointSemiSpanWise(value.getHTailNumberOfPointSemiSpanWise());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        || value.getVTailNumberOfPointSemiSpanWise()
            != _defaults.getVTailNumberOfPointSemiSpanWise()) {
      setVTailNumberOfPointSemiSpanWise(value.getVTailNumberOfPointSemiSpanWise());
    }
    addAllAlphaWingForDistribution(value.getAlphaWingForDistribution());
    addAllAlphaHorizontalTailForDistribution(value.getAlphaHorizontalTailForDistribution());
    addAllAlphaVerticalTailForDistribution(value.getAlphaVerticalTailForDistribution());
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
        || !value.getDownwashConstant().equals(_defaults.getDownwashConstant())) {
      setDownwashConstant(value.getDownwashConstant());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
        || !value.getDynamicPressureRatio().equals(_defaults.getDynamicPressureRatio())) {
      setDynamicPressureRatio(value.getDynamicPressureRatio());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
        || !value.getTauElevatorFunction().equals(_defaults.getTauElevatorFunction())) {
      setTauElevatorFunction(value.getTauElevatorFunction());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
        || !value.getTauRudderFunction().equals(_defaults.getTauRudderFunction())) {
      setTauRudderFunction(value.getTauRudderFunction());
    }
    addAllDeltaElevatorList(value.getDeltaElevatorList());
    addAllDeltaRudderList(value.getDeltaRudderList());
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE)
        || !value
            .getFuselageEffectOnWingLiftCurve()
            .equals(_defaults.getFuselageEffectOnWingLiftCurve())) {
      setFuselageEffectOnWingLiftCurve(value.getFuselageEffectOnWingLiftCurve());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY)
        || !value.getWingPendularStability().equals(_defaults.getWingPendularStability())) {
      setWingPendularStability(value.getWingPendularStability());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS)
        || !value.getCD0Miscellaneous().equals(_defaults.getCD0Miscellaneous())) {
      setCD0Miscellaneous(value.getCD0Miscellaneous());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE)
        || !value.getWingMomentumPole().equals(_defaults.getWingMomentumPole())) {
      setWingMomentumPole(value.getWingMomentumPole());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE)
        || !value.getHTailMomentumPole().equals(_defaults.getHTailMomentumPole())) {
      setHTailMomentumPole(value.getHTailMomentumPole());
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IACAerodynamicCalculator.Builder mergeFrom(IACAerodynamicCalculator.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    IACAerodynamicCalculator_Builder base = (IACAerodynamicCalculator_Builder) template;
    IACAerodynamicCalculator_Builder _defaults = new IACAerodynamicCalculator.Builder();
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
            || !template.getTheAircraft().equals(_defaults.getTheAircraft()))) {
      setTheAircraft(template.getTheAircraft());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
            || !template
                .getTheOperatingConditions()
                .equals(_defaults.getTheOperatingConditions()))) {
      setTheOperatingConditions(template.getTheOperatingConditions());
    }
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION)
            || !template.getCurrentCondition().equals(_defaults.getCurrentCondition()))) {
      setCurrentCondition(template.getCurrentCondition());
    }
    putAllComponentTaskList(((IACAerodynamicCalculator_Builder) template).componentTaskList);
    addAllPlotList(((IACAerodynamicCalculator_Builder) template).plotList);
    addAllXCGAircraft(((IACAerodynamicCalculator_Builder) template).XCGAircraft);
    addAllZCGAircraft(((IACAerodynamicCalculator_Builder) template).ZCGAircraft);
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR)
            || !template.getZCGLandingGear().equals(_defaults.getZCGLandingGear()))) {
      setZCGLandingGear(template.getZCGLandingGear());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT)
            || !template
                .getLandingGearDragCoefficient()
                .equals(_defaults.getLandingGearDragCoefficient()))) {
      setLandingGearDragCoefficient(template.getLandingGearDragCoefficient());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
            || !template.getAlphaBodyInitial().equals(_defaults.getAlphaBodyInitial()))) {
      setAlphaBodyInitial(template.getAlphaBodyInitial());
    }
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
            || !template.getAlphaBodyFinal().equals(_defaults.getAlphaBodyFinal()))) {
      setAlphaBodyFinal(template.getAlphaBodyFinal());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
            || template.getNumberOfAlphasBody() != _defaults.getNumberOfAlphasBody())) {
      setNumberOfAlphasBody(template.getNumberOfAlphasBody());
    }
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_INITIAL)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.BETA_INITIAL)
            || !template.getBetaInitial().equals(_defaults.getBetaInitial()))) {
      setBetaInitial(template.getBetaInitial());
    }
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_FINAL)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.BETA_FINAL)
            || !template.getBetaFinal().equals(_defaults.getBetaFinal()))) {
      setBetaFinal(template.getBetaFinal());
    }
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA)
            || template.getNumberOfBeta() != _defaults.getNumberOfBeta())) {
      setNumberOfBeta(template.getNumberOfBeta());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
            || template.getWingNumberOfPointSemiSpanWise()
                != _defaults.getWingNumberOfPointSemiSpanWise())) {
      setWingNumberOfPointSemiSpanWise(template.getWingNumberOfPointSemiSpanWise());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
            || template.getHTailNumberOfPointSemiSpanWise()
                != _defaults.getHTailNumberOfPointSemiSpanWise())) {
      setHTailNumberOfPointSemiSpanWise(template.getHTailNumberOfPointSemiSpanWise());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
            || template.getVTailNumberOfPointSemiSpanWise()
                != _defaults.getVTailNumberOfPointSemiSpanWise())) {
      setVTailNumberOfPointSemiSpanWise(template.getVTailNumberOfPointSemiSpanWise());
    }
    addAllAlphaWingForDistribution(
        ((IACAerodynamicCalculator_Builder) template).alphaWingForDistribution);
    addAllAlphaHorizontalTailForDistribution(
        ((IACAerodynamicCalculator_Builder) template).alphaHorizontalTailForDistribution);
    addAllAlphaVerticalTailForDistribution(
        ((IACAerodynamicCalculator_Builder) template).alphaVerticalTailForDistribution);
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
            || !template.getDownwashConstant().equals(_defaults.getDownwashConstant()))) {
      setDownwashConstant(template.getDownwashConstant());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
            || !template.getDynamicPressureRatio().equals(_defaults.getDynamicPressureRatio()))) {
      setDynamicPressureRatio(template.getDynamicPressureRatio());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
            || !template.getTauElevatorFunction().equals(_defaults.getTauElevatorFunction()))) {
      setTauElevatorFunction(template.getTauElevatorFunction());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
            || !template.getTauRudderFunction().equals(_defaults.getTauRudderFunction()))) {
      setTauRudderFunction(template.getTauRudderFunction());
    }
    addAllDeltaElevatorList(((IACAerodynamicCalculator_Builder) template).deltaElevatorList);
    addAllDeltaRudderList(((IACAerodynamicCalculator_Builder) template).deltaRudderList);
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE)
            || !template
                .getFuselageEffectOnWingLiftCurve()
                .equals(_defaults.getFuselageEffectOnWingLiftCurve()))) {
      setFuselageEffectOnWingLiftCurve(template.getFuselageEffectOnWingLiftCurve());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY)
            || !template.getWingPendularStability().equals(_defaults.getWingPendularStability()))) {
      setWingPendularStability(template.getWingPendularStability());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS)
            || !template.getCD0Miscellaneous().equals(_defaults.getCD0Miscellaneous()))) {
      setCD0Miscellaneous(template.getCD0Miscellaneous());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE)
            || !template.getWingMomentumPole().equals(_defaults.getWingMomentumPole()))) {
      setWingMomentumPole(template.getWingMomentumPole());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE)
            || !template.getHTailMomentumPole().equals(_defaults.getHTailMomentumPole()))) {
      setHTailMomentumPole(template.getHTailMomentumPole());
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IACAerodynamicCalculator.Builder clear() {
    IACAerodynamicCalculator_Builder _defaults = new IACAerodynamicCalculator.Builder();
    theAircraft = _defaults.theAircraft;
    theOperatingConditions = _defaults.theOperatingConditions;
    currentCondition = _defaults.currentCondition;
    componentTaskList.clear();
    plotList.clear();
    XCGAircraft.clear();
    ZCGAircraft.clear();
    ZCGLandingGear = _defaults.ZCGLandingGear;
    landingGearDragCoefficient = _defaults.landingGearDragCoefficient;
    alphaBodyInitial = _defaults.alphaBodyInitial;
    alphaBodyFinal = _defaults.alphaBodyFinal;
    numberOfAlphasBody = _defaults.numberOfAlphasBody;
    betaInitial = _defaults.betaInitial;
    betaFinal = _defaults.betaFinal;
    numberOfBeta = _defaults.numberOfBeta;
    wingNumberOfPointSemiSpanWise = _defaults.wingNumberOfPointSemiSpanWise;
    HTailNumberOfPointSemiSpanWise = _defaults.HTailNumberOfPointSemiSpanWise;
    VTailNumberOfPointSemiSpanWise = _defaults.VTailNumberOfPointSemiSpanWise;
    alphaWingForDistribution.clear();
    alphaHorizontalTailForDistribution.clear();
    alphaVerticalTailForDistribution.clear();
    downwashConstant = _defaults.downwashConstant;
    dynamicPressureRatio = _defaults.dynamicPressureRatio;
    tauElevatorFunction = _defaults.tauElevatorFunction;
    tauRudderFunction = _defaults.tauRudderFunction;
    deltaElevatorList.clear();
    deltaRudderList.clear();
    fuselageEffectOnWingLiftCurve = _defaults.fuselageEffectOnWingLiftCurve;
    wingPendularStability = _defaults.wingPendularStability;
    CD0Miscellaneous = _defaults.CD0Miscellaneous;
    wingMomentumPole = _defaults.wingMomentumPole;
    HTailMomentumPole = _defaults.HTailMomentumPole;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns a newly-created {@link IACAerodynamicCalculator} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IACAerodynamicCalculator build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IACAerodynamicCalculator_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IACAerodynamicCalculator}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IACAerodynamicCalculator buildPartial() {
    return new IACAerodynamicCalculator_Builder.Partial(this);
  }

  private static final class Value implements IACAerodynamicCalculator {
    private final Aircraft theAircraft;
    private final OperatingConditions theOperatingConditions;
    private final ConditionEnum currentCondition;
    private final Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>
        componentTaskList;
    private final List<AerodynamicAndStabilityPlotEnum> plotList;
    private final List<Double> XCGAircraft;
    private final List<Double> ZCGAircraft;
    private final Amount<Length> ZCGLandingGear;
    private final Double landingGearDragCoefficient;
    private final Amount<Angle> alphaBodyInitial;
    private final Amount<Angle> alphaBodyFinal;
    private final int numberOfAlphasBody;
    private final Amount<Angle> betaInitial;
    private final Amount<Angle> betaFinal;
    private final int numberOfBeta;
    private final int wingNumberOfPointSemiSpanWise;
    private final int HTailNumberOfPointSemiSpanWise;
    private final int VTailNumberOfPointSemiSpanWise;
    private final List<Amount<Angle>> alphaWingForDistribution;
    private final List<Amount<Angle>> alphaHorizontalTailForDistribution;
    private final List<Amount<Angle>> alphaVerticalTailForDistribution;
    private final Boolean downwashConstant;
    private final Double dynamicPressureRatio;
    private final MyInterpolatingFunction tauElevatorFunction;
    private final MyInterpolatingFunction tauRudderFunction;
    private final List<Amount<Angle>> deltaElevatorList;
    private final List<Amount<Angle>> deltaRudderList;
    private final Boolean fuselageEffectOnWingLiftCurve;
    private final Boolean wingPendularStability;
    private final Double CD0Miscellaneous;
    private final Amount<Length> wingMomentumPole;
    private final Amount<Length> HTailMomentumPole;

    private Value(IACAerodynamicCalculator_Builder builder) {
      this.theAircraft = builder.theAircraft;
      this.theOperatingConditions = builder.theOperatingConditions;
      this.currentCondition = builder.currentCondition;
      this.componentTaskList = ImmutableMap.copyOf(builder.componentTaskList);
      this.plotList = ImmutableList.copyOf(builder.plotList);
      this.XCGAircraft = ImmutableList.copyOf(builder.XCGAircraft);
      this.ZCGAircraft = ImmutableList.copyOf(builder.ZCGAircraft);
      this.ZCGLandingGear = builder.ZCGLandingGear;
      this.landingGearDragCoefficient = builder.landingGearDragCoefficient;
      this.alphaBodyInitial = builder.alphaBodyInitial;
      this.alphaBodyFinal = builder.alphaBodyFinal;
      this.numberOfAlphasBody = builder.numberOfAlphasBody;
      this.betaInitial = builder.betaInitial;
      this.betaFinal = builder.betaFinal;
      this.numberOfBeta = builder.numberOfBeta;
      this.wingNumberOfPointSemiSpanWise = builder.wingNumberOfPointSemiSpanWise;
      this.HTailNumberOfPointSemiSpanWise = builder.HTailNumberOfPointSemiSpanWise;
      this.VTailNumberOfPointSemiSpanWise = builder.VTailNumberOfPointSemiSpanWise;
      this.alphaWingForDistribution = ImmutableList.copyOf(builder.alphaWingForDistribution);
      this.alphaHorizontalTailForDistribution =
          ImmutableList.copyOf(builder.alphaHorizontalTailForDistribution);
      this.alphaVerticalTailForDistribution =
          ImmutableList.copyOf(builder.alphaVerticalTailForDistribution);
      this.downwashConstant = builder.downwashConstant;
      this.dynamicPressureRatio = builder.dynamicPressureRatio;
      this.tauElevatorFunction = builder.tauElevatorFunction;
      this.tauRudderFunction = builder.tauRudderFunction;
      this.deltaElevatorList = ImmutableList.copyOf(builder.deltaElevatorList);
      this.deltaRudderList = ImmutableList.copyOf(builder.deltaRudderList);
      this.fuselageEffectOnWingLiftCurve = builder.fuselageEffectOnWingLiftCurve;
      this.wingPendularStability = builder.wingPendularStability;
      this.CD0Miscellaneous = builder.CD0Miscellaneous;
      this.wingMomentumPole = builder.wingMomentumPole;
      this.HTailMomentumPole = builder.HTailMomentumPole;
    }

    @Override
    public Aircraft getTheAircraft() {
      return theAircraft;
    }

    @Override
    public OperatingConditions getTheOperatingConditions() {
      return theOperatingConditions;
    }

    @Override
    public ConditionEnum getCurrentCondition() {
      return currentCondition;
    }

    @Override
    public Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>> getComponentTaskList() {
      return componentTaskList;
    }

    @Override
    public List<AerodynamicAndStabilityPlotEnum> getPlotList() {
      return plotList;
    }

    @Override
    public List<Double> getXCGAircraft() {
      return XCGAircraft;
    }

    @Override
    public List<Double> getZCGAircraft() {
      return ZCGAircraft;
    }

    @Override
    public Amount<Length> getZCGLandingGear() {
      return ZCGLandingGear;
    }

    @Override
    public Double getLandingGearDragCoefficient() {
      return landingGearDragCoefficient;
    }

    @Override
    public Amount<Angle> getAlphaBodyInitial() {
      return alphaBodyInitial;
    }

    @Override
    public Amount<Angle> getAlphaBodyFinal() {
      return alphaBodyFinal;
    }

    @Override
    public int getNumberOfAlphasBody() {
      return numberOfAlphasBody;
    }

    @Override
    public Amount<Angle> getBetaInitial() {
      return betaInitial;
    }

    @Override
    public Amount<Angle> getBetaFinal() {
      return betaFinal;
    }

    @Override
    public int getNumberOfBeta() {
      return numberOfBeta;
    }

    @Override
    public int getWingNumberOfPointSemiSpanWise() {
      return wingNumberOfPointSemiSpanWise;
    }

    @Override
    public int getHTailNumberOfPointSemiSpanWise() {
      return HTailNumberOfPointSemiSpanWise;
    }

    @Override
    public int getVTailNumberOfPointSemiSpanWise() {
      return VTailNumberOfPointSemiSpanWise;
    }

    @Override
    public List<Amount<Angle>> getAlphaWingForDistribution() {
      return alphaWingForDistribution;
    }

    @Override
    public List<Amount<Angle>> getAlphaHorizontalTailForDistribution() {
      return alphaHorizontalTailForDistribution;
    }

    @Override
    public List<Amount<Angle>> getAlphaVerticalTailForDistribution() {
      return alphaVerticalTailForDistribution;
    }

    @Override
    public Boolean getDownwashConstant() {
      return downwashConstant;
    }

    @Override
    public Double getDynamicPressureRatio() {
      return dynamicPressureRatio;
    }

    @Override
    public MyInterpolatingFunction getTauElevatorFunction() {
      return tauElevatorFunction;
    }

    @Override
    public MyInterpolatingFunction getTauRudderFunction() {
      return tauRudderFunction;
    }

    @Override
    public List<Amount<Angle>> getDeltaElevatorList() {
      return deltaElevatorList;
    }

    @Override
    public List<Amount<Angle>> getDeltaRudderList() {
      return deltaRudderList;
    }

    @Override
    public Boolean getFuselageEffectOnWingLiftCurve() {
      return fuselageEffectOnWingLiftCurve;
    }

    @Override
    public Boolean getWingPendularStability() {
      return wingPendularStability;
    }

    @Override
    public Double getCD0Miscellaneous() {
      return CD0Miscellaneous;
    }

    @Override
    public Amount<Length> getWingMomentumPole() {
      return wingMomentumPole;
    }

    @Override
    public Amount<Length> getHTailMomentumPole() {
      return HTailMomentumPole;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACAerodynamicCalculator_Builder.Value)) {
        return false;
      }
      IACAerodynamicCalculator_Builder.Value other = (IACAerodynamicCalculator_Builder.Value) obj;
      return Objects.equals(theAircraft, other.theAircraft)
          && Objects.equals(theOperatingConditions, other.theOperatingConditions)
          && Objects.equals(currentCondition, other.currentCondition)
          && Objects.equals(componentTaskList, other.componentTaskList)
          && Objects.equals(plotList, other.plotList)
          && Objects.equals(XCGAircraft, other.XCGAircraft)
          && Objects.equals(ZCGAircraft, other.ZCGAircraft)
          && Objects.equals(ZCGLandingGear, other.ZCGLandingGear)
          && Objects.equals(landingGearDragCoefficient, other.landingGearDragCoefficient)
          && Objects.equals(alphaBodyInitial, other.alphaBodyInitial)
          && Objects.equals(alphaBodyFinal, other.alphaBodyFinal)
          && Objects.equals(numberOfAlphasBody, other.numberOfAlphasBody)
          && Objects.equals(betaInitial, other.betaInitial)
          && Objects.equals(betaFinal, other.betaFinal)
          && Objects.equals(numberOfBeta, other.numberOfBeta)
          && Objects.equals(wingNumberOfPointSemiSpanWise, other.wingNumberOfPointSemiSpanWise)
          && Objects.equals(HTailNumberOfPointSemiSpanWise, other.HTailNumberOfPointSemiSpanWise)
          && Objects.equals(VTailNumberOfPointSemiSpanWise, other.VTailNumberOfPointSemiSpanWise)
          && Objects.equals(alphaWingForDistribution, other.alphaWingForDistribution)
          && Objects.equals(
              alphaHorizontalTailForDistribution, other.alphaHorizontalTailForDistribution)
          && Objects.equals(
              alphaVerticalTailForDistribution, other.alphaVerticalTailForDistribution)
          && Objects.equals(downwashConstant, other.downwashConstant)
          && Objects.equals(dynamicPressureRatio, other.dynamicPressureRatio)
          && Objects.equals(tauElevatorFunction, other.tauElevatorFunction)
          && Objects.equals(tauRudderFunction, other.tauRudderFunction)
          && Objects.equals(deltaElevatorList, other.deltaElevatorList)
          && Objects.equals(deltaRudderList, other.deltaRudderList)
          && Objects.equals(fuselageEffectOnWingLiftCurve, other.fuselageEffectOnWingLiftCurve)
          && Objects.equals(wingPendularStability, other.wingPendularStability)
          && Objects.equals(CD0Miscellaneous, other.CD0Miscellaneous)
          && Objects.equals(wingMomentumPole, other.wingMomentumPole)
          && Objects.equals(HTailMomentumPole, other.HTailMomentumPole);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          theAircraft,
          theOperatingConditions,
          currentCondition,
          componentTaskList,
          plotList,
          XCGAircraft,
          ZCGAircraft,
          ZCGLandingGear,
          landingGearDragCoefficient,
          alphaBodyInitial,
          alphaBodyFinal,
          numberOfAlphasBody,
          betaInitial,
          betaFinal,
          numberOfBeta,
          wingNumberOfPointSemiSpanWise,
          HTailNumberOfPointSemiSpanWise,
          VTailNumberOfPointSemiSpanWise,
          alphaWingForDistribution,
          alphaHorizontalTailForDistribution,
          alphaVerticalTailForDistribution,
          downwashConstant,
          dynamicPressureRatio,
          tauElevatorFunction,
          tauRudderFunction,
          deltaElevatorList,
          deltaRudderList,
          fuselageEffectOnWingLiftCurve,
          wingPendularStability,
          CD0Miscellaneous,
          wingMomentumPole,
          HTailMomentumPole);
    }

    @Override
    public String toString() {
      return "IACAerodynamicCalculator{"
          + "theAircraft="
          + theAircraft
          + ", "
          + "theOperatingConditions="
          + theOperatingConditions
          + ", "
          + "currentCondition="
          + currentCondition
          + ", "
          + "componentTaskList="
          + componentTaskList
          + ", "
          + "plotList="
          + plotList
          + ", "
          + "XCGAircraft="
          + XCGAircraft
          + ", "
          + "ZCGAircraft="
          + ZCGAircraft
          + ", "
          + "ZCGLandingGear="
          + ZCGLandingGear
          + ", "
          + "landingGearDragCoefficient="
          + landingGearDragCoefficient
          + ", "
          + "alphaBodyInitial="
          + alphaBodyInitial
          + ", "
          + "alphaBodyFinal="
          + alphaBodyFinal
          + ", "
          + "numberOfAlphasBody="
          + numberOfAlphasBody
          + ", "
          + "betaInitial="
          + betaInitial
          + ", "
          + "betaFinal="
          + betaFinal
          + ", "
          + "numberOfBeta="
          + numberOfBeta
          + ", "
          + "wingNumberOfPointSemiSpanWise="
          + wingNumberOfPointSemiSpanWise
          + ", "
          + "HTailNumberOfPointSemiSpanWise="
          + HTailNumberOfPointSemiSpanWise
          + ", "
          + "VTailNumberOfPointSemiSpanWise="
          + VTailNumberOfPointSemiSpanWise
          + ", "
          + "alphaWingForDistribution="
          + alphaWingForDistribution
          + ", "
          + "alphaHorizontalTailForDistribution="
          + alphaHorizontalTailForDistribution
          + ", "
          + "alphaVerticalTailForDistribution="
          + alphaVerticalTailForDistribution
          + ", "
          + "downwashConstant="
          + downwashConstant
          + ", "
          + "dynamicPressureRatio="
          + dynamicPressureRatio
          + ", "
          + "tauElevatorFunction="
          + tauElevatorFunction
          + ", "
          + "tauRudderFunction="
          + tauRudderFunction
          + ", "
          + "deltaElevatorList="
          + deltaElevatorList
          + ", "
          + "deltaRudderList="
          + deltaRudderList
          + ", "
          + "fuselageEffectOnWingLiftCurve="
          + fuselageEffectOnWingLiftCurve
          + ", "
          + "wingPendularStability="
          + wingPendularStability
          + ", "
          + "CD0Miscellaneous="
          + CD0Miscellaneous
          + ", "
          + "wingMomentumPole="
          + wingMomentumPole
          + ", "
          + "HTailMomentumPole="
          + HTailMomentumPole
          + "}";
    }
  }

  private static final class Partial implements IACAerodynamicCalculator {
    private final Aircraft theAircraft;
    private final OperatingConditions theOperatingConditions;
    private final ConditionEnum currentCondition;
    private final Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>
        componentTaskList;
    private final List<AerodynamicAndStabilityPlotEnum> plotList;
    private final List<Double> XCGAircraft;
    private final List<Double> ZCGAircraft;
    private final Amount<Length> ZCGLandingGear;
    private final Double landingGearDragCoefficient;
    private final Amount<Angle> alphaBodyInitial;
    private final Amount<Angle> alphaBodyFinal;
    private final int numberOfAlphasBody;
    private final Amount<Angle> betaInitial;
    private final Amount<Angle> betaFinal;
    private final int numberOfBeta;
    private final int wingNumberOfPointSemiSpanWise;
    private final int HTailNumberOfPointSemiSpanWise;
    private final int VTailNumberOfPointSemiSpanWise;
    private final List<Amount<Angle>> alphaWingForDistribution;
    private final List<Amount<Angle>> alphaHorizontalTailForDistribution;
    private final List<Amount<Angle>> alphaVerticalTailForDistribution;
    private final Boolean downwashConstant;
    private final Double dynamicPressureRatio;
    private final MyInterpolatingFunction tauElevatorFunction;
    private final MyInterpolatingFunction tauRudderFunction;
    private final List<Amount<Angle>> deltaElevatorList;
    private final List<Amount<Angle>> deltaRudderList;
    private final Boolean fuselageEffectOnWingLiftCurve;
    private final Boolean wingPendularStability;
    private final Double CD0Miscellaneous;
    private final Amount<Length> wingMomentumPole;
    private final Amount<Length> HTailMomentumPole;
    private final EnumSet<IACAerodynamicCalculator_Builder.Property> _unsetProperties;

    Partial(IACAerodynamicCalculator_Builder builder) {
      this.theAircraft = builder.theAircraft;
      this.theOperatingConditions = builder.theOperatingConditions;
      this.currentCondition = builder.currentCondition;
      this.componentTaskList = ImmutableMap.copyOf(builder.componentTaskList);
      this.plotList = ImmutableList.copyOf(builder.plotList);
      this.XCGAircraft = ImmutableList.copyOf(builder.XCGAircraft);
      this.ZCGAircraft = ImmutableList.copyOf(builder.ZCGAircraft);
      this.ZCGLandingGear = builder.ZCGLandingGear;
      this.landingGearDragCoefficient = builder.landingGearDragCoefficient;
      this.alphaBodyInitial = builder.alphaBodyInitial;
      this.alphaBodyFinal = builder.alphaBodyFinal;
      this.numberOfAlphasBody = builder.numberOfAlphasBody;
      this.betaInitial = builder.betaInitial;
      this.betaFinal = builder.betaFinal;
      this.numberOfBeta = builder.numberOfBeta;
      this.wingNumberOfPointSemiSpanWise = builder.wingNumberOfPointSemiSpanWise;
      this.HTailNumberOfPointSemiSpanWise = builder.HTailNumberOfPointSemiSpanWise;
      this.VTailNumberOfPointSemiSpanWise = builder.VTailNumberOfPointSemiSpanWise;
      this.alphaWingForDistribution = ImmutableList.copyOf(builder.alphaWingForDistribution);
      this.alphaHorizontalTailForDistribution =
          ImmutableList.copyOf(builder.alphaHorizontalTailForDistribution);
      this.alphaVerticalTailForDistribution =
          ImmutableList.copyOf(builder.alphaVerticalTailForDistribution);
      this.downwashConstant = builder.downwashConstant;
      this.dynamicPressureRatio = builder.dynamicPressureRatio;
      this.tauElevatorFunction = builder.tauElevatorFunction;
      this.tauRudderFunction = builder.tauRudderFunction;
      this.deltaElevatorList = ImmutableList.copyOf(builder.deltaElevatorList);
      this.deltaRudderList = ImmutableList.copyOf(builder.deltaRudderList);
      this.fuselageEffectOnWingLiftCurve = builder.fuselageEffectOnWingLiftCurve;
      this.wingPendularStability = builder.wingPendularStability;
      this.CD0Miscellaneous = builder.CD0Miscellaneous;
      this.wingMomentumPole = builder.wingMomentumPole;
      this.HTailMomentumPole = builder.HTailMomentumPole;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public Aircraft getTheAircraft() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)) {
        throw new UnsupportedOperationException("theAircraft not set");
      }
      return theAircraft;
    }

    @Override
    public OperatingConditions getTheOperatingConditions() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)) {
        throw new UnsupportedOperationException("theOperatingConditions not set");
      }
      return theOperatingConditions;
    }

    @Override
    public ConditionEnum getCurrentCondition() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION)) {
        throw new UnsupportedOperationException("currentCondition not set");
      }
      return currentCondition;
    }

    @Override
    public Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>> getComponentTaskList() {
      return componentTaskList;
    }

    @Override
    public List<AerodynamicAndStabilityPlotEnum> getPlotList() {
      return plotList;
    }

    @Override
    public List<Double> getXCGAircraft() {
      return XCGAircraft;
    }

    @Override
    public List<Double> getZCGAircraft() {
      return ZCGAircraft;
    }

    @Override
    public Amount<Length> getZCGLandingGear() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR)) {
        throw new UnsupportedOperationException("ZCGLandingGear not set");
      }
      return ZCGLandingGear;
    }

    @Override
    public Double getLandingGearDragCoefficient() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT)) {
        throw new UnsupportedOperationException("landingGearDragCoefficient not set");
      }
      return landingGearDragCoefficient;
    }

    @Override
    public Amount<Angle> getAlphaBodyInitial() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)) {
        throw new UnsupportedOperationException("alphaBodyInitial not set");
      }
      return alphaBodyInitial;
    }

    @Override
    public Amount<Angle> getAlphaBodyFinal() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)) {
        throw new UnsupportedOperationException("alphaBodyFinal not set");
      }
      return alphaBodyFinal;
    }

    @Override
    public int getNumberOfAlphasBody() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)) {
        throw new UnsupportedOperationException("numberOfAlphasBody not set");
      }
      return numberOfAlphasBody;
    }

    @Override
    public Amount<Angle> getBetaInitial() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_INITIAL)) {
        throw new UnsupportedOperationException("betaInitial not set");
      }
      return betaInitial;
    }

    @Override
    public Amount<Angle> getBetaFinal() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_FINAL)) {
        throw new UnsupportedOperationException("betaFinal not set");
      }
      return betaFinal;
    }

    @Override
    public int getNumberOfBeta() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA)) {
        throw new UnsupportedOperationException("numberOfBeta not set");
      }
      return numberOfBeta;
    }

    @Override
    public int getWingNumberOfPointSemiSpanWise() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)) {
        throw new UnsupportedOperationException("wingNumberOfPointSemiSpanWise not set");
      }
      return wingNumberOfPointSemiSpanWise;
    }

    @Override
    public int getHTailNumberOfPointSemiSpanWise() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)) {
        throw new UnsupportedOperationException("HTailNumberOfPointSemiSpanWise not set");
      }
      return HTailNumberOfPointSemiSpanWise;
    }

    @Override
    public int getVTailNumberOfPointSemiSpanWise() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)) {
        throw new UnsupportedOperationException("VTailNumberOfPointSemiSpanWise not set");
      }
      return VTailNumberOfPointSemiSpanWise;
    }

    @Override
    public List<Amount<Angle>> getAlphaWingForDistribution() {
      return alphaWingForDistribution;
    }

    @Override
    public List<Amount<Angle>> getAlphaHorizontalTailForDistribution() {
      return alphaHorizontalTailForDistribution;
    }

    @Override
    public List<Amount<Angle>> getAlphaVerticalTailForDistribution() {
      return alphaVerticalTailForDistribution;
    }

    @Override
    public Boolean getDownwashConstant() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)) {
        throw new UnsupportedOperationException("downwashConstant not set");
      }
      return downwashConstant;
    }

    @Override
    public Double getDynamicPressureRatio() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)) {
        throw new UnsupportedOperationException("dynamicPressureRatio not set");
      }
      return dynamicPressureRatio;
    }

    @Override
    public MyInterpolatingFunction getTauElevatorFunction() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)) {
        throw new UnsupportedOperationException("tauElevatorFunction not set");
      }
      return tauElevatorFunction;
    }

    @Override
    public MyInterpolatingFunction getTauRudderFunction() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)) {
        throw new UnsupportedOperationException("tauRudderFunction not set");
      }
      return tauRudderFunction;
    }

    @Override
    public List<Amount<Angle>> getDeltaElevatorList() {
      return deltaElevatorList;
    }

    @Override
    public List<Amount<Angle>> getDeltaRudderList() {
      return deltaRudderList;
    }

    @Override
    public Boolean getFuselageEffectOnWingLiftCurve() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE)) {
        throw new UnsupportedOperationException("fuselageEffectOnWingLiftCurve not set");
      }
      return fuselageEffectOnWingLiftCurve;
    }

    @Override
    public Boolean getWingPendularStability() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY)) {
        throw new UnsupportedOperationException("wingPendularStability not set");
      }
      return wingPendularStability;
    }

    @Override
    public Double getCD0Miscellaneous() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS)) {
        throw new UnsupportedOperationException("CD0Miscellaneous not set");
      }
      return CD0Miscellaneous;
    }

    @Override
    public Amount<Length> getWingMomentumPole() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE)) {
        throw new UnsupportedOperationException("wingMomentumPole not set");
      }
      return wingMomentumPole;
    }

    @Override
    public Amount<Length> getHTailMomentumPole() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE)) {
        throw new UnsupportedOperationException("HTailMomentumPole not set");
      }
      return HTailMomentumPole;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACAerodynamicCalculator_Builder.Partial)) {
        return false;
      }
      IACAerodynamicCalculator_Builder.Partial other =
          (IACAerodynamicCalculator_Builder.Partial) obj;
      return Objects.equals(theAircraft, other.theAircraft)
          && Objects.equals(theOperatingConditions, other.theOperatingConditions)
          && Objects.equals(currentCondition, other.currentCondition)
          && Objects.equals(componentTaskList, other.componentTaskList)
          && Objects.equals(plotList, other.plotList)
          && Objects.equals(XCGAircraft, other.XCGAircraft)
          && Objects.equals(ZCGAircraft, other.ZCGAircraft)
          && Objects.equals(ZCGLandingGear, other.ZCGLandingGear)
          && Objects.equals(landingGearDragCoefficient, other.landingGearDragCoefficient)
          && Objects.equals(alphaBodyInitial, other.alphaBodyInitial)
          && Objects.equals(alphaBodyFinal, other.alphaBodyFinal)
          && Objects.equals(numberOfAlphasBody, other.numberOfAlphasBody)
          && Objects.equals(betaInitial, other.betaInitial)
          && Objects.equals(betaFinal, other.betaFinal)
          && Objects.equals(numberOfBeta, other.numberOfBeta)
          && Objects.equals(wingNumberOfPointSemiSpanWise, other.wingNumberOfPointSemiSpanWise)
          && Objects.equals(HTailNumberOfPointSemiSpanWise, other.HTailNumberOfPointSemiSpanWise)
          && Objects.equals(VTailNumberOfPointSemiSpanWise, other.VTailNumberOfPointSemiSpanWise)
          && Objects.equals(alphaWingForDistribution, other.alphaWingForDistribution)
          && Objects.equals(
              alphaHorizontalTailForDistribution, other.alphaHorizontalTailForDistribution)
          && Objects.equals(
              alphaVerticalTailForDistribution, other.alphaVerticalTailForDistribution)
          && Objects.equals(downwashConstant, other.downwashConstant)
          && Objects.equals(dynamicPressureRatio, other.dynamicPressureRatio)
          && Objects.equals(tauElevatorFunction, other.tauElevatorFunction)
          && Objects.equals(tauRudderFunction, other.tauRudderFunction)
          && Objects.equals(deltaElevatorList, other.deltaElevatorList)
          && Objects.equals(deltaRudderList, other.deltaRudderList)
          && Objects.equals(fuselageEffectOnWingLiftCurve, other.fuselageEffectOnWingLiftCurve)
          && Objects.equals(wingPendularStability, other.wingPendularStability)
          && Objects.equals(CD0Miscellaneous, other.CD0Miscellaneous)
          && Objects.equals(wingMomentumPole, other.wingMomentumPole)
          && Objects.equals(HTailMomentumPole, other.HTailMomentumPole)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          theAircraft,
          theOperatingConditions,
          currentCondition,
          componentTaskList,
          plotList,
          XCGAircraft,
          ZCGAircraft,
          ZCGLandingGear,
          landingGearDragCoefficient,
          alphaBodyInitial,
          alphaBodyFinal,
          numberOfAlphasBody,
          betaInitial,
          betaFinal,
          numberOfBeta,
          wingNumberOfPointSemiSpanWise,
          HTailNumberOfPointSemiSpanWise,
          VTailNumberOfPointSemiSpanWise,
          alphaWingForDistribution,
          alphaHorizontalTailForDistribution,
          alphaVerticalTailForDistribution,
          downwashConstant,
          dynamicPressureRatio,
          tauElevatorFunction,
          tauRudderFunction,
          deltaElevatorList,
          deltaRudderList,
          fuselageEffectOnWingLiftCurve,
          wingPendularStability,
          CD0Miscellaneous,
          wingMomentumPole,
          HTailMomentumPole,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial IACAerodynamicCalculator{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
                  ? "theAircraft=" + theAircraft
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
                  ? "theOperatingConditions=" + theOperatingConditions
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.CURRENT_CONDITION)
                  ? "currentCondition=" + currentCondition
                  : null),
              "componentTaskList=" + componentTaskList,
              "plotList=" + plotList,
              "XCGAircraft=" + XCGAircraft,
              "ZCGAircraft=" + ZCGAircraft,
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.ZCG_LANDING_GEAR)
                  ? "ZCGLandingGear=" + ZCGLandingGear
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.LANDING_GEAR_DRAG_COEFFICIENT)
                  ? "landingGearDragCoefficient=" + landingGearDragCoefficient
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
                  ? "alphaBodyInitial=" + alphaBodyInitial
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
                  ? "alphaBodyFinal=" + alphaBodyFinal
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
                  ? "numberOfAlphasBody=" + numberOfAlphasBody
                  : null),
              (!_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_INITIAL)
                  ? "betaInitial=" + betaInitial
                  : null),
              (!_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.BETA_FINAL)
                  ? "betaFinal=" + betaFinal
                  : null),
              (!_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_BETA)
                  ? "numberOfBeta=" + numberOfBeta
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
                  ? "wingNumberOfPointSemiSpanWise=" + wingNumberOfPointSemiSpanWise
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property
                          .H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
                  ? "HTailNumberOfPointSemiSpanWise=" + HTailNumberOfPointSemiSpanWise
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property
                          .V_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
                  ? "VTailNumberOfPointSemiSpanWise=" + VTailNumberOfPointSemiSpanWise
                  : null),
              "alphaWingForDistribution=" + alphaWingForDistribution,
              "alphaHorizontalTailForDistribution=" + alphaHorizontalTailForDistribution,
              "alphaVerticalTailForDistribution=" + alphaVerticalTailForDistribution,
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
                  ? "downwashConstant=" + downwashConstant
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
                  ? "dynamicPressureRatio=" + dynamicPressureRatio
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
                  ? "tauElevatorFunction=" + tauElevatorFunction
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
                  ? "tauRudderFunction=" + tauRudderFunction
                  : null),
              "deltaElevatorList=" + deltaElevatorList,
              "deltaRudderList=" + deltaRudderList,
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.FUSELAGE_EFFECT_ON_WING_LIFT_CURVE)
                  ? "fuselageEffectOnWingLiftCurve=" + fuselageEffectOnWingLiftCurve
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.WING_PENDULAR_STABILITY)
                  ? "wingPendularStability=" + wingPendularStability
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.C_D0_MISCELLANEOUS)
                  ? "CD0Miscellaneous=" + CD0Miscellaneous
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.WING_MOMENTUM_POLE)
                  ? "wingMomentumPole=" + wingMomentumPole
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.H_TAIL_MOMENTUM_POLE)
                  ? "HTailMomentumPole=" + HTailMomentumPole
                  : null))
          + "}";
    }
  }
}
