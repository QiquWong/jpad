// Autogenerated code. Do not modify.
package analyses;

import aircraft.components.Aircraft;
import analyses.IACAerodynamicCalculator;
import analyses.OperatingConditions;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import configuration.enumerations.AerodynamicAndStabilityEnum;
import configuration.enumerations.ComponentEnum;
import configuration.enumerations.ConditionEnum;
import configuration.enumerations.MethodEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.measure.quantity.Angle;
import org.jscience.physics.amount.Amount;
import standaloneutils.MyInterpolatingFunction;

/**
 * Auto-generated superclass of {@link IACAerodynamicCalculator.Builder},
 * derived from the API of {@link IACAerodynamicCalculator}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IACAerodynamicCalculator_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static IACAerodynamicCalculator.Builder from(IACAerodynamicCalculator value) {
    return new IACAerodynamicCalculator.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    THE_AIRCRAFT("theAircraft"),
    THE_OPERATING_CONDITIONS("theOperatingConditions"),
    ALPHA_BODY_INITIAL("alphaBodyInitial"),
    ALPHA_BODY_FINAL("alphaBodyFinal"),
    NUMBER_OF_ALPHAS_BODY("numberOfAlphasBody"),
    WING_NUMBER_OF_POINT_SEMI_SPAN_WISE("wingNumberOfPointSemiSpanWise"),
    H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE("HTailNumberOfPointSemiSpanWise"),
    DOWNWASH_CONSTANT("downwashConstant"),
    DYNAMIC_PRESSURE_RATIO("dynamicPressureRatio"),
    TAU_ELEVATOR_FUNCTION("tauElevatorFunction"),
    TAU_RUDDER_FUNCTION("tauRudderFunction"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private Aircraft theAircraft;
  private OperatingConditions theOperatingConditions;
  private final ArrayList<ConditionEnum> theConditions = new ArrayList<>();
  private final LinkedHashMap<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>
      componentTaskList = new LinkedHashMap<>();
  private final ArrayList<Double> XCGAircraft = new ArrayList<>();
  private final ArrayList<Double> ZCGAircraft = new ArrayList<>();
  private Amount<Angle> alphaBodyInitial;
  private Amount<Angle> alphaBodyFinal;
  private int numberOfAlphasBody;
  private int wingNumberOfPointSemiSpanWise;
  private int HTailNumberOfPointSemiSpanWise;
  private final ArrayList<Amount<Angle>> alphaWingForDistribution = new ArrayList<>();
  private final ArrayList<Amount<Angle>> alphaHorizontalTailForDistribution = new ArrayList<>();
  private boolean downwashConstant;
  private Double dynamicPressureRatio;
  private MyInterpolatingFunction tauElevatorFunction;
  private MyInterpolatingFunction tauRudderFunction;
  private final ArrayList<Amount<Angle>> deltaElevatorList = new ArrayList<>();
  private final ArrayList<Amount<Angle>> deltaRudderList = new ArrayList<>();
  private final EnumSet<IACAerodynamicCalculator_Builder.Property> _unsetProperties =
      EnumSet.allOf(IACAerodynamicCalculator_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTheAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code theAircraft} is null
   */
  public IACAerodynamicCalculator.Builder setTheAircraft(Aircraft theAircraft) {
    this.theAircraft = Preconditions.checkNotNull(theAircraft);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTheAircraft()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTheAircraft(UnaryOperator<Aircraft> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTheAircraft(mapper.apply(getTheAircraft()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTheAircraft()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Aircraft getTheAircraft() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT),
        "theAircraft not set");
    return theAircraft;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTheOperatingConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code theOperatingConditions} is null
   */
  public IACAerodynamicCalculator.Builder setTheOperatingConditions(
      OperatingConditions theOperatingConditions) {
    this.theOperatingConditions = Preconditions.checkNotNull(theOperatingConditions);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTheOperatingConditions()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTheOperatingConditions(
      UnaryOperator<OperatingConditions> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTheOperatingConditions(mapper.apply(getTheOperatingConditions()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTheOperatingConditions()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public OperatingConditions getTheOperatingConditions() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS),
        "theOperatingConditions not set");
    return theOperatingConditions;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getTheConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addTheConditions(ConditionEnum element) {
    this.theConditions.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getTheConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addTheConditions(ConditionEnum... elements) {
    theConditions.ensureCapacity(theConditions.size() + elements.length);
    for (ConditionEnum element : elements) {
      addTheConditions(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getTheConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllTheConditions(
      Iterable<? extends ConditionEnum> elements) {
    if (elements instanceof Collection) {
      theConditions.ensureCapacity(theConditions.size() + ((Collection<?>) elements).size());
    }
    for (ConditionEnum element : elements) {
      addTheConditions(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getTheConditions()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateTheConditions(
      Consumer<? super List<ConditionEnum>> mutator) {
    // If addTheConditions is overridden, this method will be updated to delegate to it
    mutator.accept(theConditions);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getTheConditions()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearTheConditions() {
    this.theConditions.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getTheConditions()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<ConditionEnum> getTheConditions() {
    return Collections.unmodifiableList(theConditions);
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACAerodynamicCalculator.Builder putComponentTaskList(
      ComponentEnum key, Map<AerodynamicAndStabilityEnum, MethodEnum> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    componentTaskList.put(key, value);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACAerodynamicCalculator.Builder putAllComponentTaskList(
      Map<? extends ComponentEnum, ? extends Map<AerodynamicAndStabilityEnum, MethodEnum>> map) {
    for (Map.Entry<? extends ComponentEnum, ? extends Map<AerodynamicAndStabilityEnum, MethodEnum>>
        entry : map.entrySet()) {
      putComponentTaskList(entry.getKey(), entry.getValue());
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACAerodynamicCalculator.Builder removeComponentTaskList(ComponentEnum key) {
    Preconditions.checkNotNull(key);
    componentTaskList.remove(key);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateComponentTaskList(
      Consumer<? super Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>> mutator) {
    // If putComponentTaskList is overridden, this method will be updated to delegate to it
    mutator.accept(componentTaskList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearComponentTaskList() {
    componentTaskList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACAerodynamicCalculator#getComponentTaskList()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>> getComponentTaskList() {
    return Collections.unmodifiableMap(componentTaskList);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addXCGAircraft(double element) {
    this.XCGAircraft.add(element);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addXCGAircraft(double... elements) {
    XCGAircraft.ensureCapacity(XCGAircraft.size() + elements.length);
    for (double element : elements) {
      addXCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllXCGAircraft(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      XCGAircraft.ensureCapacity(XCGAircraft.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addXCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateXCGAircraft(
      Consumer<? super List<Double>> mutator) {
    // If addXCGAircraft is overridden, this method will be updated to delegate to it
    mutator.accept(XCGAircraft);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getXCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearXCGAircraft() {
    this.XCGAircraft.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getXCGAircraft()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getXCGAircraft() {
    return Collections.unmodifiableList(XCGAircraft);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addZCGAircraft(double element) {
    this.ZCGAircraft.add(element);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder addZCGAircraft(double... elements) {
    ZCGAircraft.ensureCapacity(ZCGAircraft.size() + elements.length);
    for (double element : elements) {
      addZCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllZCGAircraft(Iterable<? extends Double> elements) {
    if (elements instanceof Collection) {
      ZCGAircraft.ensureCapacity(ZCGAircraft.size() + ((Collection<?>) elements).size());
    }
    for (double element : elements) {
      addZCGAircraft(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateZCGAircraft(
      Consumer<? super List<Double>> mutator) {
    // If addZCGAircraft is overridden, this method will be updated to delegate to it
    mutator.accept(ZCGAircraft);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getZCGAircraft()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearZCGAircraft() {
    this.ZCGAircraft.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getZCGAircraft()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Double> getZCGAircraft() {
    return Collections.unmodifiableList(ZCGAircraft);
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyInitial()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code alphaBodyInitial} is null
   */
  public IACAerodynamicCalculator.Builder setAlphaBodyInitial(Amount<Angle> alphaBodyInitial) {
    this.alphaBodyInitial = Preconditions.checkNotNull(alphaBodyInitial);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyInitial()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapAlphaBodyInitial(UnaryOperator<Amount<Angle>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAlphaBodyInitial(mapper.apply(getAlphaBodyInitial()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getAlphaBodyInitial()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Angle> getAlphaBodyInitial() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL),
        "alphaBodyInitial not set");
    return alphaBodyInitial;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyFinal()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code alphaBodyFinal} is null
   */
  public IACAerodynamicCalculator.Builder setAlphaBodyFinal(Amount<Angle> alphaBodyFinal) {
    this.alphaBodyFinal = Preconditions.checkNotNull(alphaBodyFinal);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getAlphaBodyFinal()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapAlphaBodyFinal(UnaryOperator<Amount<Angle>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAlphaBodyFinal(mapper.apply(getAlphaBodyFinal()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getAlphaBodyFinal()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Angle> getAlphaBodyFinal() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL),
        "alphaBodyFinal not set");
    return alphaBodyFinal;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getNumberOfAlphasBody()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setNumberOfAlphasBody(int numberOfAlphasBody) {
    this.numberOfAlphasBody = numberOfAlphasBody;
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getNumberOfAlphasBody()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapNumberOfAlphasBody(UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNumberOfAlphasBody(mapper.apply(getNumberOfAlphasBody()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getNumberOfAlphasBody()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getNumberOfAlphasBody() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY),
        "numberOfAlphasBody not set");
    return numberOfAlphasBody;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getWingNumberOfPointSemiSpanWise()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setWingNumberOfPointSemiSpanWise(
      int wingNumberOfPointSemiSpanWise) {
    this.wingNumberOfPointSemiSpanWise = wingNumberOfPointSemiSpanWise;
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getWingNumberOfPointSemiSpanWise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapWingNumberOfPointSemiSpanWise(
      UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWingNumberOfPointSemiSpanWise(mapper.apply(getWingNumberOfPointSemiSpanWise()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getWingNumberOfPointSemiSpanWise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getWingNumberOfPointSemiSpanWise() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE),
        "wingNumberOfPointSemiSpanWise not set");
    return wingNumberOfPointSemiSpanWise;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getHTailNumberOfPointSemiSpanWise()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setHTailNumberOfPointSemiSpanWise(
      int HTailNumberOfPointSemiSpanWise) {
    this.HTailNumberOfPointSemiSpanWise = HTailNumberOfPointSemiSpanWise;
    _unsetProperties.remove(
        IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getHTailNumberOfPointSemiSpanWise()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapHTailNumberOfPointSemiSpanWise(
      UnaryOperator<Integer> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHTailNumberOfPointSemiSpanWise(mapper.apply(getHTailNumberOfPointSemiSpanWise()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getHTailNumberOfPointSemiSpanWise()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getHTailNumberOfPointSemiSpanWise() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE),
        "HTailNumberOfPointSemiSpanWise not set");
    return HTailNumberOfPointSemiSpanWise;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addAlphaWingForDistribution(Amount<Angle> element) {
    this.alphaWingForDistribution.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAlphaWingForDistribution(Amount<Angle>... elements) {
    alphaWingForDistribution.ensureCapacity(alphaWingForDistribution.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addAlphaWingForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllAlphaWingForDistribution(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      alphaWingForDistribution.ensureCapacity(
          alphaWingForDistribution.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addAlphaWingForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateAlphaWingForDistribution(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addAlphaWingForDistribution is overridden, this method will be updated to delegate to it
    mutator.accept(alphaWingForDistribution);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearAlphaWingForDistribution() {
    this.alphaWingForDistribution.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getAlphaWingForDistribution()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getAlphaWingForDistribution() {
    return Collections.unmodifiableList(alphaWingForDistribution);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addAlphaHorizontalTailForDistribution(
      Amount<Angle> element) {
    this.alphaHorizontalTailForDistribution.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAlphaHorizontalTailForDistribution(
      Amount<Angle>... elements) {
    alphaHorizontalTailForDistribution.ensureCapacity(
        alphaHorizontalTailForDistribution.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addAlphaHorizontalTailForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllAlphaHorizontalTailForDistribution(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      alphaHorizontalTailForDistribution.ensureCapacity(
          alphaHorizontalTailForDistribution.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addAlphaHorizontalTailForDistribution(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateAlphaHorizontalTailForDistribution(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addAlphaHorizontalTailForDistribution is overridden, this method will be updated to delegate to it
    mutator.accept(alphaHorizontalTailForDistribution);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearAlphaHorizontalTailForDistribution() {
    this.alphaHorizontalTailForDistribution.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getAlphaHorizontalTailForDistribution()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getAlphaHorizontalTailForDistribution() {
    return Collections.unmodifiableList(alphaHorizontalTailForDistribution);
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#isDownwashConstant()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder setDownwashConstant(boolean downwashConstant) {
    this.downwashConstant = downwashConstant;
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#isDownwashConstant()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapDownwashConstant(UnaryOperator<Boolean> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDownwashConstant(mapper.apply(isDownwashConstant()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#isDownwashConstant()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isDownwashConstant() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT),
        "downwashConstant not set");
    return downwashConstant;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getDynamicPressureRatio()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dynamicPressureRatio} is null
   */
  public IACAerodynamicCalculator.Builder setDynamicPressureRatio(Double dynamicPressureRatio) {
    this.dynamicPressureRatio = Preconditions.checkNotNull(dynamicPressureRatio);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getDynamicPressureRatio()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapDynamicPressureRatio(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDynamicPressureRatio(mapper.apply(getDynamicPressureRatio()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getDynamicPressureRatio()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getDynamicPressureRatio() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO),
        "dynamicPressureRatio not set");
    return dynamicPressureRatio;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTauElevatorFunction()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code tauElevatorFunction} is null
   */
  public IACAerodynamicCalculator.Builder setTauElevatorFunction(
      MyInterpolatingFunction tauElevatorFunction) {
    this.tauElevatorFunction = Preconditions.checkNotNull(tauElevatorFunction);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTauElevatorFunction()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTauElevatorFunction(
      UnaryOperator<MyInterpolatingFunction> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTauElevatorFunction(mapper.apply(getTauElevatorFunction()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTauElevatorFunction()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public MyInterpolatingFunction getTauElevatorFunction() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION),
        "tauElevatorFunction not set");
    return tauElevatorFunction;
  }

  /**
   * Sets the value to be returned by {@link IACAerodynamicCalculator#getTauRudderFunction()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code tauRudderFunction} is null
   */
  public IACAerodynamicCalculator.Builder setTauRudderFunction(
      MyInterpolatingFunction tauRudderFunction) {
    this.tauRudderFunction = Preconditions.checkNotNull(tauRudderFunction);
    _unsetProperties.remove(IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACAerodynamicCalculator#getTauRudderFunction()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACAerodynamicCalculator.Builder mapTauRudderFunction(
      UnaryOperator<MyInterpolatingFunction> mapper) {
    Preconditions.checkNotNull(mapper);
    return setTauRudderFunction(mapper.apply(getTauRudderFunction()));
  }

  /**
   * Returns the value that will be returned by {@link IACAerodynamicCalculator#getTauRudderFunction()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public MyInterpolatingFunction getTauRudderFunction() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION),
        "tauRudderFunction not set");
    return tauRudderFunction;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addDeltaElevatorList(Amount<Angle> element) {
    this.deltaElevatorList.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addDeltaElevatorList(Amount<Angle>... elements) {
    deltaElevatorList.ensureCapacity(deltaElevatorList.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addDeltaElevatorList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllDeltaElevatorList(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      deltaElevatorList.ensureCapacity(
          deltaElevatorList.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addDeltaElevatorList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateDeltaElevatorList(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addDeltaElevatorList is overridden, this method will be updated to delegate to it
    mutator.accept(deltaElevatorList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearDeltaElevatorList() {
    this.deltaElevatorList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getDeltaElevatorList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getDeltaElevatorList() {
    return Collections.unmodifiableList(deltaElevatorList);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACAerodynamicCalculator.Builder addDeltaRudderList(Amount<Angle> element) {
    this.deltaRudderList.add(Preconditions.checkNotNull(element));
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addDeltaRudderList(Amount<Angle>... elements) {
    deltaRudderList.ensureCapacity(deltaRudderList.size() + elements.length);
    for (Amount<Angle> element : elements) {
      addDeltaRudderList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACAerodynamicCalculator.Builder addAllDeltaRudderList(
      Iterable<? extends Amount<Angle>> elements) {
    if (elements instanceof Collection) {
      deltaRudderList.ensureCapacity(deltaRudderList.size() + ((Collection<?>) elements).size());
    }
    for (Amount<Angle> element : elements) {
      addDeltaRudderList(element);
    }
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACAerodynamicCalculator.Builder mutateDeltaRudderList(
      Consumer<? super List<Amount<Angle>>> mutator) {
    // If addDeltaRudderList is overridden, this method will be updated to delegate to it
    mutator.accept(deltaRudderList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   *
   * @return this {@code Builder} object
   */
  public IACAerodynamicCalculator.Builder clearDeltaRudderList() {
    this.deltaRudderList.clear();
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACAerodynamicCalculator#getDeltaRudderList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<Amount<Angle>> getDeltaRudderList() {
    return Collections.unmodifiableList(deltaRudderList);
  }

  /**
   * Sets all property values using the given {@code IACAerodynamicCalculator} as a template.
   */
  public IACAerodynamicCalculator.Builder mergeFrom(IACAerodynamicCalculator value) {
    IACAerodynamicCalculator_Builder _defaults = new IACAerodynamicCalculator.Builder();
    if (_defaults._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
        || !value.getTheAircraft().equals(_defaults.getTheAircraft())) {
      setTheAircraft(value.getTheAircraft());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
        || !value.getTheOperatingConditions().equals(_defaults.getTheOperatingConditions())) {
      setTheOperatingConditions(value.getTheOperatingConditions());
    }
    addAllTheConditions(value.getTheConditions());
    putAllComponentTaskList(value.getComponentTaskList());
    addAllXCGAircraft(value.getXCGAircraft());
    addAllZCGAircraft(value.getZCGAircraft());
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
        || !value.getAlphaBodyInitial().equals(_defaults.getAlphaBodyInitial())) {
      setAlphaBodyInitial(value.getAlphaBodyInitial());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
        || !value.getAlphaBodyFinal().equals(_defaults.getAlphaBodyFinal())) {
      setAlphaBodyFinal(value.getAlphaBodyFinal());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
        || value.getNumberOfAlphasBody() != _defaults.getNumberOfAlphasBody()) {
      setNumberOfAlphasBody(value.getNumberOfAlphasBody());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        || value.getWingNumberOfPointSemiSpanWise()
            != _defaults.getWingNumberOfPointSemiSpanWise()) {
      setWingNumberOfPointSemiSpanWise(value.getWingNumberOfPointSemiSpanWise());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        || value.getHTailNumberOfPointSemiSpanWise()
            != _defaults.getHTailNumberOfPointSemiSpanWise()) {
      setHTailNumberOfPointSemiSpanWise(value.getHTailNumberOfPointSemiSpanWise());
    }
    addAllAlphaWingForDistribution(value.getAlphaWingForDistribution());
    addAllAlphaHorizontalTailForDistribution(value.getAlphaHorizontalTailForDistribution());
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
        || value.isDownwashConstant() != _defaults.isDownwashConstant()) {
      setDownwashConstant(value.isDownwashConstant());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
        || !value.getDynamicPressureRatio().equals(_defaults.getDynamicPressureRatio())) {
      setDynamicPressureRatio(value.getDynamicPressureRatio());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
        || !value.getTauElevatorFunction().equals(_defaults.getTauElevatorFunction())) {
      setTauElevatorFunction(value.getTauElevatorFunction());
    }
    if (_defaults._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
        || !value.getTauRudderFunction().equals(_defaults.getTauRudderFunction())) {
      setTauRudderFunction(value.getTauRudderFunction());
    }
    addAllDeltaElevatorList(value.getDeltaElevatorList());
    addAllDeltaRudderList(value.getDeltaRudderList());
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IACAerodynamicCalculator.Builder mergeFrom(IACAerodynamicCalculator.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    IACAerodynamicCalculator_Builder base = (IACAerodynamicCalculator_Builder) template;
    IACAerodynamicCalculator_Builder _defaults = new IACAerodynamicCalculator.Builder();
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
            || !template.getTheAircraft().equals(_defaults.getTheAircraft()))) {
      setTheAircraft(template.getTheAircraft());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
            || !template
                .getTheOperatingConditions()
                .equals(_defaults.getTheOperatingConditions()))) {
      setTheOperatingConditions(template.getTheOperatingConditions());
    }
    addAllTheConditions(((IACAerodynamicCalculator_Builder) template).theConditions);
    putAllComponentTaskList(((IACAerodynamicCalculator_Builder) template).componentTaskList);
    addAllXCGAircraft(((IACAerodynamicCalculator_Builder) template).XCGAircraft);
    addAllZCGAircraft(((IACAerodynamicCalculator_Builder) template).ZCGAircraft);
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
            || !template.getAlphaBodyInitial().equals(_defaults.getAlphaBodyInitial()))) {
      setAlphaBodyInitial(template.getAlphaBodyInitial());
    }
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
            || !template.getAlphaBodyFinal().equals(_defaults.getAlphaBodyFinal()))) {
      setAlphaBodyFinal(template.getAlphaBodyFinal());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
            || template.getNumberOfAlphasBody() != _defaults.getNumberOfAlphasBody())) {
      setNumberOfAlphasBody(template.getNumberOfAlphasBody());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
            || template.getWingNumberOfPointSemiSpanWise()
                != _defaults.getWingNumberOfPointSemiSpanWise())) {
      setWingNumberOfPointSemiSpanWise(template.getWingNumberOfPointSemiSpanWise());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
            || template.getHTailNumberOfPointSemiSpanWise()
                != _defaults.getHTailNumberOfPointSemiSpanWise())) {
      setHTailNumberOfPointSemiSpanWise(template.getHTailNumberOfPointSemiSpanWise());
    }
    addAllAlphaWingForDistribution(
        ((IACAerodynamicCalculator_Builder) template).alphaWingForDistribution);
    addAllAlphaHorizontalTailForDistribution(
        ((IACAerodynamicCalculator_Builder) template).alphaHorizontalTailForDistribution);
    if (!base._unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
            || template.isDownwashConstant() != _defaults.isDownwashConstant())) {
      setDownwashConstant(template.isDownwashConstant());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
            || !template.getDynamicPressureRatio().equals(_defaults.getDynamicPressureRatio()))) {
      setDynamicPressureRatio(template.getDynamicPressureRatio());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
            || !template.getTauElevatorFunction().equals(_defaults.getTauElevatorFunction()))) {
      setTauElevatorFunction(template.getTauElevatorFunction());
    }
    if (!base._unsetProperties.contains(
            IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
        && (_defaults._unsetProperties.contains(
                IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
            || !template.getTauRudderFunction().equals(_defaults.getTauRudderFunction()))) {
      setTauRudderFunction(template.getTauRudderFunction());
    }
    addAllDeltaElevatorList(((IACAerodynamicCalculator_Builder) template).deltaElevatorList);
    addAllDeltaRudderList(((IACAerodynamicCalculator_Builder) template).deltaRudderList);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IACAerodynamicCalculator.Builder clear() {
    IACAerodynamicCalculator_Builder _defaults = new IACAerodynamicCalculator.Builder();
    theAircraft = _defaults.theAircraft;
    theOperatingConditions = _defaults.theOperatingConditions;
    theConditions.clear();
    componentTaskList.clear();
    XCGAircraft.clear();
    ZCGAircraft.clear();
    alphaBodyInitial = _defaults.alphaBodyInitial;
    alphaBodyFinal = _defaults.alphaBodyFinal;
    numberOfAlphasBody = _defaults.numberOfAlphasBody;
    wingNumberOfPointSemiSpanWise = _defaults.wingNumberOfPointSemiSpanWise;
    HTailNumberOfPointSemiSpanWise = _defaults.HTailNumberOfPointSemiSpanWise;
    alphaWingForDistribution.clear();
    alphaHorizontalTailForDistribution.clear();
    downwashConstant = _defaults.downwashConstant;
    dynamicPressureRatio = _defaults.dynamicPressureRatio;
    tauElevatorFunction = _defaults.tauElevatorFunction;
    tauRudderFunction = _defaults.tauRudderFunction;
    deltaElevatorList.clear();
    deltaRudderList.clear();
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (IACAerodynamicCalculator.Builder) this;
  }

  /**
   * Returns a newly-created {@link IACAerodynamicCalculator} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IACAerodynamicCalculator build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IACAerodynamicCalculator_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IACAerodynamicCalculator}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IACAerodynamicCalculator buildPartial() {
    return new IACAerodynamicCalculator_Builder.Partial(this);
  }

  private static final class Value implements IACAerodynamicCalculator {
    private final Aircraft theAircraft;
    private final OperatingConditions theOperatingConditions;
    private final List<ConditionEnum> theConditions;
    private final Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>
        componentTaskList;
    private final List<Double> XCGAircraft;
    private final List<Double> ZCGAircraft;
    private final Amount<Angle> alphaBodyInitial;
    private final Amount<Angle> alphaBodyFinal;
    private final int numberOfAlphasBody;
    private final int wingNumberOfPointSemiSpanWise;
    private final int HTailNumberOfPointSemiSpanWise;
    private final List<Amount<Angle>> alphaWingForDistribution;
    private final List<Amount<Angle>> alphaHorizontalTailForDistribution;
    private final boolean downwashConstant;
    private final Double dynamicPressureRatio;
    private final MyInterpolatingFunction tauElevatorFunction;
    private final MyInterpolatingFunction tauRudderFunction;
    private final List<Amount<Angle>> deltaElevatorList;
    private final List<Amount<Angle>> deltaRudderList;

    private Value(IACAerodynamicCalculator_Builder builder) {
      this.theAircraft = builder.theAircraft;
      this.theOperatingConditions = builder.theOperatingConditions;
      this.theConditions = ImmutableList.copyOf(builder.theConditions);
      this.componentTaskList = ImmutableMap.copyOf(builder.componentTaskList);
      this.XCGAircraft = ImmutableList.copyOf(builder.XCGAircraft);
      this.ZCGAircraft = ImmutableList.copyOf(builder.ZCGAircraft);
      this.alphaBodyInitial = builder.alphaBodyInitial;
      this.alphaBodyFinal = builder.alphaBodyFinal;
      this.numberOfAlphasBody = builder.numberOfAlphasBody;
      this.wingNumberOfPointSemiSpanWise = builder.wingNumberOfPointSemiSpanWise;
      this.HTailNumberOfPointSemiSpanWise = builder.HTailNumberOfPointSemiSpanWise;
      this.alphaWingForDistribution = ImmutableList.copyOf(builder.alphaWingForDistribution);
      this.alphaHorizontalTailForDistribution =
          ImmutableList.copyOf(builder.alphaHorizontalTailForDistribution);
      this.downwashConstant = builder.downwashConstant;
      this.dynamicPressureRatio = builder.dynamicPressureRatio;
      this.tauElevatorFunction = builder.tauElevatorFunction;
      this.tauRudderFunction = builder.tauRudderFunction;
      this.deltaElevatorList = ImmutableList.copyOf(builder.deltaElevatorList);
      this.deltaRudderList = ImmutableList.copyOf(builder.deltaRudderList);
    }

    @Override
    public Aircraft getTheAircraft() {
      return theAircraft;
    }

    @Override
    public OperatingConditions getTheOperatingConditions() {
      return theOperatingConditions;
    }

    @Override
    public List<ConditionEnum> getTheConditions() {
      return theConditions;
    }

    @Override
    public Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>> getComponentTaskList() {
      return componentTaskList;
    }

    @Override
    public List<Double> getXCGAircraft() {
      return XCGAircraft;
    }

    @Override
    public List<Double> getZCGAircraft() {
      return ZCGAircraft;
    }

    @Override
    public Amount<Angle> getAlphaBodyInitial() {
      return alphaBodyInitial;
    }

    @Override
    public Amount<Angle> getAlphaBodyFinal() {
      return alphaBodyFinal;
    }

    @Override
    public int getNumberOfAlphasBody() {
      return numberOfAlphasBody;
    }

    @Override
    public int getWingNumberOfPointSemiSpanWise() {
      return wingNumberOfPointSemiSpanWise;
    }

    @Override
    public int getHTailNumberOfPointSemiSpanWise() {
      return HTailNumberOfPointSemiSpanWise;
    }

    @Override
    public List<Amount<Angle>> getAlphaWingForDistribution() {
      return alphaWingForDistribution;
    }

    @Override
    public List<Amount<Angle>> getAlphaHorizontalTailForDistribution() {
      return alphaHorizontalTailForDistribution;
    }

    @Override
    public boolean isDownwashConstant() {
      return downwashConstant;
    }

    @Override
    public Double getDynamicPressureRatio() {
      return dynamicPressureRatio;
    }

    @Override
    public MyInterpolatingFunction getTauElevatorFunction() {
      return tauElevatorFunction;
    }

    @Override
    public MyInterpolatingFunction getTauRudderFunction() {
      return tauRudderFunction;
    }

    @Override
    public List<Amount<Angle>> getDeltaElevatorList() {
      return deltaElevatorList;
    }

    @Override
    public List<Amount<Angle>> getDeltaRudderList() {
      return deltaRudderList;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACAerodynamicCalculator_Builder.Value)) {
        return false;
      }
      IACAerodynamicCalculator_Builder.Value other = (IACAerodynamicCalculator_Builder.Value) obj;
      return Objects.equals(theAircraft, other.theAircraft)
          && Objects.equals(theOperatingConditions, other.theOperatingConditions)
          && Objects.equals(theConditions, other.theConditions)
          && Objects.equals(componentTaskList, other.componentTaskList)
          && Objects.equals(XCGAircraft, other.XCGAircraft)
          && Objects.equals(ZCGAircraft, other.ZCGAircraft)
          && Objects.equals(alphaBodyInitial, other.alphaBodyInitial)
          && Objects.equals(alphaBodyFinal, other.alphaBodyFinal)
          && Objects.equals(numberOfAlphasBody, other.numberOfAlphasBody)
          && Objects.equals(wingNumberOfPointSemiSpanWise, other.wingNumberOfPointSemiSpanWise)
          && Objects.equals(HTailNumberOfPointSemiSpanWise, other.HTailNumberOfPointSemiSpanWise)
          && Objects.equals(alphaWingForDistribution, other.alphaWingForDistribution)
          && Objects.equals(
              alphaHorizontalTailForDistribution, other.alphaHorizontalTailForDistribution)
          && Objects.equals(downwashConstant, other.downwashConstant)
          && Objects.equals(dynamicPressureRatio, other.dynamicPressureRatio)
          && Objects.equals(tauElevatorFunction, other.tauElevatorFunction)
          && Objects.equals(tauRudderFunction, other.tauRudderFunction)
          && Objects.equals(deltaElevatorList, other.deltaElevatorList)
          && Objects.equals(deltaRudderList, other.deltaRudderList);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          theAircraft,
          theOperatingConditions,
          theConditions,
          componentTaskList,
          XCGAircraft,
          ZCGAircraft,
          alphaBodyInitial,
          alphaBodyFinal,
          numberOfAlphasBody,
          wingNumberOfPointSemiSpanWise,
          HTailNumberOfPointSemiSpanWise,
          alphaWingForDistribution,
          alphaHorizontalTailForDistribution,
          downwashConstant,
          dynamicPressureRatio,
          tauElevatorFunction,
          tauRudderFunction,
          deltaElevatorList,
          deltaRudderList);
    }

    @Override
    public String toString() {
      return "IACAerodynamicCalculator{"
          + "theAircraft="
          + theAircraft
          + ", "
          + "theOperatingConditions="
          + theOperatingConditions
          + ", "
          + "theConditions="
          + theConditions
          + ", "
          + "componentTaskList="
          + componentTaskList
          + ", "
          + "XCGAircraft="
          + XCGAircraft
          + ", "
          + "ZCGAircraft="
          + ZCGAircraft
          + ", "
          + "alphaBodyInitial="
          + alphaBodyInitial
          + ", "
          + "alphaBodyFinal="
          + alphaBodyFinal
          + ", "
          + "numberOfAlphasBody="
          + numberOfAlphasBody
          + ", "
          + "wingNumberOfPointSemiSpanWise="
          + wingNumberOfPointSemiSpanWise
          + ", "
          + "HTailNumberOfPointSemiSpanWise="
          + HTailNumberOfPointSemiSpanWise
          + ", "
          + "alphaWingForDistribution="
          + alphaWingForDistribution
          + ", "
          + "alphaHorizontalTailForDistribution="
          + alphaHorizontalTailForDistribution
          + ", "
          + "downwashConstant="
          + downwashConstant
          + ", "
          + "dynamicPressureRatio="
          + dynamicPressureRatio
          + ", "
          + "tauElevatorFunction="
          + tauElevatorFunction
          + ", "
          + "tauRudderFunction="
          + tauRudderFunction
          + ", "
          + "deltaElevatorList="
          + deltaElevatorList
          + ", "
          + "deltaRudderList="
          + deltaRudderList
          + "}";
    }
  }

  private static final class Partial implements IACAerodynamicCalculator {
    private final Aircraft theAircraft;
    private final OperatingConditions theOperatingConditions;
    private final List<ConditionEnum> theConditions;
    private final Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>>
        componentTaskList;
    private final List<Double> XCGAircraft;
    private final List<Double> ZCGAircraft;
    private final Amount<Angle> alphaBodyInitial;
    private final Amount<Angle> alphaBodyFinal;
    private final int numberOfAlphasBody;
    private final int wingNumberOfPointSemiSpanWise;
    private final int HTailNumberOfPointSemiSpanWise;
    private final List<Amount<Angle>> alphaWingForDistribution;
    private final List<Amount<Angle>> alphaHorizontalTailForDistribution;
    private final boolean downwashConstant;
    private final Double dynamicPressureRatio;
    private final MyInterpolatingFunction tauElevatorFunction;
    private final MyInterpolatingFunction tauRudderFunction;
    private final List<Amount<Angle>> deltaElevatorList;
    private final List<Amount<Angle>> deltaRudderList;
    private final EnumSet<IACAerodynamicCalculator_Builder.Property> _unsetProperties;

    Partial(IACAerodynamicCalculator_Builder builder) {
      this.theAircraft = builder.theAircraft;
      this.theOperatingConditions = builder.theOperatingConditions;
      this.theConditions = ImmutableList.copyOf(builder.theConditions);
      this.componentTaskList = ImmutableMap.copyOf(builder.componentTaskList);
      this.XCGAircraft = ImmutableList.copyOf(builder.XCGAircraft);
      this.ZCGAircraft = ImmutableList.copyOf(builder.ZCGAircraft);
      this.alphaBodyInitial = builder.alphaBodyInitial;
      this.alphaBodyFinal = builder.alphaBodyFinal;
      this.numberOfAlphasBody = builder.numberOfAlphasBody;
      this.wingNumberOfPointSemiSpanWise = builder.wingNumberOfPointSemiSpanWise;
      this.HTailNumberOfPointSemiSpanWise = builder.HTailNumberOfPointSemiSpanWise;
      this.alphaWingForDistribution = ImmutableList.copyOf(builder.alphaWingForDistribution);
      this.alphaHorizontalTailForDistribution =
          ImmutableList.copyOf(builder.alphaHorizontalTailForDistribution);
      this.downwashConstant = builder.downwashConstant;
      this.dynamicPressureRatio = builder.dynamicPressureRatio;
      this.tauElevatorFunction = builder.tauElevatorFunction;
      this.tauRudderFunction = builder.tauRudderFunction;
      this.deltaElevatorList = ImmutableList.copyOf(builder.deltaElevatorList);
      this.deltaRudderList = ImmutableList.copyOf(builder.deltaRudderList);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public Aircraft getTheAircraft() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)) {
        throw new UnsupportedOperationException("theAircraft not set");
      }
      return theAircraft;
    }

    @Override
    public OperatingConditions getTheOperatingConditions() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)) {
        throw new UnsupportedOperationException("theOperatingConditions not set");
      }
      return theOperatingConditions;
    }

    @Override
    public List<ConditionEnum> getTheConditions() {
      return theConditions;
    }

    @Override
    public Map<ComponentEnum, Map<AerodynamicAndStabilityEnum, MethodEnum>> getComponentTaskList() {
      return componentTaskList;
    }

    @Override
    public List<Double> getXCGAircraft() {
      return XCGAircraft;
    }

    @Override
    public List<Double> getZCGAircraft() {
      return ZCGAircraft;
    }

    @Override
    public Amount<Angle> getAlphaBodyInitial() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)) {
        throw new UnsupportedOperationException("alphaBodyInitial not set");
      }
      return alphaBodyInitial;
    }

    @Override
    public Amount<Angle> getAlphaBodyFinal() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)) {
        throw new UnsupportedOperationException("alphaBodyFinal not set");
      }
      return alphaBodyFinal;
    }

    @Override
    public int getNumberOfAlphasBody() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)) {
        throw new UnsupportedOperationException("numberOfAlphasBody not set");
      }
      return numberOfAlphasBody;
    }

    @Override
    public int getWingNumberOfPointSemiSpanWise() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)) {
        throw new UnsupportedOperationException("wingNumberOfPointSemiSpanWise not set");
      }
      return wingNumberOfPointSemiSpanWise;
    }

    @Override
    public int getHTailNumberOfPointSemiSpanWise() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)) {
        throw new UnsupportedOperationException("HTailNumberOfPointSemiSpanWise not set");
      }
      return HTailNumberOfPointSemiSpanWise;
    }

    @Override
    public List<Amount<Angle>> getAlphaWingForDistribution() {
      return alphaWingForDistribution;
    }

    @Override
    public List<Amount<Angle>> getAlphaHorizontalTailForDistribution() {
      return alphaHorizontalTailForDistribution;
    }

    @Override
    public boolean isDownwashConstant() {
      if (_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)) {
        throw new UnsupportedOperationException("downwashConstant not set");
      }
      return downwashConstant;
    }

    @Override
    public Double getDynamicPressureRatio() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)) {
        throw new UnsupportedOperationException("dynamicPressureRatio not set");
      }
      return dynamicPressureRatio;
    }

    @Override
    public MyInterpolatingFunction getTauElevatorFunction() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)) {
        throw new UnsupportedOperationException("tauElevatorFunction not set");
      }
      return tauElevatorFunction;
    }

    @Override
    public MyInterpolatingFunction getTauRudderFunction() {
      if (_unsetProperties.contains(
          IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)) {
        throw new UnsupportedOperationException("tauRudderFunction not set");
      }
      return tauRudderFunction;
    }

    @Override
    public List<Amount<Angle>> getDeltaElevatorList() {
      return deltaElevatorList;
    }

    @Override
    public List<Amount<Angle>> getDeltaRudderList() {
      return deltaRudderList;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACAerodynamicCalculator_Builder.Partial)) {
        return false;
      }
      IACAerodynamicCalculator_Builder.Partial other =
          (IACAerodynamicCalculator_Builder.Partial) obj;
      return Objects.equals(theAircraft, other.theAircraft)
          && Objects.equals(theOperatingConditions, other.theOperatingConditions)
          && Objects.equals(theConditions, other.theConditions)
          && Objects.equals(componentTaskList, other.componentTaskList)
          && Objects.equals(XCGAircraft, other.XCGAircraft)
          && Objects.equals(ZCGAircraft, other.ZCGAircraft)
          && Objects.equals(alphaBodyInitial, other.alphaBodyInitial)
          && Objects.equals(alphaBodyFinal, other.alphaBodyFinal)
          && Objects.equals(numberOfAlphasBody, other.numberOfAlphasBody)
          && Objects.equals(wingNumberOfPointSemiSpanWise, other.wingNumberOfPointSemiSpanWise)
          && Objects.equals(HTailNumberOfPointSemiSpanWise, other.HTailNumberOfPointSemiSpanWise)
          && Objects.equals(alphaWingForDistribution, other.alphaWingForDistribution)
          && Objects.equals(
              alphaHorizontalTailForDistribution, other.alphaHorizontalTailForDistribution)
          && Objects.equals(downwashConstant, other.downwashConstant)
          && Objects.equals(dynamicPressureRatio, other.dynamicPressureRatio)
          && Objects.equals(tauElevatorFunction, other.tauElevatorFunction)
          && Objects.equals(tauRudderFunction, other.tauRudderFunction)
          && Objects.equals(deltaElevatorList, other.deltaElevatorList)
          && Objects.equals(deltaRudderList, other.deltaRudderList)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          theAircraft,
          theOperatingConditions,
          theConditions,
          componentTaskList,
          XCGAircraft,
          ZCGAircraft,
          alphaBodyInitial,
          alphaBodyFinal,
          numberOfAlphasBody,
          wingNumberOfPointSemiSpanWise,
          HTailNumberOfPointSemiSpanWise,
          alphaWingForDistribution,
          alphaHorizontalTailForDistribution,
          downwashConstant,
          dynamicPressureRatio,
          tauElevatorFunction,
          tauRudderFunction,
          deltaElevatorList,
          deltaRudderList,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial IACAerodynamicCalculator{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IACAerodynamicCalculator_Builder.Property.THE_AIRCRAFT)
                  ? "theAircraft=" + theAircraft
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.THE_OPERATING_CONDITIONS)
                  ? "theOperatingConditions=" + theOperatingConditions
                  : null),
              "theConditions=" + theConditions,
              "componentTaskList=" + componentTaskList,
              "XCGAircraft=" + XCGAircraft,
              "ZCGAircraft=" + ZCGAircraft,
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_INITIAL)
                  ? "alphaBodyInitial=" + alphaBodyInitial
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.ALPHA_BODY_FINAL)
                  ? "alphaBodyFinal=" + alphaBodyFinal
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.NUMBER_OF_ALPHAS_BODY)
                  ? "numberOfAlphasBody=" + numberOfAlphasBody
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.WING_NUMBER_OF_POINT_SEMI_SPAN_WISE)
                  ? "wingNumberOfPointSemiSpanWise=" + wingNumberOfPointSemiSpanWise
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property
                          .H_TAIL_NUMBER_OF_POINT_SEMI_SPAN_WISE)
                  ? "HTailNumberOfPointSemiSpanWise=" + HTailNumberOfPointSemiSpanWise
                  : null),
              "alphaWingForDistribution=" + alphaWingForDistribution,
              "alphaHorizontalTailForDistribution=" + alphaHorizontalTailForDistribution,
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.DOWNWASH_CONSTANT)
                  ? "downwashConstant=" + downwashConstant
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.DYNAMIC_PRESSURE_RATIO)
                  ? "dynamicPressureRatio=" + dynamicPressureRatio
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.TAU_ELEVATOR_FUNCTION)
                  ? "tauElevatorFunction=" + tauElevatorFunction
                  : null),
              (!_unsetProperties.contains(
                      IACAerodynamicCalculator_Builder.Property.TAU_RUDDER_FUNCTION)
                  ? "tauRudderFunction=" + tauRudderFunction
                  : null),
              "deltaElevatorList=" + deltaElevatorList,
              "deltaRudderList=" + deltaRudderList)
          + "}";
    }
  }
}
