// Autogenerated code. Do not modify.
package analyses;

import aircraft.components.Aircraft;
import analyses.IACCostsManager;
import analyses.OperatingConditions;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import configuration.enumerations.CostsEnum;
import configuration.enumerations.CostsPlotEnum;
import configuration.enumerations.MethodEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.measure.quantity.Duration;
import javax.measure.quantity.Length;
import javax.measure.quantity.Mass;
import org.jscience.economics.money.Money;
import org.jscience.physics.amount.Amount;

/**
 * Auto-generated superclass of {@link IACCostsManager.Builder},
 * derived from the API of {@link IACCostsManager}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IACCostsManager_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static IACCostsManager.Builder from(IACCostsManager value) {
    return new IACCostsManager.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    ID("id"),
    AIRCRAFT("aircraft"),
    OPERATING_CONDITIONS("operatingConditions"),
    MAXIMUM_TAKE_OFF_MASS("maximumTakeOffMass"),
    OPERATING_EMPTY_MASS("operatingEmptyMass"),
    PAYLOAD("payload"),
    RANGE("range"),
    BLOCK_FUEL_MASS("blockFuelMass"),
    FLIGHT_TIME("flightTime"),
    UTILIZATION("utilization"),
    LIFE_SPAN("lifeSpan"),
    RESIDUAL_VALUE("residualValue"),
    AIRCRAFT_PRICE("aircraftPrice"),
    AIRFRAME_RELATIVE_SPARES_COSTS("airframeRelativeSparesCosts"),
    ENGINES_RELATIVE_SPARES_COSTS("enginesRelativeSparesCosts"),
    INTEREST_RATE("interestRate"),
    INSURANCE_RATE("insuranceRate"),
    CABIN_LABOUR_RATE("cabinLabourRate"),
    COCKPIT_LABOUR_RATE("cockpitLabourRate"),
    FUEL_UNIT_PRICE("fuelUnitPrice"),
    LANDING_CHARGES("landingCharges"),
    NAVIGATION_CHARGES("navigationCharges"),
    GROUND_HANDLING_CHARGES("groundHandlingCharges"),
    NOISE_CHARGES("noiseCharges"),
    EMISSIONS_CHARGES_N_OX("emissionsChargesNOx"),
    EMISSIONS_CHARGES_CO("emissionsChargesCO"),
    EMISSIONS_CHARGES_C_O2("emissionsChargesCO2"),
    EMISSIONS_CHARGES_HC("emissionsChargesHC"),
    AIRFRAME_LABOUR_RATE("airframeLabourRate"),
    ENGINE_LABOUR_RATE("engineLabourRate"),
    ENGINE_PRICE("enginePrice"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String id;
  private Aircraft aircraft;
  private OperatingConditions operatingConditions;
  private Amount<Mass> maximumTakeOffMass;
  private Amount<Mass> operatingEmptyMass;
  private Amount<Mass> payload;
  private Amount<Length> range;
  private Amount<Mass> blockFuelMass;
  private Amount<Duration> flightTime;
  private Amount<?> utilization;
  private Amount<Duration> lifeSpan;
  private Double residualValue;
  private Amount<Money> aircraftPrice;
  private Double airframeRelativeSparesCosts;
  private Double enginesRelativeSparesCosts;
  private Double interestRate;
  private Double insuranceRate;
  private Amount<?> cabinLabourRate;
  private Amount<?> cockpitLabourRate;
  private Amount<?> fuelUnitPrice;
  private Amount<?> landingCharges;
  private Amount<?> navigationCharges;
  private Amount<?> groundHandlingCharges;
  private Amount<?> noiseCharges;
  private Amount<?> emissionsChargesNOx;
  private Amount<?> emissionsChargesCO;
  private Amount<?> emissionsChargesCO2;
  private Amount<?> emissionsChargesHC;
  private Amount<?> airframeLabourRate;
  private Amount<?> engineLabourRate;
  private Amount<Money> enginePrice;
  private final LinkedHashMap<CostsEnum, MethodEnum> taskList = new LinkedHashMap<>();
  private final ArrayList<CostsPlotEnum> plotList = new ArrayList<>();
  private final EnumSet<IACCostsManager_Builder.Property> _unsetProperties =
      EnumSet.allOf(IACCostsManager_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IACCostsManager#getId()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code id} is null
   */
  public IACCostsManager.Builder setId(String id) {
    this.id = Preconditions.checkNotNull(id);
    _unsetProperties.remove(IACCostsManager_Builder.Property.ID);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getId()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapId(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setId(mapper.apply(getId()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getId()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getId() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.ID), "id not set");
    return id;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code aircraft} is null
   */
  public IACCostsManager.Builder setAircraft(Aircraft aircraft) {
    this.aircraft = Preconditions.checkNotNull(aircraft);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRCRAFT);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAircraft()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAircraft(UnaryOperator<Aircraft> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAircraft(mapper.apply(getAircraft()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAircraft()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Aircraft getAircraft() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT), "aircraft not set");
    return aircraft;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getOperatingConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code operatingConditions} is null
   */
  public IACCostsManager.Builder setOperatingConditions(OperatingConditions operatingConditions) {
    this.operatingConditions = Preconditions.checkNotNull(operatingConditions);
    _unsetProperties.remove(IACCostsManager_Builder.Property.OPERATING_CONDITIONS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getOperatingConditions()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapOperatingConditions(UnaryOperator<OperatingConditions> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOperatingConditions(mapper.apply(getOperatingConditions()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getOperatingConditions()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public OperatingConditions getOperatingConditions() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS),
        "operatingConditions not set");
    return operatingConditions;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getMaximumTakeOffMass()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code maximumTakeOffMass} is null
   */
  public IACCostsManager.Builder setMaximumTakeOffMass(Amount<Mass> maximumTakeOffMass) {
    this.maximumTakeOffMass = Preconditions.checkNotNull(maximumTakeOffMass);
    _unsetProperties.remove(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getMaximumTakeOffMass()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapMaximumTakeOffMass(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMaximumTakeOffMass(mapper.apply(getMaximumTakeOffMass()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getMaximumTakeOffMass()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getMaximumTakeOffMass() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS),
        "maximumTakeOffMass not set");
    return maximumTakeOffMass;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getOperatingEmptyMass()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code operatingEmptyMass} is null
   */
  public IACCostsManager.Builder setOperatingEmptyMass(Amount<Mass> operatingEmptyMass) {
    this.operatingEmptyMass = Preconditions.checkNotNull(operatingEmptyMass);
    _unsetProperties.remove(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getOperatingEmptyMass()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapOperatingEmptyMass(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOperatingEmptyMass(mapper.apply(getOperatingEmptyMass()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getOperatingEmptyMass()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getOperatingEmptyMass() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS),
        "operatingEmptyMass not set");
    return operatingEmptyMass;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getPayload()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code payload} is null
   */
  public IACCostsManager.Builder setPayload(Amount<Mass> payload) {
    this.payload = Preconditions.checkNotNull(payload);
    _unsetProperties.remove(IACCostsManager_Builder.Property.PAYLOAD);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getPayload()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapPayload(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setPayload(mapper.apply(getPayload()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getPayload()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getPayload() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD), "payload not set");
    return payload;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getRange()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code range} is null
   */
  public IACCostsManager.Builder setRange(Amount<Length> range) {
    this.range = Preconditions.checkNotNull(range);
    _unsetProperties.remove(IACCostsManager_Builder.Property.RANGE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getRange()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapRange(UnaryOperator<Amount<Length>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setRange(mapper.apply(getRange()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getRange()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Length> getRange() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.RANGE), "range not set");
    return range;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getBlockFuelMass()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code blockFuelMass} is null
   */
  public IACCostsManager.Builder setBlockFuelMass(Amount<Mass> blockFuelMass) {
    this.blockFuelMass = Preconditions.checkNotNull(blockFuelMass);
    _unsetProperties.remove(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getBlockFuelMass()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapBlockFuelMass(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBlockFuelMass(mapper.apply(getBlockFuelMass()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getBlockFuelMass()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getBlockFuelMass() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS),
        "blockFuelMass not set");
    return blockFuelMass;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getFlightTime()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code flightTime} is null
   */
  public IACCostsManager.Builder setFlightTime(Amount<Duration> flightTime) {
    this.flightTime = Preconditions.checkNotNull(flightTime);
    _unsetProperties.remove(IACCostsManager_Builder.Property.FLIGHT_TIME);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getFlightTime()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapFlightTime(UnaryOperator<Amount<Duration>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFlightTime(mapper.apply(getFlightTime()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getFlightTime()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Duration> getFlightTime() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME),
        "flightTime not set");
    return flightTime;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getUtilization()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code utilization} is null
   */
  public IACCostsManager.Builder setUtilization(Amount<?> utilization) {
    this.utilization = Preconditions.checkNotNull(utilization);
    _unsetProperties.remove(IACCostsManager_Builder.Property.UTILIZATION);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getUtilization()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapUtilization(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setUtilization(mapper.apply(getUtilization()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getUtilization()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getUtilization() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.UTILIZATION),
        "utilization not set");
    return utilization;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getLifeSpan()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code lifeSpan} is null
   */
  public IACCostsManager.Builder setLifeSpan(Amount<Duration> lifeSpan) {
    this.lifeSpan = Preconditions.checkNotNull(lifeSpan);
    _unsetProperties.remove(IACCostsManager_Builder.Property.LIFE_SPAN);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getLifeSpan()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapLifeSpan(UnaryOperator<Amount<Duration>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLifeSpan(mapper.apply(getLifeSpan()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getLifeSpan()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Duration> getLifeSpan() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN), "lifeSpan not set");
    return lifeSpan;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getResidualValue()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code residualValue} is null
   */
  public IACCostsManager.Builder setResidualValue(Double residualValue) {
    this.residualValue = Preconditions.checkNotNull(residualValue);
    _unsetProperties.remove(IACCostsManager_Builder.Property.RESIDUAL_VALUE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getResidualValue()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapResidualValue(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setResidualValue(mapper.apply(getResidualValue()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getResidualValue()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getResidualValue() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE),
        "residualValue not set");
    return residualValue;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAircraftPrice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code aircraftPrice} is null
   */
  public IACCostsManager.Builder setAircraftPrice(Amount<Money> aircraftPrice) {
    this.aircraftPrice = Preconditions.checkNotNull(aircraftPrice);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRCRAFT_PRICE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAircraftPrice()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAircraftPrice(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAircraftPrice(mapper.apply(getAircraftPrice()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAircraftPrice()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getAircraftPrice() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT_PRICE),
        "aircraftPrice not set");
    return aircraftPrice;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAirframeRelativeSparesCosts()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code airframeRelativeSparesCosts} is null
   */
  public IACCostsManager.Builder setAirframeRelativeSparesCosts(
      Double airframeRelativeSparesCosts) {
    this.airframeRelativeSparesCosts = Preconditions.checkNotNull(airframeRelativeSparesCosts);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAirframeRelativeSparesCosts()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAirframeRelativeSparesCosts(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAirframeRelativeSparesCosts(mapper.apply(getAirframeRelativeSparesCosts()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAirframeRelativeSparesCosts()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getAirframeRelativeSparesCosts() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS),
        "airframeRelativeSparesCosts not set");
    return airframeRelativeSparesCosts;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEnginesRelativeSparesCosts()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code enginesRelativeSparesCosts} is null
   */
  public IACCostsManager.Builder setEnginesRelativeSparesCosts(Double enginesRelativeSparesCosts) {
    this.enginesRelativeSparesCosts = Preconditions.checkNotNull(enginesRelativeSparesCosts);
    _unsetProperties.remove(IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEnginesRelativeSparesCosts()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEnginesRelativeSparesCosts(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEnginesRelativeSparesCosts(mapper.apply(getEnginesRelativeSparesCosts()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEnginesRelativeSparesCosts()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getEnginesRelativeSparesCosts() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS),
        "enginesRelativeSparesCosts not set");
    return enginesRelativeSparesCosts;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getInterestRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code interestRate} is null
   */
  public IACCostsManager.Builder setInterestRate(Double interestRate) {
    this.interestRate = Preconditions.checkNotNull(interestRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.INTEREST_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getInterestRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapInterestRate(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setInterestRate(mapper.apply(getInterestRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getInterestRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getInterestRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE),
        "interestRate not set");
    return interestRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getInsuranceRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code insuranceRate} is null
   */
  public IACCostsManager.Builder setInsuranceRate(Double insuranceRate) {
    this.insuranceRate = Preconditions.checkNotNull(insuranceRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.INSURANCE_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getInsuranceRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapInsuranceRate(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setInsuranceRate(mapper.apply(getInsuranceRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getInsuranceRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getInsuranceRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE),
        "insuranceRate not set");
    return insuranceRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getCabinLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code cabinLabourRate} is null
   */
  public IACCostsManager.Builder setCabinLabourRate(Amount<?> cabinLabourRate) {
    this.cabinLabourRate = Preconditions.checkNotNull(cabinLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getCabinLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapCabinLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCabinLabourRate(mapper.apply(getCabinLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getCabinLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getCabinLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE),
        "cabinLabourRate not set");
    return cabinLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getCockpitLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code cockpitLabourRate} is null
   */
  public IACCostsManager.Builder setCockpitLabourRate(Amount<?> cockpitLabourRate) {
    this.cockpitLabourRate = Preconditions.checkNotNull(cockpitLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getCockpitLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapCockpitLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCockpitLabourRate(mapper.apply(getCockpitLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getCockpitLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getCockpitLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE),
        "cockpitLabourRate not set");
    return cockpitLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getFuelUnitPrice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fuelUnitPrice} is null
   */
  public IACCostsManager.Builder setFuelUnitPrice(Amount<?> fuelUnitPrice) {
    this.fuelUnitPrice = Preconditions.checkNotNull(fuelUnitPrice);
    _unsetProperties.remove(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getFuelUnitPrice()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapFuelUnitPrice(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFuelUnitPrice(mapper.apply(getFuelUnitPrice()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getFuelUnitPrice()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getFuelUnitPrice() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE),
        "fuelUnitPrice not set");
    return fuelUnitPrice;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getLandingCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code landingCharges} is null
   */
  public IACCostsManager.Builder setLandingCharges(Amount<?> landingCharges) {
    this.landingCharges = Preconditions.checkNotNull(landingCharges);
    _unsetProperties.remove(IACCostsManager_Builder.Property.LANDING_CHARGES);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getLandingCharges()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapLandingCharges(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLandingCharges(mapper.apply(getLandingCharges()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getLandingCharges()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getLandingCharges() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.LANDING_CHARGES),
        "landingCharges not set");
    return landingCharges;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getNavigationCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code navigationCharges} is null
   */
  public IACCostsManager.Builder setNavigationCharges(Amount<?> navigationCharges) {
    this.navigationCharges = Preconditions.checkNotNull(navigationCharges);
    _unsetProperties.remove(IACCostsManager_Builder.Property.NAVIGATION_CHARGES);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getNavigationCharges()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapNavigationCharges(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNavigationCharges(mapper.apply(getNavigationCharges()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getNavigationCharges()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getNavigationCharges() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.NAVIGATION_CHARGES),
        "navigationCharges not set");
    return navigationCharges;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getGroundHandlingCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code groundHandlingCharges} is null
   */
  public IACCostsManager.Builder setGroundHandlingCharges(Amount<?> groundHandlingCharges) {
    this.groundHandlingCharges = Preconditions.checkNotNull(groundHandlingCharges);
    _unsetProperties.remove(IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getGroundHandlingCharges()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapGroundHandlingCharges(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setGroundHandlingCharges(mapper.apply(getGroundHandlingCharges()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getGroundHandlingCharges()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getGroundHandlingCharges() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES),
        "groundHandlingCharges not set");
    return groundHandlingCharges;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getNoiseCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code noiseCharges} is null
   */
  public IACCostsManager.Builder setNoiseCharges(Amount<?> noiseCharges) {
    this.noiseCharges = Preconditions.checkNotNull(noiseCharges);
    _unsetProperties.remove(IACCostsManager_Builder.Property.NOISE_CHARGES);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getNoiseCharges()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapNoiseCharges(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNoiseCharges(mapper.apply(getNoiseCharges()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getNoiseCharges()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getNoiseCharges() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CHARGES),
        "noiseCharges not set");
    return noiseCharges;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsChargesNOx()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsChargesNOx} is null
   */
  public IACCostsManager.Builder setEmissionsChargesNOx(Amount<?> emissionsChargesNOx) {
    this.emissionsChargesNOx = Preconditions.checkNotNull(emissionsChargesNOx);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsChargesNOx()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsChargesNOx(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsChargesNOx(mapper.apply(getEmissionsChargesNOx()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsChargesNOx()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getEmissionsChargesNOx() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX),
        "emissionsChargesNOx not set");
    return emissionsChargesNOx;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsChargesCO()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsChargesCO} is null
   */
  public IACCostsManager.Builder setEmissionsChargesCO(Amount<?> emissionsChargesCO) {
    this.emissionsChargesCO = Preconditions.checkNotNull(emissionsChargesCO);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsChargesCO()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsChargesCO(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsChargesCO(mapper.apply(getEmissionsChargesCO()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsChargesCO()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getEmissionsChargesCO() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO),
        "emissionsChargesCO not set");
    return emissionsChargesCO;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsChargesCO2()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsChargesCO2} is null
   */
  public IACCostsManager.Builder setEmissionsChargesCO2(Amount<?> emissionsChargesCO2) {
    this.emissionsChargesCO2 = Preconditions.checkNotNull(emissionsChargesCO2);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsChargesCO2()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsChargesCO2(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsChargesCO2(mapper.apply(getEmissionsChargesCO2()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsChargesCO2()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getEmissionsChargesCO2() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2),
        "emissionsChargesCO2 not set");
    return emissionsChargesCO2;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsChargesHC()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsChargesHC} is null
   */
  public IACCostsManager.Builder setEmissionsChargesHC(Amount<?> emissionsChargesHC) {
    this.emissionsChargesHC = Preconditions.checkNotNull(emissionsChargesHC);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsChargesHC()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsChargesHC(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsChargesHC(mapper.apply(getEmissionsChargesHC()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsChargesHC()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getEmissionsChargesHC() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC),
        "emissionsChargesHC not set");
    return emissionsChargesHC;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAirframeLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code airframeLabourRate} is null
   */
  public IACCostsManager.Builder setAirframeLabourRate(Amount<?> airframeLabourRate) {
    this.airframeLabourRate = Preconditions.checkNotNull(airframeLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAirframeLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAirframeLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAirframeLabourRate(mapper.apply(getAirframeLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAirframeLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getAirframeLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE),
        "airframeLabourRate not set");
    return airframeLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEngineLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code engineLabourRate} is null
   */
  public IACCostsManager.Builder setEngineLabourRate(Amount<?> engineLabourRate) {
    this.engineLabourRate = Preconditions.checkNotNull(engineLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEngineLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEngineLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEngineLabourRate(mapper.apply(getEngineLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEngineLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getEngineLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE),
        "engineLabourRate not set");
    return engineLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEnginePrice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code enginePrice} is null
   */
  public IACCostsManager.Builder setEnginePrice(Amount<Money> enginePrice) {
    this.enginePrice = Preconditions.checkNotNull(enginePrice);
    _unsetProperties.remove(IACCostsManager_Builder.Property.ENGINE_PRICE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEnginePrice()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEnginePrice(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEnginePrice(mapper.apply(getEnginePrice()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEnginePrice()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getEnginePrice() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_PRICE),
        "enginePrice not set");
    return enginePrice;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getTaskList()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putTaskList(CostsEnum key, MethodEnum value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    taskList.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getTaskList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllTaskList(
      Map<? extends CostsEnum, ? extends MethodEnum> map) {
    for (Map.Entry<? extends CostsEnum, ? extends MethodEnum> entry : map.entrySet()) {
      putTaskList(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getTaskList()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeTaskList(CostsEnum key) {
    Preconditions.checkNotNull(key);
    taskList.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getTaskList()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateTaskList(
      Consumer<? super Map<CostsEnum, MethodEnum>> mutator) {
    // If putTaskList is overridden, this method will be updated to delegate to it
    mutator.accept(taskList);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getTaskList()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearTaskList() {
    taskList.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getTaskList()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<CostsEnum, MethodEnum> getTaskList() {
    return Collections.unmodifiableMap(taskList);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACCostsManager.Builder addPlotList(CostsPlotEnum element) {
    this.plotList.add(Preconditions.checkNotNull(element));
    return (IACCostsManager.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACCostsManager.Builder addPlotList(CostsPlotEnum... elements) {
    plotList.ensureCapacity(plotList.size() + elements.length);
    for (CostsPlotEnum element : elements) {
      addPlotList(element);
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACCostsManager.Builder addAllPlotList(Iterable<? extends CostsPlotEnum> elements) {
    if (elements instanceof Collection) {
      plotList.ensureCapacity(plotList.size() + ((Collection<?>) elements).size());
    }
    for (CostsPlotEnum element : elements) {
      addPlotList(element);
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACCostsManager#getPlotList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutatePlotList(Consumer<? super List<CostsPlotEnum>> mutator) {
    // If addPlotList is overridden, this method will be updated to delegate to it
    mutator.accept(plotList);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearPlotList() {
    this.plotList.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACCostsManager#getPlotList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<CostsPlotEnum> getPlotList() {
    return Collections.unmodifiableList(plotList);
  }

  /**
   * Sets all property values using the given {@code IACCostsManager} as a template.
   */
  public IACCostsManager.Builder mergeFrom(IACCostsManager value) {
    IACCostsManager_Builder _defaults = new IACCostsManager.Builder();
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ID)
        || !value.getId().equals(_defaults.getId())) {
      setId(value.getId());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
        || !value.getAircraft().equals(_defaults.getAircraft())) {
      setAircraft(value.getAircraft());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
        || !value.getOperatingConditions().equals(_defaults.getOperatingConditions())) {
      setOperatingConditions(value.getOperatingConditions());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
        || !value.getMaximumTakeOffMass().equals(_defaults.getMaximumTakeOffMass())) {
      setMaximumTakeOffMass(value.getMaximumTakeOffMass());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
        || !value.getOperatingEmptyMass().equals(_defaults.getOperatingEmptyMass())) {
      setOperatingEmptyMass(value.getOperatingEmptyMass());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
        || !value.getPayload().equals(_defaults.getPayload())) {
      setPayload(value.getPayload());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
        || !value.getRange().equals(_defaults.getRange())) {
      setRange(value.getRange());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
        || !value.getBlockFuelMass().equals(_defaults.getBlockFuelMass())) {
      setBlockFuelMass(value.getBlockFuelMass());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
        || !value.getFlightTime().equals(_defaults.getFlightTime())) {
      setFlightTime(value.getFlightTime());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.UTILIZATION)
        || !value.getUtilization().equals(_defaults.getUtilization())) {
      setUtilization(value.getUtilization());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
        || !value.getLifeSpan().equals(_defaults.getLifeSpan())) {
      setLifeSpan(value.getLifeSpan());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
        || !value.getResidualValue().equals(_defaults.getResidualValue())) {
      setResidualValue(value.getResidualValue());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT_PRICE)
        || !value.getAircraftPrice().equals(_defaults.getAircraftPrice())) {
      setAircraftPrice(value.getAircraftPrice());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
        || !value
            .getAirframeRelativeSparesCosts()
            .equals(_defaults.getAirframeRelativeSparesCosts())) {
      setAirframeRelativeSparesCosts(value.getAirframeRelativeSparesCosts());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
        || !value
            .getEnginesRelativeSparesCosts()
            .equals(_defaults.getEnginesRelativeSparesCosts())) {
      setEnginesRelativeSparesCosts(value.getEnginesRelativeSparesCosts());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
        || !value.getInterestRate().equals(_defaults.getInterestRate())) {
      setInterestRate(value.getInterestRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
        || !value.getInsuranceRate().equals(_defaults.getInsuranceRate())) {
      setInsuranceRate(value.getInsuranceRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
        || !value.getCabinLabourRate().equals(_defaults.getCabinLabourRate())) {
      setCabinLabourRate(value.getCabinLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
        || !value.getCockpitLabourRate().equals(_defaults.getCockpitLabourRate())) {
      setCockpitLabourRate(value.getCockpitLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
        || !value.getFuelUnitPrice().equals(_defaults.getFuelUnitPrice())) {
      setFuelUnitPrice(value.getFuelUnitPrice());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.LANDING_CHARGES)
        || !value.getLandingCharges().equals(_defaults.getLandingCharges())) {
      setLandingCharges(value.getLandingCharges());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.NAVIGATION_CHARGES)
        || !value.getNavigationCharges().equals(_defaults.getNavigationCharges())) {
      setNavigationCharges(value.getNavigationCharges());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES)
        || !value.getGroundHandlingCharges().equals(_defaults.getGroundHandlingCharges())) {
      setGroundHandlingCharges(value.getGroundHandlingCharges());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CHARGES)
        || !value.getNoiseCharges().equals(_defaults.getNoiseCharges())) {
      setNoiseCharges(value.getNoiseCharges());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX)
        || !value.getEmissionsChargesNOx().equals(_defaults.getEmissionsChargesNOx())) {
      setEmissionsChargesNOx(value.getEmissionsChargesNOx());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO)
        || !value.getEmissionsChargesCO().equals(_defaults.getEmissionsChargesCO())) {
      setEmissionsChargesCO(value.getEmissionsChargesCO());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2)
        || !value.getEmissionsChargesCO2().equals(_defaults.getEmissionsChargesCO2())) {
      setEmissionsChargesCO2(value.getEmissionsChargesCO2());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC)
        || !value.getEmissionsChargesHC().equals(_defaults.getEmissionsChargesHC())) {
      setEmissionsChargesHC(value.getEmissionsChargesHC());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
        || !value.getAirframeLabourRate().equals(_defaults.getAirframeLabourRate())) {
      setAirframeLabourRate(value.getAirframeLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
        || !value.getEngineLabourRate().equals(_defaults.getEngineLabourRate())) {
      setEngineLabourRate(value.getEngineLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_PRICE)
        || !value.getEnginePrice().equals(_defaults.getEnginePrice())) {
      setEnginePrice(value.getEnginePrice());
    }
    putAllTaskList(value.getTaskList());
    addAllPlotList(value.getPlotList());
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IACCostsManager.Builder mergeFrom(IACCostsManager.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    IACCostsManager_Builder base = (IACCostsManager_Builder) template;
    IACCostsManager_Builder _defaults = new IACCostsManager.Builder();
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.ID)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ID)
            || !template.getId().equals(_defaults.getId()))) {
      setId(template.getId());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
            || !template.getAircraft().equals(_defaults.getAircraft()))) {
      setAircraft(template.getAircraft());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
            || !template.getOperatingConditions().equals(_defaults.getOperatingConditions()))) {
      setOperatingConditions(template.getOperatingConditions());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
            || !template.getMaximumTakeOffMass().equals(_defaults.getMaximumTakeOffMass()))) {
      setMaximumTakeOffMass(template.getMaximumTakeOffMass());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
            || !template.getOperatingEmptyMass().equals(_defaults.getOperatingEmptyMass()))) {
      setOperatingEmptyMass(template.getOperatingEmptyMass());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
            || !template.getPayload().equals(_defaults.getPayload()))) {
      setPayload(template.getPayload());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
            || !template.getRange().equals(_defaults.getRange()))) {
      setRange(template.getRange());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
            || !template.getBlockFuelMass().equals(_defaults.getBlockFuelMass()))) {
      setBlockFuelMass(template.getBlockFuelMass());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
            || !template.getFlightTime().equals(_defaults.getFlightTime()))) {
      setFlightTime(template.getFlightTime());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.UTILIZATION)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.UTILIZATION)
            || !template.getUtilization().equals(_defaults.getUtilization()))) {
      setUtilization(template.getUtilization());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
            || !template.getLifeSpan().equals(_defaults.getLifeSpan()))) {
      setLifeSpan(template.getLifeSpan());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
            || !template.getResidualValue().equals(_defaults.getResidualValue()))) {
      setResidualValue(template.getResidualValue());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT_PRICE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT_PRICE)
            || !template.getAircraftPrice().equals(_defaults.getAircraftPrice()))) {
      setAircraftPrice(template.getAircraftPrice());
    }
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
            || !template
                .getAirframeRelativeSparesCosts()
                .equals(_defaults.getAirframeRelativeSparesCosts()))) {
      setAirframeRelativeSparesCosts(template.getAirframeRelativeSparesCosts());
    }
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
            || !template
                .getEnginesRelativeSparesCosts()
                .equals(_defaults.getEnginesRelativeSparesCosts()))) {
      setEnginesRelativeSparesCosts(template.getEnginesRelativeSparesCosts());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
            || !template.getInterestRate().equals(_defaults.getInterestRate()))) {
      setInterestRate(template.getInterestRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
            || !template.getInsuranceRate().equals(_defaults.getInsuranceRate()))) {
      setInsuranceRate(template.getInsuranceRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
            || !template.getCabinLabourRate().equals(_defaults.getCabinLabourRate()))) {
      setCabinLabourRate(template.getCabinLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
            || !template.getCockpitLabourRate().equals(_defaults.getCockpitLabourRate()))) {
      setCockpitLabourRate(template.getCockpitLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
            || !template.getFuelUnitPrice().equals(_defaults.getFuelUnitPrice()))) {
      setFuelUnitPrice(template.getFuelUnitPrice());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.LANDING_CHARGES)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.LANDING_CHARGES)
            || !template.getLandingCharges().equals(_defaults.getLandingCharges()))) {
      setLandingCharges(template.getLandingCharges());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.NAVIGATION_CHARGES)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.NAVIGATION_CHARGES)
            || !template.getNavigationCharges().equals(_defaults.getNavigationCharges()))) {
      setNavigationCharges(template.getNavigationCharges());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES)
            || !template.getGroundHandlingCharges().equals(_defaults.getGroundHandlingCharges()))) {
      setGroundHandlingCharges(template.getGroundHandlingCharges());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CHARGES)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CHARGES)
            || !template.getNoiseCharges().equals(_defaults.getNoiseCharges()))) {
      setNoiseCharges(template.getNoiseCharges());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX)
            || !template.getEmissionsChargesNOx().equals(_defaults.getEmissionsChargesNOx()))) {
      setEmissionsChargesNOx(template.getEmissionsChargesNOx());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO)
            || !template.getEmissionsChargesCO().equals(_defaults.getEmissionsChargesCO()))) {
      setEmissionsChargesCO(template.getEmissionsChargesCO());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2)
            || !template.getEmissionsChargesCO2().equals(_defaults.getEmissionsChargesCO2()))) {
      setEmissionsChargesCO2(template.getEmissionsChargesCO2());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC)
            || !template.getEmissionsChargesHC().equals(_defaults.getEmissionsChargesHC()))) {
      setEmissionsChargesHC(template.getEmissionsChargesHC());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
            || !template.getAirframeLabourRate().equals(_defaults.getAirframeLabourRate()))) {
      setAirframeLabourRate(template.getAirframeLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
            || !template.getEngineLabourRate().equals(_defaults.getEngineLabourRate()))) {
      setEngineLabourRate(template.getEngineLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_PRICE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_PRICE)
            || !template.getEnginePrice().equals(_defaults.getEnginePrice()))) {
      setEnginePrice(template.getEnginePrice());
    }
    putAllTaskList(((IACCostsManager_Builder) template).taskList);
    addAllPlotList(((IACCostsManager_Builder) template).plotList);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IACCostsManager.Builder clear() {
    IACCostsManager_Builder _defaults = new IACCostsManager.Builder();
    id = _defaults.id;
    aircraft = _defaults.aircraft;
    operatingConditions = _defaults.operatingConditions;
    maximumTakeOffMass = _defaults.maximumTakeOffMass;
    operatingEmptyMass = _defaults.operatingEmptyMass;
    payload = _defaults.payload;
    range = _defaults.range;
    blockFuelMass = _defaults.blockFuelMass;
    flightTime = _defaults.flightTime;
    utilization = _defaults.utilization;
    lifeSpan = _defaults.lifeSpan;
    residualValue = _defaults.residualValue;
    aircraftPrice = _defaults.aircraftPrice;
    airframeRelativeSparesCosts = _defaults.airframeRelativeSparesCosts;
    enginesRelativeSparesCosts = _defaults.enginesRelativeSparesCosts;
    interestRate = _defaults.interestRate;
    insuranceRate = _defaults.insuranceRate;
    cabinLabourRate = _defaults.cabinLabourRate;
    cockpitLabourRate = _defaults.cockpitLabourRate;
    fuelUnitPrice = _defaults.fuelUnitPrice;
    landingCharges = _defaults.landingCharges;
    navigationCharges = _defaults.navigationCharges;
    groundHandlingCharges = _defaults.groundHandlingCharges;
    noiseCharges = _defaults.noiseCharges;
    emissionsChargesNOx = _defaults.emissionsChargesNOx;
    emissionsChargesCO = _defaults.emissionsChargesCO;
    emissionsChargesCO2 = _defaults.emissionsChargesCO2;
    emissionsChargesHC = _defaults.emissionsChargesHC;
    airframeLabourRate = _defaults.airframeLabourRate;
    engineLabourRate = _defaults.engineLabourRate;
    enginePrice = _defaults.enginePrice;
    taskList.clear();
    plotList.clear();
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns a newly-created {@link IACCostsManager} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IACCostsManager build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IACCostsManager_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IACCostsManager}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IACCostsManager buildPartial() {
    return new IACCostsManager_Builder.Partial(this);
  }

  private static final class Value implements IACCostsManager {
    private final String id;
    private final Aircraft aircraft;
    private final OperatingConditions operatingConditions;
    private final Amount<Mass> maximumTakeOffMass;
    private final Amount<Mass> operatingEmptyMass;
    private final Amount<Mass> payload;
    private final Amount<Length> range;
    private final Amount<Mass> blockFuelMass;
    private final Amount<Duration> flightTime;
    private final Amount<?> utilization;
    private final Amount<Duration> lifeSpan;
    private final Double residualValue;
    private final Amount<Money> aircraftPrice;
    private final Double airframeRelativeSparesCosts;
    private final Double enginesRelativeSparesCosts;
    private final Double interestRate;
    private final Double insuranceRate;
    private final Amount<?> cabinLabourRate;
    private final Amount<?> cockpitLabourRate;
    private final Amount<?> fuelUnitPrice;
    private final Amount<?> landingCharges;
    private final Amount<?> navigationCharges;
    private final Amount<?> groundHandlingCharges;
    private final Amount<?> noiseCharges;
    private final Amount<?> emissionsChargesNOx;
    private final Amount<?> emissionsChargesCO;
    private final Amount<?> emissionsChargesCO2;
    private final Amount<?> emissionsChargesHC;
    private final Amount<?> airframeLabourRate;
    private final Amount<?> engineLabourRate;
    private final Amount<Money> enginePrice;
    private final Map<CostsEnum, MethodEnum> taskList;
    private final List<CostsPlotEnum> plotList;

    private Value(IACCostsManager_Builder builder) {
      this.id = builder.id;
      this.aircraft = builder.aircraft;
      this.operatingConditions = builder.operatingConditions;
      this.maximumTakeOffMass = builder.maximumTakeOffMass;
      this.operatingEmptyMass = builder.operatingEmptyMass;
      this.payload = builder.payload;
      this.range = builder.range;
      this.blockFuelMass = builder.blockFuelMass;
      this.flightTime = builder.flightTime;
      this.utilization = builder.utilization;
      this.lifeSpan = builder.lifeSpan;
      this.residualValue = builder.residualValue;
      this.aircraftPrice = builder.aircraftPrice;
      this.airframeRelativeSparesCosts = builder.airframeRelativeSparesCosts;
      this.enginesRelativeSparesCosts = builder.enginesRelativeSparesCosts;
      this.interestRate = builder.interestRate;
      this.insuranceRate = builder.insuranceRate;
      this.cabinLabourRate = builder.cabinLabourRate;
      this.cockpitLabourRate = builder.cockpitLabourRate;
      this.fuelUnitPrice = builder.fuelUnitPrice;
      this.landingCharges = builder.landingCharges;
      this.navigationCharges = builder.navigationCharges;
      this.groundHandlingCharges = builder.groundHandlingCharges;
      this.noiseCharges = builder.noiseCharges;
      this.emissionsChargesNOx = builder.emissionsChargesNOx;
      this.emissionsChargesCO = builder.emissionsChargesCO;
      this.emissionsChargesCO2 = builder.emissionsChargesCO2;
      this.emissionsChargesHC = builder.emissionsChargesHC;
      this.airframeLabourRate = builder.airframeLabourRate;
      this.engineLabourRate = builder.engineLabourRate;
      this.enginePrice = builder.enginePrice;
      this.taskList = ImmutableMap.copyOf(builder.taskList);
      this.plotList = ImmutableList.copyOf(builder.plotList);
    }

    @Override
    public String getId() {
      return id;
    }

    @Override
    public Aircraft getAircraft() {
      return aircraft;
    }

    @Override
    public OperatingConditions getOperatingConditions() {
      return operatingConditions;
    }

    @Override
    public Amount<Mass> getMaximumTakeOffMass() {
      return maximumTakeOffMass;
    }

    @Override
    public Amount<Mass> getOperatingEmptyMass() {
      return operatingEmptyMass;
    }

    @Override
    public Amount<Mass> getPayload() {
      return payload;
    }

    @Override
    public Amount<Length> getRange() {
      return range;
    }

    @Override
    public Amount<Mass> getBlockFuelMass() {
      return blockFuelMass;
    }

    @Override
    public Amount<Duration> getFlightTime() {
      return flightTime;
    }

    @Override
    public Amount<?> getUtilization() {
      return utilization;
    }

    @Override
    public Amount<Duration> getLifeSpan() {
      return lifeSpan;
    }

    @Override
    public Double getResidualValue() {
      return residualValue;
    }

    @Override
    public Amount<Money> getAircraftPrice() {
      return aircraftPrice;
    }

    @Override
    public Double getAirframeRelativeSparesCosts() {
      return airframeRelativeSparesCosts;
    }

    @Override
    public Double getEnginesRelativeSparesCosts() {
      return enginesRelativeSparesCosts;
    }

    @Override
    public Double getInterestRate() {
      return interestRate;
    }

    @Override
    public Double getInsuranceRate() {
      return insuranceRate;
    }

    @Override
    public Amount<?> getCabinLabourRate() {
      return cabinLabourRate;
    }

    @Override
    public Amount<?> getCockpitLabourRate() {
      return cockpitLabourRate;
    }

    @Override
    public Amount<?> getFuelUnitPrice() {
      return fuelUnitPrice;
    }

    @Override
    public Amount<?> getLandingCharges() {
      return landingCharges;
    }

    @Override
    public Amount<?> getNavigationCharges() {
      return navigationCharges;
    }

    @Override
    public Amount<?> getGroundHandlingCharges() {
      return groundHandlingCharges;
    }

    @Override
    public Amount<?> getNoiseCharges() {
      return noiseCharges;
    }

    @Override
    public Amount<?> getEmissionsChargesNOx() {
      return emissionsChargesNOx;
    }

    @Override
    public Amount<?> getEmissionsChargesCO() {
      return emissionsChargesCO;
    }

    @Override
    public Amount<?> getEmissionsChargesCO2() {
      return emissionsChargesCO2;
    }

    @Override
    public Amount<?> getEmissionsChargesHC() {
      return emissionsChargesHC;
    }

    @Override
    public Amount<?> getAirframeLabourRate() {
      return airframeLabourRate;
    }

    @Override
    public Amount<?> getEngineLabourRate() {
      return engineLabourRate;
    }

    @Override
    public Amount<Money> getEnginePrice() {
      return enginePrice;
    }

    @Override
    public Map<CostsEnum, MethodEnum> getTaskList() {
      return taskList;
    }

    @Override
    public List<CostsPlotEnum> getPlotList() {
      return plotList;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACCostsManager_Builder.Value)) {
        return false;
      }
      IACCostsManager_Builder.Value other = (IACCostsManager_Builder.Value) obj;
      return Objects.equals(id, other.id)
          && Objects.equals(aircraft, other.aircraft)
          && Objects.equals(operatingConditions, other.operatingConditions)
          && Objects.equals(maximumTakeOffMass, other.maximumTakeOffMass)
          && Objects.equals(operatingEmptyMass, other.operatingEmptyMass)
          && Objects.equals(payload, other.payload)
          && Objects.equals(range, other.range)
          && Objects.equals(blockFuelMass, other.blockFuelMass)
          && Objects.equals(flightTime, other.flightTime)
          && Objects.equals(utilization, other.utilization)
          && Objects.equals(lifeSpan, other.lifeSpan)
          && Objects.equals(residualValue, other.residualValue)
          && Objects.equals(aircraftPrice, other.aircraftPrice)
          && Objects.equals(airframeRelativeSparesCosts, other.airframeRelativeSparesCosts)
          && Objects.equals(enginesRelativeSparesCosts, other.enginesRelativeSparesCosts)
          && Objects.equals(interestRate, other.interestRate)
          && Objects.equals(insuranceRate, other.insuranceRate)
          && Objects.equals(cabinLabourRate, other.cabinLabourRate)
          && Objects.equals(cockpitLabourRate, other.cockpitLabourRate)
          && Objects.equals(fuelUnitPrice, other.fuelUnitPrice)
          && Objects.equals(landingCharges, other.landingCharges)
          && Objects.equals(navigationCharges, other.navigationCharges)
          && Objects.equals(groundHandlingCharges, other.groundHandlingCharges)
          && Objects.equals(noiseCharges, other.noiseCharges)
          && Objects.equals(emissionsChargesNOx, other.emissionsChargesNOx)
          && Objects.equals(emissionsChargesCO, other.emissionsChargesCO)
          && Objects.equals(emissionsChargesCO2, other.emissionsChargesCO2)
          && Objects.equals(emissionsChargesHC, other.emissionsChargesHC)
          && Objects.equals(airframeLabourRate, other.airframeLabourRate)
          && Objects.equals(engineLabourRate, other.engineLabourRate)
          && Objects.equals(enginePrice, other.enginePrice)
          && Objects.equals(taskList, other.taskList)
          && Objects.equals(plotList, other.plotList);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          id,
          aircraft,
          operatingConditions,
          maximumTakeOffMass,
          operatingEmptyMass,
          payload,
          range,
          blockFuelMass,
          flightTime,
          utilization,
          lifeSpan,
          residualValue,
          aircraftPrice,
          airframeRelativeSparesCosts,
          enginesRelativeSparesCosts,
          interestRate,
          insuranceRate,
          cabinLabourRate,
          cockpitLabourRate,
          fuelUnitPrice,
          landingCharges,
          navigationCharges,
          groundHandlingCharges,
          noiseCharges,
          emissionsChargesNOx,
          emissionsChargesCO,
          emissionsChargesCO2,
          emissionsChargesHC,
          airframeLabourRate,
          engineLabourRate,
          enginePrice,
          taskList,
          plotList);
    }

    @Override
    public String toString() {
      return "IACCostsManager{"
          + "id="
          + id
          + ", "
          + "aircraft="
          + aircraft
          + ", "
          + "operatingConditions="
          + operatingConditions
          + ", "
          + "maximumTakeOffMass="
          + maximumTakeOffMass
          + ", "
          + "operatingEmptyMass="
          + operatingEmptyMass
          + ", "
          + "payload="
          + payload
          + ", "
          + "range="
          + range
          + ", "
          + "blockFuelMass="
          + blockFuelMass
          + ", "
          + "flightTime="
          + flightTime
          + ", "
          + "utilization="
          + utilization
          + ", "
          + "lifeSpan="
          + lifeSpan
          + ", "
          + "residualValue="
          + residualValue
          + ", "
          + "aircraftPrice="
          + aircraftPrice
          + ", "
          + "airframeRelativeSparesCosts="
          + airframeRelativeSparesCosts
          + ", "
          + "enginesRelativeSparesCosts="
          + enginesRelativeSparesCosts
          + ", "
          + "interestRate="
          + interestRate
          + ", "
          + "insuranceRate="
          + insuranceRate
          + ", "
          + "cabinLabourRate="
          + cabinLabourRate
          + ", "
          + "cockpitLabourRate="
          + cockpitLabourRate
          + ", "
          + "fuelUnitPrice="
          + fuelUnitPrice
          + ", "
          + "landingCharges="
          + landingCharges
          + ", "
          + "navigationCharges="
          + navigationCharges
          + ", "
          + "groundHandlingCharges="
          + groundHandlingCharges
          + ", "
          + "noiseCharges="
          + noiseCharges
          + ", "
          + "emissionsChargesNOx="
          + emissionsChargesNOx
          + ", "
          + "emissionsChargesCO="
          + emissionsChargesCO
          + ", "
          + "emissionsChargesCO2="
          + emissionsChargesCO2
          + ", "
          + "emissionsChargesHC="
          + emissionsChargesHC
          + ", "
          + "airframeLabourRate="
          + airframeLabourRate
          + ", "
          + "engineLabourRate="
          + engineLabourRate
          + ", "
          + "enginePrice="
          + enginePrice
          + ", "
          + "taskList="
          + taskList
          + ", "
          + "plotList="
          + plotList
          + "}";
    }
  }

  private static final class Partial implements IACCostsManager {
    private final String id;
    private final Aircraft aircraft;
    private final OperatingConditions operatingConditions;
    private final Amount<Mass> maximumTakeOffMass;
    private final Amount<Mass> operatingEmptyMass;
    private final Amount<Mass> payload;
    private final Amount<Length> range;
    private final Amount<Mass> blockFuelMass;
    private final Amount<Duration> flightTime;
    private final Amount<?> utilization;
    private final Amount<Duration> lifeSpan;
    private final Double residualValue;
    private final Amount<Money> aircraftPrice;
    private final Double airframeRelativeSparesCosts;
    private final Double enginesRelativeSparesCosts;
    private final Double interestRate;
    private final Double insuranceRate;
    private final Amount<?> cabinLabourRate;
    private final Amount<?> cockpitLabourRate;
    private final Amount<?> fuelUnitPrice;
    private final Amount<?> landingCharges;
    private final Amount<?> navigationCharges;
    private final Amount<?> groundHandlingCharges;
    private final Amount<?> noiseCharges;
    private final Amount<?> emissionsChargesNOx;
    private final Amount<?> emissionsChargesCO;
    private final Amount<?> emissionsChargesCO2;
    private final Amount<?> emissionsChargesHC;
    private final Amount<?> airframeLabourRate;
    private final Amount<?> engineLabourRate;
    private final Amount<Money> enginePrice;
    private final Map<CostsEnum, MethodEnum> taskList;
    private final List<CostsPlotEnum> plotList;
    private final EnumSet<IACCostsManager_Builder.Property> _unsetProperties;

    Partial(IACCostsManager_Builder builder) {
      this.id = builder.id;
      this.aircraft = builder.aircraft;
      this.operatingConditions = builder.operatingConditions;
      this.maximumTakeOffMass = builder.maximumTakeOffMass;
      this.operatingEmptyMass = builder.operatingEmptyMass;
      this.payload = builder.payload;
      this.range = builder.range;
      this.blockFuelMass = builder.blockFuelMass;
      this.flightTime = builder.flightTime;
      this.utilization = builder.utilization;
      this.lifeSpan = builder.lifeSpan;
      this.residualValue = builder.residualValue;
      this.aircraftPrice = builder.aircraftPrice;
      this.airframeRelativeSparesCosts = builder.airframeRelativeSparesCosts;
      this.enginesRelativeSparesCosts = builder.enginesRelativeSparesCosts;
      this.interestRate = builder.interestRate;
      this.insuranceRate = builder.insuranceRate;
      this.cabinLabourRate = builder.cabinLabourRate;
      this.cockpitLabourRate = builder.cockpitLabourRate;
      this.fuelUnitPrice = builder.fuelUnitPrice;
      this.landingCharges = builder.landingCharges;
      this.navigationCharges = builder.navigationCharges;
      this.groundHandlingCharges = builder.groundHandlingCharges;
      this.noiseCharges = builder.noiseCharges;
      this.emissionsChargesNOx = builder.emissionsChargesNOx;
      this.emissionsChargesCO = builder.emissionsChargesCO;
      this.emissionsChargesCO2 = builder.emissionsChargesCO2;
      this.emissionsChargesHC = builder.emissionsChargesHC;
      this.airframeLabourRate = builder.airframeLabourRate;
      this.engineLabourRate = builder.engineLabourRate;
      this.enginePrice = builder.enginePrice;
      this.taskList = ImmutableMap.copyOf(builder.taskList);
      this.plotList = ImmutableList.copyOf(builder.plotList);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getId() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.ID)) {
        throw new UnsupportedOperationException("id not set");
      }
      return id;
    }

    @Override
    public Aircraft getAircraft() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)) {
        throw new UnsupportedOperationException("aircraft not set");
      }
      return aircraft;
    }

    @Override
    public OperatingConditions getOperatingConditions() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)) {
        throw new UnsupportedOperationException("operatingConditions not set");
      }
      return operatingConditions;
    }

    @Override
    public Amount<Mass> getMaximumTakeOffMass() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)) {
        throw new UnsupportedOperationException("maximumTakeOffMass not set");
      }
      return maximumTakeOffMass;
    }

    @Override
    public Amount<Mass> getOperatingEmptyMass() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)) {
        throw new UnsupportedOperationException("operatingEmptyMass not set");
      }
      return operatingEmptyMass;
    }

    @Override
    public Amount<Mass> getPayload() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)) {
        throw new UnsupportedOperationException("payload not set");
      }
      return payload;
    }

    @Override
    public Amount<Length> getRange() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)) {
        throw new UnsupportedOperationException("range not set");
      }
      return range;
    }

    @Override
    public Amount<Mass> getBlockFuelMass() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)) {
        throw new UnsupportedOperationException("blockFuelMass not set");
      }
      return blockFuelMass;
    }

    @Override
    public Amount<Duration> getFlightTime() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)) {
        throw new UnsupportedOperationException("flightTime not set");
      }
      return flightTime;
    }

    @Override
    public Amount<?> getUtilization() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.UTILIZATION)) {
        throw new UnsupportedOperationException("utilization not set");
      }
      return utilization;
    }

    @Override
    public Amount<Duration> getLifeSpan() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)) {
        throw new UnsupportedOperationException("lifeSpan not set");
      }
      return lifeSpan;
    }

    @Override
    public Double getResidualValue() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)) {
        throw new UnsupportedOperationException("residualValue not set");
      }
      return residualValue;
    }

    @Override
    public Amount<Money> getAircraftPrice() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT_PRICE)) {
        throw new UnsupportedOperationException("aircraftPrice not set");
      }
      return aircraftPrice;
    }

    @Override
    public Double getAirframeRelativeSparesCosts() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)) {
        throw new UnsupportedOperationException("airframeRelativeSparesCosts not set");
      }
      return airframeRelativeSparesCosts;
    }

    @Override
    public Double getEnginesRelativeSparesCosts() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)) {
        throw new UnsupportedOperationException("enginesRelativeSparesCosts not set");
      }
      return enginesRelativeSparesCosts;
    }

    @Override
    public Double getInterestRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)) {
        throw new UnsupportedOperationException("interestRate not set");
      }
      return interestRate;
    }

    @Override
    public Double getInsuranceRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)) {
        throw new UnsupportedOperationException("insuranceRate not set");
      }
      return insuranceRate;
    }

    @Override
    public Amount<?> getCabinLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)) {
        throw new UnsupportedOperationException("cabinLabourRate not set");
      }
      return cabinLabourRate;
    }

    @Override
    public Amount<?> getCockpitLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)) {
        throw new UnsupportedOperationException("cockpitLabourRate not set");
      }
      return cockpitLabourRate;
    }

    @Override
    public Amount<?> getFuelUnitPrice() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)) {
        throw new UnsupportedOperationException("fuelUnitPrice not set");
      }
      return fuelUnitPrice;
    }

    @Override
    public Amount<?> getLandingCharges() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.LANDING_CHARGES)) {
        throw new UnsupportedOperationException("landingCharges not set");
      }
      return landingCharges;
    }

    @Override
    public Amount<?> getNavigationCharges() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.NAVIGATION_CHARGES)) {
        throw new UnsupportedOperationException("navigationCharges not set");
      }
      return navigationCharges;
    }

    @Override
    public Amount<?> getGroundHandlingCharges() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES)) {
        throw new UnsupportedOperationException("groundHandlingCharges not set");
      }
      return groundHandlingCharges;
    }

    @Override
    public Amount<?> getNoiseCharges() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CHARGES)) {
        throw new UnsupportedOperationException("noiseCharges not set");
      }
      return noiseCharges;
    }

    @Override
    public Amount<?> getEmissionsChargesNOx() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX)) {
        throw new UnsupportedOperationException("emissionsChargesNOx not set");
      }
      return emissionsChargesNOx;
    }

    @Override
    public Amount<?> getEmissionsChargesCO() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO)) {
        throw new UnsupportedOperationException("emissionsChargesCO not set");
      }
      return emissionsChargesCO;
    }

    @Override
    public Amount<?> getEmissionsChargesCO2() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2)) {
        throw new UnsupportedOperationException("emissionsChargesCO2 not set");
      }
      return emissionsChargesCO2;
    }

    @Override
    public Amount<?> getEmissionsChargesHC() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC)) {
        throw new UnsupportedOperationException("emissionsChargesHC not set");
      }
      return emissionsChargesHC;
    }

    @Override
    public Amount<?> getAirframeLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)) {
        throw new UnsupportedOperationException("airframeLabourRate not set");
      }
      return airframeLabourRate;
    }

    @Override
    public Amount<?> getEngineLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)) {
        throw new UnsupportedOperationException("engineLabourRate not set");
      }
      return engineLabourRate;
    }

    @Override
    public Amount<Money> getEnginePrice() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_PRICE)) {
        throw new UnsupportedOperationException("enginePrice not set");
      }
      return enginePrice;
    }

    @Override
    public Map<CostsEnum, MethodEnum> getTaskList() {
      return taskList;
    }

    @Override
    public List<CostsPlotEnum> getPlotList() {
      return plotList;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACCostsManager_Builder.Partial)) {
        return false;
      }
      IACCostsManager_Builder.Partial other = (IACCostsManager_Builder.Partial) obj;
      return Objects.equals(id, other.id)
          && Objects.equals(aircraft, other.aircraft)
          && Objects.equals(operatingConditions, other.operatingConditions)
          && Objects.equals(maximumTakeOffMass, other.maximumTakeOffMass)
          && Objects.equals(operatingEmptyMass, other.operatingEmptyMass)
          && Objects.equals(payload, other.payload)
          && Objects.equals(range, other.range)
          && Objects.equals(blockFuelMass, other.blockFuelMass)
          && Objects.equals(flightTime, other.flightTime)
          && Objects.equals(utilization, other.utilization)
          && Objects.equals(lifeSpan, other.lifeSpan)
          && Objects.equals(residualValue, other.residualValue)
          && Objects.equals(aircraftPrice, other.aircraftPrice)
          && Objects.equals(airframeRelativeSparesCosts, other.airframeRelativeSparesCosts)
          && Objects.equals(enginesRelativeSparesCosts, other.enginesRelativeSparesCosts)
          && Objects.equals(interestRate, other.interestRate)
          && Objects.equals(insuranceRate, other.insuranceRate)
          && Objects.equals(cabinLabourRate, other.cabinLabourRate)
          && Objects.equals(cockpitLabourRate, other.cockpitLabourRate)
          && Objects.equals(fuelUnitPrice, other.fuelUnitPrice)
          && Objects.equals(landingCharges, other.landingCharges)
          && Objects.equals(navigationCharges, other.navigationCharges)
          && Objects.equals(groundHandlingCharges, other.groundHandlingCharges)
          && Objects.equals(noiseCharges, other.noiseCharges)
          && Objects.equals(emissionsChargesNOx, other.emissionsChargesNOx)
          && Objects.equals(emissionsChargesCO, other.emissionsChargesCO)
          && Objects.equals(emissionsChargesCO2, other.emissionsChargesCO2)
          && Objects.equals(emissionsChargesHC, other.emissionsChargesHC)
          && Objects.equals(airframeLabourRate, other.airframeLabourRate)
          && Objects.equals(engineLabourRate, other.engineLabourRate)
          && Objects.equals(enginePrice, other.enginePrice)
          && Objects.equals(taskList, other.taskList)
          && Objects.equals(plotList, other.plotList)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          id,
          aircraft,
          operatingConditions,
          maximumTakeOffMass,
          operatingEmptyMass,
          payload,
          range,
          blockFuelMass,
          flightTime,
          utilization,
          lifeSpan,
          residualValue,
          aircraftPrice,
          airframeRelativeSparesCosts,
          enginesRelativeSparesCosts,
          interestRate,
          insuranceRate,
          cabinLabourRate,
          cockpitLabourRate,
          fuelUnitPrice,
          landingCharges,
          navigationCharges,
          groundHandlingCharges,
          noiseCharges,
          emissionsChargesNOx,
          emissionsChargesCO,
          emissionsChargesCO2,
          emissionsChargesHC,
          airframeLabourRate,
          engineLabourRate,
          enginePrice,
          taskList,
          plotList,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial IACCostsManager{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.ID) ? "id=" + id : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
                  ? "aircraft=" + aircraft
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
                  ? "operatingConditions=" + operatingConditions
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
                  ? "maximumTakeOffMass=" + maximumTakeOffMass
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
                  ? "operatingEmptyMass=" + operatingEmptyMass
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
                  ? "payload=" + payload
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
                  ? "range=" + range
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
                  ? "blockFuelMass=" + blockFuelMass
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
                  ? "flightTime=" + flightTime
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.UTILIZATION)
                  ? "utilization=" + utilization
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
                  ? "lifeSpan=" + lifeSpan
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
                  ? "residualValue=" + residualValue
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT_PRICE)
                  ? "aircraftPrice=" + aircraftPrice
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
                  ? "airframeRelativeSparesCosts=" + airframeRelativeSparesCosts
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
                  ? "enginesRelativeSparesCosts=" + enginesRelativeSparesCosts
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
                  ? "interestRate=" + interestRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
                  ? "insuranceRate=" + insuranceRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
                  ? "cabinLabourRate=" + cabinLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
                  ? "cockpitLabourRate=" + cockpitLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
                  ? "fuelUnitPrice=" + fuelUnitPrice
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.LANDING_CHARGES)
                  ? "landingCharges=" + landingCharges
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.NAVIGATION_CHARGES)
                  ? "navigationCharges=" + navigationCharges
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.GROUND_HANDLING_CHARGES)
                  ? "groundHandlingCharges=" + groundHandlingCharges
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CHARGES)
                  ? "noiseCharges=" + noiseCharges
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_N_OX)
                  ? "emissionsChargesNOx=" + emissionsChargesNOx
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_CO)
                  ? "emissionsChargesCO=" + emissionsChargesCO
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_C_O2)
                  ? "emissionsChargesCO2=" + emissionsChargesCO2
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CHARGES_HC)
                  ? "emissionsChargesHC=" + emissionsChargesHC
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
                  ? "airframeLabourRate=" + airframeLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
                  ? "engineLabourRate=" + engineLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_PRICE)
                  ? "enginePrice=" + enginePrice
                  : null),
              "taskList=" + taskList,
              "plotList=" + plotList)
          + "}";
    }
  }
}
