// Autogenerated code. Do not modify.
package analyses;

import aircraft.components.Aircraft;
import analyses.IACCostsManager;
import analyses.OperatingConditions;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import configuration.enumerations.CostsDerivedDataEnum;
import configuration.enumerations.CostsEnum;
import configuration.enumerations.CostsPlotEnum;
import configuration.enumerations.MethodEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.measure.quantity.Dimensionless;
import javax.measure.quantity.Duration;
import javax.measure.quantity.Length;
import javax.measure.quantity.Mass;
import org.jscience.economics.money.Money;
import org.jscience.physics.amount.Amount;

/**
 * Auto-generated superclass of {@link IACCostsManager.Builder},
 * derived from the API of {@link IACCostsManager}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IACCostsManager_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   */
  public static IACCostsManager.Builder from(IACCostsManager value) {
    return new IACCostsManager.Builder().mergeFrom(value);
  }

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    AIRCRAFT("aircraft"),
    OPERATING_CONDITIONS("operatingConditions"),
    MAXIMUM_TAKE_OFF_MASS("maximumTakeOffMass"),
    OPERATING_EMPTY_MASS("operatingEmptyMass"),
    PAYLOAD("payload"),
    RANGE("range"),
    BLOCK_FUEL_MASS("blockFuelMass"),
    FLIGHT_TIME("flightTime"),
    LIFE_SPAN("lifeSpan"),
    RESIDUAL_VALUE("residualValue"),
    AIRFRAME_RELATIVE_SPARES_COSTS("airframeRelativeSparesCosts"),
    ENGINES_RELATIVE_SPARES_COSTS("enginesRelativeSparesCosts"),
    INTEREST_RATE("interestRate"),
    INSURANCE_RATE("insuranceRate"),
    CABIN_LABOUR_RATE("cabinLabourRate"),
    COCKPIT_LABOUR_RATE("cockpitLabourRate"),
    FUEL_UNIT_PRICE("fuelUnitPrice"),
    NOISE_CONSTANT("noiseConstant"),
    NOISE_DEPARTURE_THRESHOLD("noiseDepartureThreshold"),
    NOISE_ARRIVAL_THRESHOLD("noiseArrivalThreshold"),
    APPROACH_CERTIFIED_NOISE_LEVEL("approachCertifiedNoiseLevel"),
    LATERAL_CERTIFIED_NOISE_LEVEL("lateralCertifiedNoiseLevel"),
    FLYOVER_CERTIFIED_NOISE_LEVEL("flyoverCertifiedNoiseLevel"),
    EMISSIONS_CONSTANT_N_OX("emissionsConstantNOx"),
    MASS_N_OX("massNOx"),
    DP_HC_FOO_N_OX("dpHCFooNOx"),
    EMISSIONS_CONSTANT_CO("emissionsConstantCO"),
    MASS_CO("massCO"),
    DP_HC_FOO_CO("dpHCFooCO"),
    EMISSIONS_CONSTANT_C_O2("emissionsConstantCO2"),
    MASS_C_O2("massCO2"),
    DP_HC_FOO_C_O2("dpHCFooCO2"),
    EMISSIONS_CONSTANT_HC("emissionsConstantHC"),
    MASS_HC("massHC"),
    DP_HC_FOO_HC("dpHCFooHC"),
    AIRFRAME_LABOUR_RATE("airframeLabourRate"),
    ENGINE_LABOUR_RATE("engineLabourRate"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private Aircraft aircraft;
  private OperatingConditions operatingConditions;
  private Amount<Mass> maximumTakeOffMass;
  private Amount<Mass> operatingEmptyMass;
  private Amount<Mass> payload;
  private Amount<Length> range;
  private Amount<Mass> blockFuelMass;
  private Amount<Duration> flightTime;
  private final LinkedHashMap<MethodEnum, Amount<?>> utilization = new LinkedHashMap<>();
  private Amount<Duration> lifeSpan;
  private Double residualValue;
  private final LinkedHashMap<MethodEnum, Amount<Money>> aircraftPrice = new LinkedHashMap<>();
  private Double airframeRelativeSparesCosts;
  private Double enginesRelativeSparesCosts;
  private Double interestRate;
  private Double insuranceRate;
  private Amount<?> cabinLabourRate;
  private Amount<?> cockpitLabourRate;
  private Amount<?> fuelUnitPrice;
  private final LinkedHashMap<MethodEnum, Amount<?>> landingCharges = new LinkedHashMap<>();
  private final LinkedHashMap<MethodEnum, Amount<?>> navigationCharges = new LinkedHashMap<>();
  private final LinkedHashMap<MethodEnum, Amount<?>> groundHandlingCharges = new LinkedHashMap<>();
  private final LinkedHashMap<MethodEnum, Amount<?>> noiseCharges = new LinkedHashMap<>();
  private Amount<Money> noiseConstant;
  private Amount<Dimensionless> noiseDepartureThreshold;
  private Amount<Dimensionless> noiseArrivalThreshold;
  private Amount<Dimensionless> approachCertifiedNoiseLevel;
  private Amount<Dimensionless> lateralCertifiedNoiseLevel;
  private Amount<Dimensionless> flyoverCertifiedNoiseLevel;
  private final LinkedHashMap<MethodEnum, Amount<?>> emissionsChargesNOx = new LinkedHashMap<>();
  private Amount<Money> emissionsConstantNOx;
  private Amount<Mass> massNOx;
  private Amount<?> dpHCFooNOx;
  private final LinkedHashMap<MethodEnum, Amount<?>> emissionsChargesCO = new LinkedHashMap<>();
  private Amount<Money> emissionsConstantCO;
  private Amount<Mass> massCO;
  private Amount<?> dpHCFooCO;
  private final LinkedHashMap<MethodEnum, Amount<?>> emissionsChargesCO2 = new LinkedHashMap<>();
  private Amount<Money> emissionsConstantCO2;
  private Amount<Mass> massCO2;
  private Amount<?> dpHCFooCO2;
  private final LinkedHashMap<MethodEnum, Amount<?>> emissionsChargesHC = new LinkedHashMap<>();
  private Amount<Money> emissionsConstantHC;
  private Amount<Mass> massHC;
  private Amount<?> dpHCFooHC;
  private Amount<?> airframeLabourRate;
  private Amount<?> engineLabourRate;
  private final LinkedHashMap<MethodEnum, Amount<Money>> enginePrice = new LinkedHashMap<>();
  private final ArrayList<CostsEnum> taskList = new ArrayList<>();
  private final LinkedHashMap<CostsDerivedDataEnum, MethodEnum> derivedDataMethodMap =
      new LinkedHashMap<>();
  private final ArrayList<CostsPlotEnum> plotList = new ArrayList<>();
  private final EnumSet<IACCostsManager_Builder.Property> _unsetProperties =
      EnumSet.allOf(IACCostsManager_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAircraft()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code aircraft} is null
   */
  public IACCostsManager.Builder setAircraft(Aircraft aircraft) {
    this.aircraft = Preconditions.checkNotNull(aircraft);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRCRAFT);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAircraft()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAircraft(UnaryOperator<Aircraft> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAircraft(mapper.apply(getAircraft()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAircraft()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Aircraft getAircraft() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT), "aircraft not set");
    return aircraft;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getOperatingConditions()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code operatingConditions} is null
   */
  public IACCostsManager.Builder setOperatingConditions(OperatingConditions operatingConditions) {
    this.operatingConditions = Preconditions.checkNotNull(operatingConditions);
    _unsetProperties.remove(IACCostsManager_Builder.Property.OPERATING_CONDITIONS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getOperatingConditions()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapOperatingConditions(UnaryOperator<OperatingConditions> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOperatingConditions(mapper.apply(getOperatingConditions()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getOperatingConditions()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public OperatingConditions getOperatingConditions() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS),
        "operatingConditions not set");
    return operatingConditions;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getMaximumTakeOffMass()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code maximumTakeOffMass} is null
   */
  public IACCostsManager.Builder setMaximumTakeOffMass(Amount<Mass> maximumTakeOffMass) {
    this.maximumTakeOffMass = Preconditions.checkNotNull(maximumTakeOffMass);
    _unsetProperties.remove(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getMaximumTakeOffMass()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapMaximumTakeOffMass(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMaximumTakeOffMass(mapper.apply(getMaximumTakeOffMass()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getMaximumTakeOffMass()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getMaximumTakeOffMass() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS),
        "maximumTakeOffMass not set");
    return maximumTakeOffMass;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getOperatingEmptyMass()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code operatingEmptyMass} is null
   */
  public IACCostsManager.Builder setOperatingEmptyMass(Amount<Mass> operatingEmptyMass) {
    this.operatingEmptyMass = Preconditions.checkNotNull(operatingEmptyMass);
    _unsetProperties.remove(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getOperatingEmptyMass()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapOperatingEmptyMass(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setOperatingEmptyMass(mapper.apply(getOperatingEmptyMass()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getOperatingEmptyMass()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getOperatingEmptyMass() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS),
        "operatingEmptyMass not set");
    return operatingEmptyMass;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getPayload()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code payload} is null
   */
  public IACCostsManager.Builder setPayload(Amount<Mass> payload) {
    this.payload = Preconditions.checkNotNull(payload);
    _unsetProperties.remove(IACCostsManager_Builder.Property.PAYLOAD);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getPayload()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapPayload(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setPayload(mapper.apply(getPayload()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getPayload()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getPayload() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD), "payload not set");
    return payload;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getRange()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code range} is null
   */
  public IACCostsManager.Builder setRange(Amount<Length> range) {
    this.range = Preconditions.checkNotNull(range);
    _unsetProperties.remove(IACCostsManager_Builder.Property.RANGE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getRange()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapRange(UnaryOperator<Amount<Length>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setRange(mapper.apply(getRange()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getRange()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Length> getRange() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.RANGE), "range not set");
    return range;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getBlockFuelMass()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code blockFuelMass} is null
   */
  public IACCostsManager.Builder setBlockFuelMass(Amount<Mass> blockFuelMass) {
    this.blockFuelMass = Preconditions.checkNotNull(blockFuelMass);
    _unsetProperties.remove(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getBlockFuelMass()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapBlockFuelMass(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setBlockFuelMass(mapper.apply(getBlockFuelMass()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getBlockFuelMass()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getBlockFuelMass() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS),
        "blockFuelMass not set");
    return blockFuelMass;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getFlightTime()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code flightTime} is null
   */
  public IACCostsManager.Builder setFlightTime(Amount<Duration> flightTime) {
    this.flightTime = Preconditions.checkNotNull(flightTime);
    _unsetProperties.remove(IACCostsManager_Builder.Property.FLIGHT_TIME);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getFlightTime()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapFlightTime(UnaryOperator<Amount<Duration>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFlightTime(mapper.apply(getFlightTime()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getFlightTime()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Duration> getFlightTime() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME),
        "flightTime not set");
    return flightTime;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getUtilization()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putUtilization(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    utilization.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getUtilization()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllUtilization(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putUtilization(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getUtilization()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeUtilization(MethodEnum key) {
    Preconditions.checkNotNull(key);
    utilization.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getUtilization()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateUtilization(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putUtilization is overridden, this method will be updated to delegate to it
    mutator.accept(utilization);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getUtilization()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearUtilization() {
    utilization.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getUtilization()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getUtilization() {
    return Collections.unmodifiableMap(utilization);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getLifeSpan()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code lifeSpan} is null
   */
  public IACCostsManager.Builder setLifeSpan(Amount<Duration> lifeSpan) {
    this.lifeSpan = Preconditions.checkNotNull(lifeSpan);
    _unsetProperties.remove(IACCostsManager_Builder.Property.LIFE_SPAN);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getLifeSpan()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapLifeSpan(UnaryOperator<Amount<Duration>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLifeSpan(mapper.apply(getLifeSpan()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getLifeSpan()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Duration> getLifeSpan() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN), "lifeSpan not set");
    return lifeSpan;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getResidualValue()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code residualValue} is null
   */
  public IACCostsManager.Builder setResidualValue(Double residualValue) {
    this.residualValue = Preconditions.checkNotNull(residualValue);
    _unsetProperties.remove(IACCostsManager_Builder.Property.RESIDUAL_VALUE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getResidualValue()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapResidualValue(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setResidualValue(mapper.apply(getResidualValue()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getResidualValue()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getResidualValue() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE),
        "residualValue not set");
    return residualValue;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getAircraftPrice()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putAircraftPrice(MethodEnum key, Amount<Money> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    aircraftPrice.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getAircraftPrice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllAircraftPrice(
      Map<? extends MethodEnum, ? extends Amount<Money>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<Money>> entry : map.entrySet()) {
      putAircraftPrice(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getAircraftPrice()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeAircraftPrice(MethodEnum key) {
    Preconditions.checkNotNull(key);
    aircraftPrice.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getAircraftPrice()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateAircraftPrice(
      Consumer<? super Map<MethodEnum, Amount<Money>>> mutator) {
    // If putAircraftPrice is overridden, this method will be updated to delegate to it
    mutator.accept(aircraftPrice);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getAircraftPrice()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearAircraftPrice() {
    aircraftPrice.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getAircraftPrice()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<Money>> getAircraftPrice() {
    return Collections.unmodifiableMap(aircraftPrice);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAirframeRelativeSparesCosts()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code airframeRelativeSparesCosts} is null
   */
  public IACCostsManager.Builder setAirframeRelativeSparesCosts(
      Double airframeRelativeSparesCosts) {
    this.airframeRelativeSparesCosts = Preconditions.checkNotNull(airframeRelativeSparesCosts);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAirframeRelativeSparesCosts()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAirframeRelativeSparesCosts(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAirframeRelativeSparesCosts(mapper.apply(getAirframeRelativeSparesCosts()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAirframeRelativeSparesCosts()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getAirframeRelativeSparesCosts() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS),
        "airframeRelativeSparesCosts not set");
    return airframeRelativeSparesCosts;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEnginesRelativeSparesCosts()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code enginesRelativeSparesCosts} is null
   */
  public IACCostsManager.Builder setEnginesRelativeSparesCosts(Double enginesRelativeSparesCosts) {
    this.enginesRelativeSparesCosts = Preconditions.checkNotNull(enginesRelativeSparesCosts);
    _unsetProperties.remove(IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEnginesRelativeSparesCosts()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEnginesRelativeSparesCosts(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEnginesRelativeSparesCosts(mapper.apply(getEnginesRelativeSparesCosts()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEnginesRelativeSparesCosts()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getEnginesRelativeSparesCosts() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS),
        "enginesRelativeSparesCosts not set");
    return enginesRelativeSparesCosts;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getInterestRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code interestRate} is null
   */
  public IACCostsManager.Builder setInterestRate(Double interestRate) {
    this.interestRate = Preconditions.checkNotNull(interestRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.INTEREST_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getInterestRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapInterestRate(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setInterestRate(mapper.apply(getInterestRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getInterestRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getInterestRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE),
        "interestRate not set");
    return interestRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getInsuranceRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code insuranceRate} is null
   */
  public IACCostsManager.Builder setInsuranceRate(Double insuranceRate) {
    this.insuranceRate = Preconditions.checkNotNull(insuranceRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.INSURANCE_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getInsuranceRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapInsuranceRate(UnaryOperator<Double> mapper) {
    Preconditions.checkNotNull(mapper);
    return setInsuranceRate(mapper.apply(getInsuranceRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getInsuranceRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Double getInsuranceRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE),
        "insuranceRate not set");
    return insuranceRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getCabinLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code cabinLabourRate} is null
   */
  public IACCostsManager.Builder setCabinLabourRate(Amount<?> cabinLabourRate) {
    this.cabinLabourRate = Preconditions.checkNotNull(cabinLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getCabinLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapCabinLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCabinLabourRate(mapper.apply(getCabinLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getCabinLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getCabinLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE),
        "cabinLabourRate not set");
    return cabinLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getCockpitLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code cockpitLabourRate} is null
   */
  public IACCostsManager.Builder setCockpitLabourRate(Amount<?> cockpitLabourRate) {
    this.cockpitLabourRate = Preconditions.checkNotNull(cockpitLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getCockpitLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapCockpitLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCockpitLabourRate(mapper.apply(getCockpitLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getCockpitLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getCockpitLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE),
        "cockpitLabourRate not set");
    return cockpitLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getFuelUnitPrice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fuelUnitPrice} is null
   */
  public IACCostsManager.Builder setFuelUnitPrice(Amount<?> fuelUnitPrice) {
    this.fuelUnitPrice = Preconditions.checkNotNull(fuelUnitPrice);
    _unsetProperties.remove(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getFuelUnitPrice()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapFuelUnitPrice(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFuelUnitPrice(mapper.apply(getFuelUnitPrice()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getFuelUnitPrice()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getFuelUnitPrice() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE),
        "fuelUnitPrice not set");
    return fuelUnitPrice;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getLandingCharges()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putLandingCharges(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    landingCharges.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getLandingCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllLandingCharges(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putLandingCharges(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getLandingCharges()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeLandingCharges(MethodEnum key) {
    Preconditions.checkNotNull(key);
    landingCharges.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getLandingCharges()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateLandingCharges(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putLandingCharges is overridden, this method will be updated to delegate to it
    mutator.accept(landingCharges);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getLandingCharges()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearLandingCharges() {
    landingCharges.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getLandingCharges()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getLandingCharges() {
    return Collections.unmodifiableMap(landingCharges);
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getNavigationCharges()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putNavigationCharges(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    navigationCharges.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getNavigationCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllNavigationCharges(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putNavigationCharges(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getNavigationCharges()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeNavigationCharges(MethodEnum key) {
    Preconditions.checkNotNull(key);
    navigationCharges.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getNavigationCharges()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateNavigationCharges(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putNavigationCharges is overridden, this method will be updated to delegate to it
    mutator.accept(navigationCharges);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getNavigationCharges()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearNavigationCharges() {
    navigationCharges.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getNavigationCharges()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getNavigationCharges() {
    return Collections.unmodifiableMap(navigationCharges);
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getGroundHandlingCharges()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putGroundHandlingCharges(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    groundHandlingCharges.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getGroundHandlingCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllGroundHandlingCharges(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putGroundHandlingCharges(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getGroundHandlingCharges()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeGroundHandlingCharges(MethodEnum key) {
    Preconditions.checkNotNull(key);
    groundHandlingCharges.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getGroundHandlingCharges()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateGroundHandlingCharges(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putGroundHandlingCharges is overridden, this method will be updated to delegate to it
    mutator.accept(groundHandlingCharges);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getGroundHandlingCharges()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearGroundHandlingCharges() {
    groundHandlingCharges.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getGroundHandlingCharges()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getGroundHandlingCharges() {
    return Collections.unmodifiableMap(groundHandlingCharges);
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getNoiseCharges()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putNoiseCharges(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    noiseCharges.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getNoiseCharges()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllNoiseCharges(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putNoiseCharges(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getNoiseCharges()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeNoiseCharges(MethodEnum key) {
    Preconditions.checkNotNull(key);
    noiseCharges.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getNoiseCharges()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateNoiseCharges(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putNoiseCharges is overridden, this method will be updated to delegate to it
    mutator.accept(noiseCharges);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getNoiseCharges()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearNoiseCharges() {
    noiseCharges.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getNoiseCharges()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getNoiseCharges() {
    return Collections.unmodifiableMap(noiseCharges);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getNoiseConstant()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code noiseConstant} is null
   */
  public IACCostsManager.Builder setNoiseConstant(Amount<Money> noiseConstant) {
    this.noiseConstant = Preconditions.checkNotNull(noiseConstant);
    _unsetProperties.remove(IACCostsManager_Builder.Property.NOISE_CONSTANT);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getNoiseConstant()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapNoiseConstant(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNoiseConstant(mapper.apply(getNoiseConstant()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getNoiseConstant()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getNoiseConstant() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CONSTANT),
        "noiseConstant not set");
    return noiseConstant;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getNoiseDepartureThreshold()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code noiseDepartureThreshold} is null
   */
  public IACCostsManager.Builder setNoiseDepartureThreshold(
      Amount<Dimensionless> noiseDepartureThreshold) {
    this.noiseDepartureThreshold = Preconditions.checkNotNull(noiseDepartureThreshold);
    _unsetProperties.remove(IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getNoiseDepartureThreshold()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapNoiseDepartureThreshold(
      UnaryOperator<Amount<Dimensionless>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNoiseDepartureThreshold(mapper.apply(getNoiseDepartureThreshold()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getNoiseDepartureThreshold()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Dimensionless> getNoiseDepartureThreshold() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD),
        "noiseDepartureThreshold not set");
    return noiseDepartureThreshold;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getNoiseArrivalThreshold()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code noiseArrivalThreshold} is null
   */
  public IACCostsManager.Builder setNoiseArrivalThreshold(
      Amount<Dimensionless> noiseArrivalThreshold) {
    this.noiseArrivalThreshold = Preconditions.checkNotNull(noiseArrivalThreshold);
    _unsetProperties.remove(IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getNoiseArrivalThreshold()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapNoiseArrivalThreshold(
      UnaryOperator<Amount<Dimensionless>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNoiseArrivalThreshold(mapper.apply(getNoiseArrivalThreshold()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getNoiseArrivalThreshold()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Dimensionless> getNoiseArrivalThreshold() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD),
        "noiseArrivalThreshold not set");
    return noiseArrivalThreshold;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getApproachCertifiedNoiseLevel()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code approachCertifiedNoiseLevel} is null
   */
  public IACCostsManager.Builder setApproachCertifiedNoiseLevel(
      Amount<Dimensionless> approachCertifiedNoiseLevel) {
    this.approachCertifiedNoiseLevel = Preconditions.checkNotNull(approachCertifiedNoiseLevel);
    _unsetProperties.remove(IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getApproachCertifiedNoiseLevel()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapApproachCertifiedNoiseLevel(
      UnaryOperator<Amount<Dimensionless>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setApproachCertifiedNoiseLevel(mapper.apply(getApproachCertifiedNoiseLevel()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getApproachCertifiedNoiseLevel()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Dimensionless> getApproachCertifiedNoiseLevel() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL),
        "approachCertifiedNoiseLevel not set");
    return approachCertifiedNoiseLevel;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getLateralCertifiedNoiseLevel()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code lateralCertifiedNoiseLevel} is null
   */
  public IACCostsManager.Builder setLateralCertifiedNoiseLevel(
      Amount<Dimensionless> lateralCertifiedNoiseLevel) {
    this.lateralCertifiedNoiseLevel = Preconditions.checkNotNull(lateralCertifiedNoiseLevel);
    _unsetProperties.remove(IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getLateralCertifiedNoiseLevel()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapLateralCertifiedNoiseLevel(
      UnaryOperator<Amount<Dimensionless>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLateralCertifiedNoiseLevel(mapper.apply(getLateralCertifiedNoiseLevel()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getLateralCertifiedNoiseLevel()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Dimensionless> getLateralCertifiedNoiseLevel() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL),
        "lateralCertifiedNoiseLevel not set");
    return lateralCertifiedNoiseLevel;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getFlyoverCertifiedNoiseLevel()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code flyoverCertifiedNoiseLevel} is null
   */
  public IACCostsManager.Builder setFlyoverCertifiedNoiseLevel(
      Amount<Dimensionless> flyoverCertifiedNoiseLevel) {
    this.flyoverCertifiedNoiseLevel = Preconditions.checkNotNull(flyoverCertifiedNoiseLevel);
    _unsetProperties.remove(IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getFlyoverCertifiedNoiseLevel()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapFlyoverCertifiedNoiseLevel(
      UnaryOperator<Amount<Dimensionless>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFlyoverCertifiedNoiseLevel(mapper.apply(getFlyoverCertifiedNoiseLevel()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getFlyoverCertifiedNoiseLevel()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Dimensionless> getFlyoverCertifiedNoiseLevel() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL),
        "flyoverCertifiedNoiseLevel not set");
    return flyoverCertifiedNoiseLevel;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesNOx()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putEmissionsChargesNOx(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    emissionsChargesNOx.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesNOx()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllEmissionsChargesNOx(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putEmissionsChargesNOx(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesNOx()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeEmissionsChargesNOx(MethodEnum key) {
    Preconditions.checkNotNull(key);
    emissionsChargesNOx.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesNOx()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateEmissionsChargesNOx(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putEmissionsChargesNOx is overridden, this method will be updated to delegate to it
    mutator.accept(emissionsChargesNOx);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesNOx()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearEmissionsChargesNOx() {
    emissionsChargesNOx.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getEmissionsChargesNOx()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getEmissionsChargesNOx() {
    return Collections.unmodifiableMap(emissionsChargesNOx);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsConstantNOx()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsConstantNOx} is null
   */
  public IACCostsManager.Builder setEmissionsConstantNOx(Amount<Money> emissionsConstantNOx) {
    this.emissionsConstantNOx = Preconditions.checkNotNull(emissionsConstantNOx);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsConstantNOx()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsConstantNOx(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsConstantNOx(mapper.apply(getEmissionsConstantNOx()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsConstantNOx()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getEmissionsConstantNOx() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX),
        "emissionsConstantNOx not set");
    return emissionsConstantNOx;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getMassNOx()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code massNOx} is null
   */
  public IACCostsManager.Builder setMassNOx(Amount<Mass> massNOx) {
    this.massNOx = Preconditions.checkNotNull(massNOx);
    _unsetProperties.remove(IACCostsManager_Builder.Property.MASS_N_OX);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getMassNOx()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapMassNOx(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMassNOx(mapper.apply(getMassNOx()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getMassNOx()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getMassNOx() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_N_OX), "massNOx not set");
    return massNOx;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getDpHCFooNOx()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dpHCFooNOx} is null
   */
  public IACCostsManager.Builder setDpHCFooNOx(Amount<?> dpHCFooNOx) {
    this.dpHCFooNOx = Preconditions.checkNotNull(dpHCFooNOx);
    _unsetProperties.remove(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getDpHCFooNOx()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapDpHCFooNOx(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDpHCFooNOx(mapper.apply(getDpHCFooNOx()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getDpHCFooNOx()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getDpHCFooNOx() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX),
        "dpHCFooNOx not set");
    return dpHCFooNOx;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putEmissionsChargesCO(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    emissionsChargesCO.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllEmissionsChargesCO(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putEmissionsChargesCO(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeEmissionsChargesCO(MethodEnum key) {
    Preconditions.checkNotNull(key);
    emissionsChargesCO.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateEmissionsChargesCO(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putEmissionsChargesCO is overridden, this method will be updated to delegate to it
    mutator.accept(emissionsChargesCO);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearEmissionsChargesCO() {
    emissionsChargesCO.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getEmissionsChargesCO()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getEmissionsChargesCO() {
    return Collections.unmodifiableMap(emissionsChargesCO);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsConstantCO()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsConstantCO} is null
   */
  public IACCostsManager.Builder setEmissionsConstantCO(Amount<Money> emissionsConstantCO) {
    this.emissionsConstantCO = Preconditions.checkNotNull(emissionsConstantCO);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsConstantCO()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsConstantCO(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsConstantCO(mapper.apply(getEmissionsConstantCO()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsConstantCO()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getEmissionsConstantCO() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO),
        "emissionsConstantCO not set");
    return emissionsConstantCO;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getMassCO()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code massCO} is null
   */
  public IACCostsManager.Builder setMassCO(Amount<Mass> massCO) {
    this.massCO = Preconditions.checkNotNull(massCO);
    _unsetProperties.remove(IACCostsManager_Builder.Property.MASS_CO);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getMassCO()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapMassCO(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMassCO(mapper.apply(getMassCO()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getMassCO()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getMassCO() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_CO), "massCO not set");
    return massCO;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getDpHCFooCO()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dpHCFooCO} is null
   */
  public IACCostsManager.Builder setDpHCFooCO(Amount<?> dpHCFooCO) {
    this.dpHCFooCO = Preconditions.checkNotNull(dpHCFooCO);
    _unsetProperties.remove(IACCostsManager_Builder.Property.DP_HC_FOO_CO);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getDpHCFooCO()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapDpHCFooCO(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDpHCFooCO(mapper.apply(getDpHCFooCO()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getDpHCFooCO()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getDpHCFooCO() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_CO),
        "dpHCFooCO not set");
    return dpHCFooCO;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO2()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putEmissionsChargesCO2(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    emissionsChargesCO2.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO2()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllEmissionsChargesCO2(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putEmissionsChargesCO2(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO2()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeEmissionsChargesCO2(MethodEnum key) {
    Preconditions.checkNotNull(key);
    emissionsChargesCO2.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO2()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateEmissionsChargesCO2(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putEmissionsChargesCO2 is overridden, this method will be updated to delegate to it
    mutator.accept(emissionsChargesCO2);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesCO2()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearEmissionsChargesCO2() {
    emissionsChargesCO2.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getEmissionsChargesCO2()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getEmissionsChargesCO2() {
    return Collections.unmodifiableMap(emissionsChargesCO2);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsConstantCO2()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsConstantCO2} is null
   */
  public IACCostsManager.Builder setEmissionsConstantCO2(Amount<Money> emissionsConstantCO2) {
    this.emissionsConstantCO2 = Preconditions.checkNotNull(emissionsConstantCO2);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsConstantCO2()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsConstantCO2(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsConstantCO2(mapper.apply(getEmissionsConstantCO2()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsConstantCO2()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getEmissionsConstantCO2() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2),
        "emissionsConstantCO2 not set");
    return emissionsConstantCO2;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getMassCO2()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code massCO2} is null
   */
  public IACCostsManager.Builder setMassCO2(Amount<Mass> massCO2) {
    this.massCO2 = Preconditions.checkNotNull(massCO2);
    _unsetProperties.remove(IACCostsManager_Builder.Property.MASS_C_O2);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getMassCO2()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapMassCO2(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMassCO2(mapper.apply(getMassCO2()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getMassCO2()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getMassCO2() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_C_O2), "massCO2 not set");
    return massCO2;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getDpHCFooCO2()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dpHCFooCO2} is null
   */
  public IACCostsManager.Builder setDpHCFooCO2(Amount<?> dpHCFooCO2) {
    this.dpHCFooCO2 = Preconditions.checkNotNull(dpHCFooCO2);
    _unsetProperties.remove(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getDpHCFooCO2()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapDpHCFooCO2(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDpHCFooCO2(mapper.apply(getDpHCFooCO2()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getDpHCFooCO2()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getDpHCFooCO2() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2),
        "dpHCFooCO2 not set");
    return dpHCFooCO2;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesHC()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putEmissionsChargesHC(MethodEnum key, Amount<?> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    emissionsChargesHC.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesHC()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllEmissionsChargesHC(
      Map<? extends MethodEnum, ? extends Amount<?>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<?>> entry : map.entrySet()) {
      putEmissionsChargesHC(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesHC()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeEmissionsChargesHC(MethodEnum key) {
    Preconditions.checkNotNull(key);
    emissionsChargesHC.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesHC()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateEmissionsChargesHC(
      Consumer<? super Map<MethodEnum, Amount<?>>> mutator) {
    // If putEmissionsChargesHC is overridden, this method will be updated to delegate to it
    mutator.accept(emissionsChargesHC);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getEmissionsChargesHC()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearEmissionsChargesHC() {
    emissionsChargesHC.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getEmissionsChargesHC()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<?>> getEmissionsChargesHC() {
    return Collections.unmodifiableMap(emissionsChargesHC);
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEmissionsConstantHC()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emissionsConstantHC} is null
   */
  public IACCostsManager.Builder setEmissionsConstantHC(Amount<Money> emissionsConstantHC) {
    this.emissionsConstantHC = Preconditions.checkNotNull(emissionsConstantHC);
    _unsetProperties.remove(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEmissionsConstantHC()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEmissionsConstantHC(UnaryOperator<Amount<Money>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEmissionsConstantHC(mapper.apply(getEmissionsConstantHC()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEmissionsConstantHC()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Money> getEmissionsConstantHC() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC),
        "emissionsConstantHC not set");
    return emissionsConstantHC;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getMassHC()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code massHC} is null
   */
  public IACCostsManager.Builder setMassHC(Amount<Mass> massHC) {
    this.massHC = Preconditions.checkNotNull(massHC);
    _unsetProperties.remove(IACCostsManager_Builder.Property.MASS_HC);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getMassHC()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapMassHC(UnaryOperator<Amount<Mass>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setMassHC(mapper.apply(getMassHC()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getMassHC()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<Mass> getMassHC() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_HC), "massHC not set");
    return massHC;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getDpHCFooHC()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code dpHCFooHC} is null
   */
  public IACCostsManager.Builder setDpHCFooHC(Amount<?> dpHCFooHC) {
    this.dpHCFooHC = Preconditions.checkNotNull(dpHCFooHC);
    _unsetProperties.remove(IACCostsManager_Builder.Property.DP_HC_FOO_HC);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getDpHCFooHC()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapDpHCFooHC(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setDpHCFooHC(mapper.apply(getDpHCFooHC()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getDpHCFooHC()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getDpHCFooHC() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_HC),
        "dpHCFooHC not set");
    return dpHCFooHC;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getAirframeLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code airframeLabourRate} is null
   */
  public IACCostsManager.Builder setAirframeLabourRate(Amount<?> airframeLabourRate) {
    this.airframeLabourRate = Preconditions.checkNotNull(airframeLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getAirframeLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapAirframeLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAirframeLabourRate(mapper.apply(getAirframeLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getAirframeLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getAirframeLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE),
        "airframeLabourRate not set");
    return airframeLabourRate;
  }

  /**
   * Sets the value to be returned by {@link IACCostsManager#getEngineLabourRate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code engineLabourRate} is null
   */
  public IACCostsManager.Builder setEngineLabourRate(Amount<?> engineLabourRate) {
    this.engineLabourRate = Preconditions.checkNotNull(engineLabourRate);
    _unsetProperties.remove(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link IACCostsManager#getEngineLabourRate()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public IACCostsManager.Builder mapEngineLabourRate(UnaryOperator<Amount<?>> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEngineLabourRate(mapper.apply(getEngineLabourRate()));
  }

  /**
   * Returns the value that will be returned by {@link IACCostsManager#getEngineLabourRate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Amount<?> getEngineLabourRate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE),
        "engineLabourRate not set");
    return engineLabourRate;
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getEnginePrice()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putEnginePrice(MethodEnum key, Amount<Money> value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    enginePrice.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getEnginePrice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllEnginePrice(
      Map<? extends MethodEnum, ? extends Amount<Money>> map) {
    for (Map.Entry<? extends MethodEnum, ? extends Amount<Money>> entry : map.entrySet()) {
      putEnginePrice(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getEnginePrice()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeEnginePrice(MethodEnum key) {
    Preconditions.checkNotNull(key);
    enginePrice.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getEnginePrice()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateEnginePrice(
      Consumer<? super Map<MethodEnum, Amount<Money>>> mutator) {
    // If putEnginePrice is overridden, this method will be updated to delegate to it
    mutator.accept(enginePrice);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getEnginePrice()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearEnginePrice() {
    enginePrice.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getEnginePrice()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<MethodEnum, Amount<Money>> getEnginePrice() {
    return Collections.unmodifiableMap(enginePrice);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACCostsManager#getTaskList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACCostsManager.Builder addTaskList(CostsEnum element) {
    this.taskList.add(Preconditions.checkNotNull(element));
    return (IACCostsManager.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACCostsManager#getTaskList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACCostsManager.Builder addTaskList(CostsEnum... elements) {
    taskList.ensureCapacity(taskList.size() + elements.length);
    for (CostsEnum element : elements) {
      addTaskList(element);
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACCostsManager#getTaskList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACCostsManager.Builder addAllTaskList(Iterable<? extends CostsEnum> elements) {
    if (elements instanceof Collection) {
      taskList.ensureCapacity(taskList.size() + ((Collection<?>) elements).size());
    }
    for (CostsEnum element : elements) {
      addTaskList(element);
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACCostsManager#getTaskList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateTaskList(Consumer<? super List<CostsEnum>> mutator) {
    // If addTaskList is overridden, this method will be updated to delegate to it
    mutator.accept(taskList);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACCostsManager#getTaskList()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearTaskList() {
    this.taskList.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACCostsManager#getTaskList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<CostsEnum> getTaskList() {
    return Collections.unmodifiableList(taskList);
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from
   * {@link IACCostsManager#getDerivedDataMethodMap()}.
   * If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public IACCostsManager.Builder putDerivedDataMethodMap(
      CostsDerivedDataEnum key, MethodEnum value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    derivedDataMethodMap.put(key, value);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from
   * {@link IACCostsManager#getDerivedDataMethodMap()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a
   *     null key or value
   */
  public IACCostsManager.Builder putAllDerivedDataMethodMap(
      Map<? extends CostsDerivedDataEnum, ? extends MethodEnum> map) {
    for (Map.Entry<? extends CostsDerivedDataEnum, ? extends MethodEnum> entry : map.entrySet()) {
      putDerivedDataMethodMap(entry.getKey(), entry.getValue());
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from
   * {@link IACCostsManager#getDerivedDataMethodMap()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public IACCostsManager.Builder removeDerivedDataMethodMap(CostsDerivedDataEnum key) {
    Preconditions.checkNotNull(key);
    derivedDataMethodMap.remove(key);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from
   * {@link IACCostsManager#getDerivedDataMethodMap()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutateDerivedDataMethodMap(
      Consumer<? super Map<CostsDerivedDataEnum, MethodEnum>> mutator) {
    // If putDerivedDataMethodMap is overridden, this method will be updated to delegate to it
    mutator.accept(derivedDataMethodMap);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from
   * {@link IACCostsManager#getDerivedDataMethodMap()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearDerivedDataMethodMap() {
    derivedDataMethodMap.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by
   * {@link IACCostsManager#getDerivedDataMethodMap()}.
   * Changes to this builder will be reflected in the view.
   */
  public Map<CostsDerivedDataEnum, MethodEnum> getDerivedDataMethodMap() {
    return Collections.unmodifiableMap(derivedDataMethodMap);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public IACCostsManager.Builder addPlotList(CostsPlotEnum element) {
    this.plotList.add(Preconditions.checkNotNull(element));
    return (IACCostsManager.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACCostsManager.Builder addPlotList(CostsPlotEnum... elements) {
    plotList.ensureCapacity(plotList.size() + elements.length);
    for (CostsPlotEnum element : elements) {
      addPlotList(element);
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public IACCostsManager.Builder addAllPlotList(Iterable<? extends CostsPlotEnum> elements) {
    if (elements instanceof Collection) {
      plotList.ensureCapacity(plotList.size() + ((Collection<?>) elements).size());
    }
    for (CostsPlotEnum element : elements) {
      addPlotList(element);
    }
    return (IACCostsManager.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link IACCostsManager#getPlotList()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public IACCostsManager.Builder mutatePlotList(Consumer<? super List<CostsPlotEnum>> mutator) {
    // If addPlotList is overridden, this method will be updated to delegate to it
    mutator.accept(plotList);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link IACCostsManager#getPlotList()}.
   *
   * @return this {@code Builder} object
   */
  public IACCostsManager.Builder clearPlotList() {
    this.plotList.clear();
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link IACCostsManager#getPlotList()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<CostsPlotEnum> getPlotList() {
    return Collections.unmodifiableList(plotList);
  }

  /**
   * Sets all property values using the given {@code IACCostsManager} as a template.
   */
  public IACCostsManager.Builder mergeFrom(IACCostsManager value) {
    IACCostsManager_Builder _defaults = new IACCostsManager.Builder();
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
        || !value.getAircraft().equals(_defaults.getAircraft())) {
      setAircraft(value.getAircraft());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
        || !value.getOperatingConditions().equals(_defaults.getOperatingConditions())) {
      setOperatingConditions(value.getOperatingConditions());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
        || !value.getMaximumTakeOffMass().equals(_defaults.getMaximumTakeOffMass())) {
      setMaximumTakeOffMass(value.getMaximumTakeOffMass());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
        || !value.getOperatingEmptyMass().equals(_defaults.getOperatingEmptyMass())) {
      setOperatingEmptyMass(value.getOperatingEmptyMass());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
        || !value.getPayload().equals(_defaults.getPayload())) {
      setPayload(value.getPayload());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
        || !value.getRange().equals(_defaults.getRange())) {
      setRange(value.getRange());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
        || !value.getBlockFuelMass().equals(_defaults.getBlockFuelMass())) {
      setBlockFuelMass(value.getBlockFuelMass());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
        || !value.getFlightTime().equals(_defaults.getFlightTime())) {
      setFlightTime(value.getFlightTime());
    }
    putAllUtilization(value.getUtilization());
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
        || !value.getLifeSpan().equals(_defaults.getLifeSpan())) {
      setLifeSpan(value.getLifeSpan());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
        || !value.getResidualValue().equals(_defaults.getResidualValue())) {
      setResidualValue(value.getResidualValue());
    }
    putAllAircraftPrice(value.getAircraftPrice());
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
        || !value
            .getAirframeRelativeSparesCosts()
            .equals(_defaults.getAirframeRelativeSparesCosts())) {
      setAirframeRelativeSparesCosts(value.getAirframeRelativeSparesCosts());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
        || !value
            .getEnginesRelativeSparesCosts()
            .equals(_defaults.getEnginesRelativeSparesCosts())) {
      setEnginesRelativeSparesCosts(value.getEnginesRelativeSparesCosts());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
        || !value.getInterestRate().equals(_defaults.getInterestRate())) {
      setInterestRate(value.getInterestRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
        || !value.getInsuranceRate().equals(_defaults.getInsuranceRate())) {
      setInsuranceRate(value.getInsuranceRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
        || !value.getCabinLabourRate().equals(_defaults.getCabinLabourRate())) {
      setCabinLabourRate(value.getCabinLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
        || !value.getCockpitLabourRate().equals(_defaults.getCockpitLabourRate())) {
      setCockpitLabourRate(value.getCockpitLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
        || !value.getFuelUnitPrice().equals(_defaults.getFuelUnitPrice())) {
      setFuelUnitPrice(value.getFuelUnitPrice());
    }
    putAllLandingCharges(value.getLandingCharges());
    putAllNavigationCharges(value.getNavigationCharges());
    putAllGroundHandlingCharges(value.getGroundHandlingCharges());
    putAllNoiseCharges(value.getNoiseCharges());
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CONSTANT)
        || !value.getNoiseConstant().equals(_defaults.getNoiseConstant())) {
      setNoiseConstant(value.getNoiseConstant());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD)
        || !value.getNoiseDepartureThreshold().equals(_defaults.getNoiseDepartureThreshold())) {
      setNoiseDepartureThreshold(value.getNoiseDepartureThreshold());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD)
        || !value.getNoiseArrivalThreshold().equals(_defaults.getNoiseArrivalThreshold())) {
      setNoiseArrivalThreshold(value.getNoiseArrivalThreshold());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL)
        || !value
            .getApproachCertifiedNoiseLevel()
            .equals(_defaults.getApproachCertifiedNoiseLevel())) {
      setApproachCertifiedNoiseLevel(value.getApproachCertifiedNoiseLevel());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL)
        || !value
            .getLateralCertifiedNoiseLevel()
            .equals(_defaults.getLateralCertifiedNoiseLevel())) {
      setLateralCertifiedNoiseLevel(value.getLateralCertifiedNoiseLevel());
    }
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL)
        || !value
            .getFlyoverCertifiedNoiseLevel()
            .equals(_defaults.getFlyoverCertifiedNoiseLevel())) {
      setFlyoverCertifiedNoiseLevel(value.getFlyoverCertifiedNoiseLevel());
    }
    putAllEmissionsChargesNOx(value.getEmissionsChargesNOx());
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX)
        || !value.getEmissionsConstantNOx().equals(_defaults.getEmissionsConstantNOx())) {
      setEmissionsConstantNOx(value.getEmissionsConstantNOx());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_N_OX)
        || !value.getMassNOx().equals(_defaults.getMassNOx())) {
      setMassNOx(value.getMassNOx());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX)
        || !value.getDpHCFooNOx().equals(_defaults.getDpHCFooNOx())) {
      setDpHCFooNOx(value.getDpHCFooNOx());
    }
    putAllEmissionsChargesCO(value.getEmissionsChargesCO());
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO)
        || !value.getEmissionsConstantCO().equals(_defaults.getEmissionsConstantCO())) {
      setEmissionsConstantCO(value.getEmissionsConstantCO());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_CO)
        || !value.getMassCO().equals(_defaults.getMassCO())) {
      setMassCO(value.getMassCO());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_CO)
        || !value.getDpHCFooCO().equals(_defaults.getDpHCFooCO())) {
      setDpHCFooCO(value.getDpHCFooCO());
    }
    putAllEmissionsChargesCO2(value.getEmissionsChargesCO2());
    if (_defaults._unsetProperties.contains(
            IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2)
        || !value.getEmissionsConstantCO2().equals(_defaults.getEmissionsConstantCO2())) {
      setEmissionsConstantCO2(value.getEmissionsConstantCO2());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_C_O2)
        || !value.getMassCO2().equals(_defaults.getMassCO2())) {
      setMassCO2(value.getMassCO2());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2)
        || !value.getDpHCFooCO2().equals(_defaults.getDpHCFooCO2())) {
      setDpHCFooCO2(value.getDpHCFooCO2());
    }
    putAllEmissionsChargesHC(value.getEmissionsChargesHC());
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC)
        || !value.getEmissionsConstantHC().equals(_defaults.getEmissionsConstantHC())) {
      setEmissionsConstantHC(value.getEmissionsConstantHC());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_HC)
        || !value.getMassHC().equals(_defaults.getMassHC())) {
      setMassHC(value.getMassHC());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_HC)
        || !value.getDpHCFooHC().equals(_defaults.getDpHCFooHC())) {
      setDpHCFooHC(value.getDpHCFooHC());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
        || !value.getAirframeLabourRate().equals(_defaults.getAirframeLabourRate())) {
      setAirframeLabourRate(value.getAirframeLabourRate());
    }
    if (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
        || !value.getEngineLabourRate().equals(_defaults.getEngineLabourRate())) {
      setEngineLabourRate(value.getEngineLabourRate());
    }
    putAllEnginePrice(value.getEnginePrice());
    addAllTaskList(value.getTaskList());
    putAllDerivedDataMethodMap(value.getDerivedDataMethodMap());
    addAllPlotList(value.getPlotList());
    return (IACCostsManager.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IACCostsManager.Builder mergeFrom(IACCostsManager.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    IACCostsManager_Builder base = (IACCostsManager_Builder) template;
    IACCostsManager_Builder _defaults = new IACCostsManager.Builder();
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
            || !template.getAircraft().equals(_defaults.getAircraft()))) {
      setAircraft(template.getAircraft());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
            || !template.getOperatingConditions().equals(_defaults.getOperatingConditions()))) {
      setOperatingConditions(template.getOperatingConditions());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
            || !template.getMaximumTakeOffMass().equals(_defaults.getMaximumTakeOffMass()))) {
      setMaximumTakeOffMass(template.getMaximumTakeOffMass());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
            || !template.getOperatingEmptyMass().equals(_defaults.getOperatingEmptyMass()))) {
      setOperatingEmptyMass(template.getOperatingEmptyMass());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
            || !template.getPayload().equals(_defaults.getPayload()))) {
      setPayload(template.getPayload());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
            || !template.getRange().equals(_defaults.getRange()))) {
      setRange(template.getRange());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
            || !template.getBlockFuelMass().equals(_defaults.getBlockFuelMass()))) {
      setBlockFuelMass(template.getBlockFuelMass());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
            || !template.getFlightTime().equals(_defaults.getFlightTime()))) {
      setFlightTime(template.getFlightTime());
    }
    putAllUtilization(((IACCostsManager_Builder) template).utilization);
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
            || !template.getLifeSpan().equals(_defaults.getLifeSpan()))) {
      setLifeSpan(template.getLifeSpan());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
            || !template.getResidualValue().equals(_defaults.getResidualValue()))) {
      setResidualValue(template.getResidualValue());
    }
    putAllAircraftPrice(((IACCostsManager_Builder) template).aircraftPrice);
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
            || !template
                .getAirframeRelativeSparesCosts()
                .equals(_defaults.getAirframeRelativeSparesCosts()))) {
      setAirframeRelativeSparesCosts(template.getAirframeRelativeSparesCosts());
    }
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
            || !template
                .getEnginesRelativeSparesCosts()
                .equals(_defaults.getEnginesRelativeSparesCosts()))) {
      setEnginesRelativeSparesCosts(template.getEnginesRelativeSparesCosts());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
            || !template.getInterestRate().equals(_defaults.getInterestRate()))) {
      setInterestRate(template.getInterestRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
            || !template.getInsuranceRate().equals(_defaults.getInsuranceRate()))) {
      setInsuranceRate(template.getInsuranceRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
            || !template.getCabinLabourRate().equals(_defaults.getCabinLabourRate()))) {
      setCabinLabourRate(template.getCabinLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
            || !template.getCockpitLabourRate().equals(_defaults.getCockpitLabourRate()))) {
      setCockpitLabourRate(template.getCockpitLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
            || !template.getFuelUnitPrice().equals(_defaults.getFuelUnitPrice()))) {
      setFuelUnitPrice(template.getFuelUnitPrice());
    }
    putAllLandingCharges(((IACCostsManager_Builder) template).landingCharges);
    putAllNavigationCharges(((IACCostsManager_Builder) template).navigationCharges);
    putAllGroundHandlingCharges(((IACCostsManager_Builder) template).groundHandlingCharges);
    putAllNoiseCharges(((IACCostsManager_Builder) template).noiseCharges);
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CONSTANT)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CONSTANT)
            || !template.getNoiseConstant().equals(_defaults.getNoiseConstant()))) {
      setNoiseConstant(template.getNoiseConstant());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD)
            || !template
                .getNoiseDepartureThreshold()
                .equals(_defaults.getNoiseDepartureThreshold()))) {
      setNoiseDepartureThreshold(template.getNoiseDepartureThreshold());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD)
            || !template.getNoiseArrivalThreshold().equals(_defaults.getNoiseArrivalThreshold()))) {
      setNoiseArrivalThreshold(template.getNoiseArrivalThreshold());
    }
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL)
            || !template
                .getApproachCertifiedNoiseLevel()
                .equals(_defaults.getApproachCertifiedNoiseLevel()))) {
      setApproachCertifiedNoiseLevel(template.getApproachCertifiedNoiseLevel());
    }
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL)
            || !template
                .getLateralCertifiedNoiseLevel()
                .equals(_defaults.getLateralCertifiedNoiseLevel()))) {
      setLateralCertifiedNoiseLevel(template.getLateralCertifiedNoiseLevel());
    }
    if (!base._unsetProperties.contains(
            IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL)
            || !template
                .getFlyoverCertifiedNoiseLevel()
                .equals(_defaults.getFlyoverCertifiedNoiseLevel()))) {
      setFlyoverCertifiedNoiseLevel(template.getFlyoverCertifiedNoiseLevel());
    }
    putAllEmissionsChargesNOx(((IACCostsManager_Builder) template).emissionsChargesNOx);
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX)
            || !template.getEmissionsConstantNOx().equals(_defaults.getEmissionsConstantNOx()))) {
      setEmissionsConstantNOx(template.getEmissionsConstantNOx());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_N_OX)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_N_OX)
            || !template.getMassNOx().equals(_defaults.getMassNOx()))) {
      setMassNOx(template.getMassNOx());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX)
            || !template.getDpHCFooNOx().equals(_defaults.getDpHCFooNOx()))) {
      setDpHCFooNOx(template.getDpHCFooNOx());
    }
    putAllEmissionsChargesCO(((IACCostsManager_Builder) template).emissionsChargesCO);
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO)
            || !template.getEmissionsConstantCO().equals(_defaults.getEmissionsConstantCO()))) {
      setEmissionsConstantCO(template.getEmissionsConstantCO());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_CO)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_CO)
            || !template.getMassCO().equals(_defaults.getMassCO()))) {
      setMassCO(template.getMassCO());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_CO)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_CO)
            || !template.getDpHCFooCO().equals(_defaults.getDpHCFooCO()))) {
      setDpHCFooCO(template.getDpHCFooCO());
    }
    putAllEmissionsChargesCO2(((IACCostsManager_Builder) template).emissionsChargesCO2);
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2)
            || !template.getEmissionsConstantCO2().equals(_defaults.getEmissionsConstantCO2()))) {
      setEmissionsConstantCO2(template.getEmissionsConstantCO2());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_C_O2)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_C_O2)
            || !template.getMassCO2().equals(_defaults.getMassCO2()))) {
      setMassCO2(template.getMassCO2());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2)
            || !template.getDpHCFooCO2().equals(_defaults.getDpHCFooCO2()))) {
      setDpHCFooCO2(template.getDpHCFooCO2());
    }
    putAllEmissionsChargesHC(((IACCostsManager_Builder) template).emissionsChargesHC);
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC)
            || !template.getEmissionsConstantHC().equals(_defaults.getEmissionsConstantHC()))) {
      setEmissionsConstantHC(template.getEmissionsConstantHC());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_HC)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.MASS_HC)
            || !template.getMassHC().equals(_defaults.getMassHC()))) {
      setMassHC(template.getMassHC());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_HC)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_HC)
            || !template.getDpHCFooHC().equals(_defaults.getDpHCFooHC()))) {
      setDpHCFooHC(template.getDpHCFooHC());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(
                IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
            || !template.getAirframeLabourRate().equals(_defaults.getAirframeLabourRate()))) {
      setAirframeLabourRate(template.getAirframeLabourRate());
    }
    if (!base._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
        && (_defaults._unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
            || !template.getEngineLabourRate().equals(_defaults.getEngineLabourRate()))) {
      setEngineLabourRate(template.getEngineLabourRate());
    }
    putAllEnginePrice(((IACCostsManager_Builder) template).enginePrice);
    addAllTaskList(((IACCostsManager_Builder) template).taskList);
    putAllDerivedDataMethodMap(((IACCostsManager_Builder) template).derivedDataMethodMap);
    addAllPlotList(((IACCostsManager_Builder) template).plotList);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IACCostsManager.Builder clear() {
    IACCostsManager_Builder _defaults = new IACCostsManager.Builder();
    aircraft = _defaults.aircraft;
    operatingConditions = _defaults.operatingConditions;
    maximumTakeOffMass = _defaults.maximumTakeOffMass;
    operatingEmptyMass = _defaults.operatingEmptyMass;
    payload = _defaults.payload;
    range = _defaults.range;
    blockFuelMass = _defaults.blockFuelMass;
    flightTime = _defaults.flightTime;
    utilization.clear();
    lifeSpan = _defaults.lifeSpan;
    residualValue = _defaults.residualValue;
    aircraftPrice.clear();
    airframeRelativeSparesCosts = _defaults.airframeRelativeSparesCosts;
    enginesRelativeSparesCosts = _defaults.enginesRelativeSparesCosts;
    interestRate = _defaults.interestRate;
    insuranceRate = _defaults.insuranceRate;
    cabinLabourRate = _defaults.cabinLabourRate;
    cockpitLabourRate = _defaults.cockpitLabourRate;
    fuelUnitPrice = _defaults.fuelUnitPrice;
    landingCharges.clear();
    navigationCharges.clear();
    groundHandlingCharges.clear();
    noiseCharges.clear();
    noiseConstant = _defaults.noiseConstant;
    noiseDepartureThreshold = _defaults.noiseDepartureThreshold;
    noiseArrivalThreshold = _defaults.noiseArrivalThreshold;
    approachCertifiedNoiseLevel = _defaults.approachCertifiedNoiseLevel;
    lateralCertifiedNoiseLevel = _defaults.lateralCertifiedNoiseLevel;
    flyoverCertifiedNoiseLevel = _defaults.flyoverCertifiedNoiseLevel;
    emissionsChargesNOx.clear();
    emissionsConstantNOx = _defaults.emissionsConstantNOx;
    massNOx = _defaults.massNOx;
    dpHCFooNOx = _defaults.dpHCFooNOx;
    emissionsChargesCO.clear();
    emissionsConstantCO = _defaults.emissionsConstantCO;
    massCO = _defaults.massCO;
    dpHCFooCO = _defaults.dpHCFooCO;
    emissionsChargesCO2.clear();
    emissionsConstantCO2 = _defaults.emissionsConstantCO2;
    massCO2 = _defaults.massCO2;
    dpHCFooCO2 = _defaults.dpHCFooCO2;
    emissionsChargesHC.clear();
    emissionsConstantHC = _defaults.emissionsConstantHC;
    massHC = _defaults.massHC;
    dpHCFooHC = _defaults.dpHCFooHC;
    airframeLabourRate = _defaults.airframeLabourRate;
    engineLabourRate = _defaults.engineLabourRate;
    enginePrice.clear();
    taskList.clear();
    derivedDataMethodMap.clear();
    plotList.clear();
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (IACCostsManager.Builder) this;
  }

  /**
   * Returns a newly-created {@link IACCostsManager} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IACCostsManager build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IACCostsManager_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IACCostsManager}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IACCostsManager buildPartial() {
    return new IACCostsManager_Builder.Partial(this);
  }

  private static final class Value implements IACCostsManager {
    private final Aircraft aircraft;
    private final OperatingConditions operatingConditions;
    private final Amount<Mass> maximumTakeOffMass;
    private final Amount<Mass> operatingEmptyMass;
    private final Amount<Mass> payload;
    private final Amount<Length> range;
    private final Amount<Mass> blockFuelMass;
    private final Amount<Duration> flightTime;
    private final Map<MethodEnum, Amount<?>> utilization;
    private final Amount<Duration> lifeSpan;
    private final Double residualValue;
    private final Map<MethodEnum, Amount<Money>> aircraftPrice;
    private final Double airframeRelativeSparesCosts;
    private final Double enginesRelativeSparesCosts;
    private final Double interestRate;
    private final Double insuranceRate;
    private final Amount<?> cabinLabourRate;
    private final Amount<?> cockpitLabourRate;
    private final Amount<?> fuelUnitPrice;
    private final Map<MethodEnum, Amount<?>> landingCharges;
    private final Map<MethodEnum, Amount<?>> navigationCharges;
    private final Map<MethodEnum, Amount<?>> groundHandlingCharges;
    private final Map<MethodEnum, Amount<?>> noiseCharges;
    private final Amount<Money> noiseConstant;
    private final Amount<Dimensionless> noiseDepartureThreshold;
    private final Amount<Dimensionless> noiseArrivalThreshold;
    private final Amount<Dimensionless> approachCertifiedNoiseLevel;
    private final Amount<Dimensionless> lateralCertifiedNoiseLevel;
    private final Amount<Dimensionless> flyoverCertifiedNoiseLevel;
    private final Map<MethodEnum, Amount<?>> emissionsChargesNOx;
    private final Amount<Money> emissionsConstantNOx;
    private final Amount<Mass> massNOx;
    private final Amount<?> dpHCFooNOx;
    private final Map<MethodEnum, Amount<?>> emissionsChargesCO;
    private final Amount<Money> emissionsConstantCO;
    private final Amount<Mass> massCO;
    private final Amount<?> dpHCFooCO;
    private final Map<MethodEnum, Amount<?>> emissionsChargesCO2;
    private final Amount<Money> emissionsConstantCO2;
    private final Amount<Mass> massCO2;
    private final Amount<?> dpHCFooCO2;
    private final Map<MethodEnum, Amount<?>> emissionsChargesHC;
    private final Amount<Money> emissionsConstantHC;
    private final Amount<Mass> massHC;
    private final Amount<?> dpHCFooHC;
    private final Amount<?> airframeLabourRate;
    private final Amount<?> engineLabourRate;
    private final Map<MethodEnum, Amount<Money>> enginePrice;
    private final List<CostsEnum> taskList;
    private final Map<CostsDerivedDataEnum, MethodEnum> derivedDataMethodMap;
    private final List<CostsPlotEnum> plotList;

    private Value(IACCostsManager_Builder builder) {
      this.aircraft = builder.aircraft;
      this.operatingConditions = builder.operatingConditions;
      this.maximumTakeOffMass = builder.maximumTakeOffMass;
      this.operatingEmptyMass = builder.operatingEmptyMass;
      this.payload = builder.payload;
      this.range = builder.range;
      this.blockFuelMass = builder.blockFuelMass;
      this.flightTime = builder.flightTime;
      this.utilization = ImmutableMap.copyOf(builder.utilization);
      this.lifeSpan = builder.lifeSpan;
      this.residualValue = builder.residualValue;
      this.aircraftPrice = ImmutableMap.copyOf(builder.aircraftPrice);
      this.airframeRelativeSparesCosts = builder.airframeRelativeSparesCosts;
      this.enginesRelativeSparesCosts = builder.enginesRelativeSparesCosts;
      this.interestRate = builder.interestRate;
      this.insuranceRate = builder.insuranceRate;
      this.cabinLabourRate = builder.cabinLabourRate;
      this.cockpitLabourRate = builder.cockpitLabourRate;
      this.fuelUnitPrice = builder.fuelUnitPrice;
      this.landingCharges = ImmutableMap.copyOf(builder.landingCharges);
      this.navigationCharges = ImmutableMap.copyOf(builder.navigationCharges);
      this.groundHandlingCharges = ImmutableMap.copyOf(builder.groundHandlingCharges);
      this.noiseCharges = ImmutableMap.copyOf(builder.noiseCharges);
      this.noiseConstant = builder.noiseConstant;
      this.noiseDepartureThreshold = builder.noiseDepartureThreshold;
      this.noiseArrivalThreshold = builder.noiseArrivalThreshold;
      this.approachCertifiedNoiseLevel = builder.approachCertifiedNoiseLevel;
      this.lateralCertifiedNoiseLevel = builder.lateralCertifiedNoiseLevel;
      this.flyoverCertifiedNoiseLevel = builder.flyoverCertifiedNoiseLevel;
      this.emissionsChargesNOx = ImmutableMap.copyOf(builder.emissionsChargesNOx);
      this.emissionsConstantNOx = builder.emissionsConstantNOx;
      this.massNOx = builder.massNOx;
      this.dpHCFooNOx = builder.dpHCFooNOx;
      this.emissionsChargesCO = ImmutableMap.copyOf(builder.emissionsChargesCO);
      this.emissionsConstantCO = builder.emissionsConstantCO;
      this.massCO = builder.massCO;
      this.dpHCFooCO = builder.dpHCFooCO;
      this.emissionsChargesCO2 = ImmutableMap.copyOf(builder.emissionsChargesCO2);
      this.emissionsConstantCO2 = builder.emissionsConstantCO2;
      this.massCO2 = builder.massCO2;
      this.dpHCFooCO2 = builder.dpHCFooCO2;
      this.emissionsChargesHC = ImmutableMap.copyOf(builder.emissionsChargesHC);
      this.emissionsConstantHC = builder.emissionsConstantHC;
      this.massHC = builder.massHC;
      this.dpHCFooHC = builder.dpHCFooHC;
      this.airframeLabourRate = builder.airframeLabourRate;
      this.engineLabourRate = builder.engineLabourRate;
      this.enginePrice = ImmutableMap.copyOf(builder.enginePrice);
      this.taskList = ImmutableList.copyOf(builder.taskList);
      this.derivedDataMethodMap = ImmutableMap.copyOf(builder.derivedDataMethodMap);
      this.plotList = ImmutableList.copyOf(builder.plotList);
    }

    @Override
    public Aircraft getAircraft() {
      return aircraft;
    }

    @Override
    public OperatingConditions getOperatingConditions() {
      return operatingConditions;
    }

    @Override
    public Amount<Mass> getMaximumTakeOffMass() {
      return maximumTakeOffMass;
    }

    @Override
    public Amount<Mass> getOperatingEmptyMass() {
      return operatingEmptyMass;
    }

    @Override
    public Amount<Mass> getPayload() {
      return payload;
    }

    @Override
    public Amount<Length> getRange() {
      return range;
    }

    @Override
    public Amount<Mass> getBlockFuelMass() {
      return blockFuelMass;
    }

    @Override
    public Amount<Duration> getFlightTime() {
      return flightTime;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getUtilization() {
      return utilization;
    }

    @Override
    public Amount<Duration> getLifeSpan() {
      return lifeSpan;
    }

    @Override
    public Double getResidualValue() {
      return residualValue;
    }

    @Override
    public Map<MethodEnum, Amount<Money>> getAircraftPrice() {
      return aircraftPrice;
    }

    @Override
    public Double getAirframeRelativeSparesCosts() {
      return airframeRelativeSparesCosts;
    }

    @Override
    public Double getEnginesRelativeSparesCosts() {
      return enginesRelativeSparesCosts;
    }

    @Override
    public Double getInterestRate() {
      return interestRate;
    }

    @Override
    public Double getInsuranceRate() {
      return insuranceRate;
    }

    @Override
    public Amount<?> getCabinLabourRate() {
      return cabinLabourRate;
    }

    @Override
    public Amount<?> getCockpitLabourRate() {
      return cockpitLabourRate;
    }

    @Override
    public Amount<?> getFuelUnitPrice() {
      return fuelUnitPrice;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getLandingCharges() {
      return landingCharges;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getNavigationCharges() {
      return navigationCharges;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getGroundHandlingCharges() {
      return groundHandlingCharges;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getNoiseCharges() {
      return noiseCharges;
    }

    @Override
    public Amount<Money> getNoiseConstant() {
      return noiseConstant;
    }

    @Override
    public Amount<Dimensionless> getNoiseDepartureThreshold() {
      return noiseDepartureThreshold;
    }

    @Override
    public Amount<Dimensionless> getNoiseArrivalThreshold() {
      return noiseArrivalThreshold;
    }

    @Override
    public Amount<Dimensionless> getApproachCertifiedNoiseLevel() {
      return approachCertifiedNoiseLevel;
    }

    @Override
    public Amount<Dimensionless> getLateralCertifiedNoiseLevel() {
      return lateralCertifiedNoiseLevel;
    }

    @Override
    public Amount<Dimensionless> getFlyoverCertifiedNoiseLevel() {
      return flyoverCertifiedNoiseLevel;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesNOx() {
      return emissionsChargesNOx;
    }

    @Override
    public Amount<Money> getEmissionsConstantNOx() {
      return emissionsConstantNOx;
    }

    @Override
    public Amount<Mass> getMassNOx() {
      return massNOx;
    }

    @Override
    public Amount<?> getDpHCFooNOx() {
      return dpHCFooNOx;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesCO() {
      return emissionsChargesCO;
    }

    @Override
    public Amount<Money> getEmissionsConstantCO() {
      return emissionsConstantCO;
    }

    @Override
    public Amount<Mass> getMassCO() {
      return massCO;
    }

    @Override
    public Amount<?> getDpHCFooCO() {
      return dpHCFooCO;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesCO2() {
      return emissionsChargesCO2;
    }

    @Override
    public Amount<Money> getEmissionsConstantCO2() {
      return emissionsConstantCO2;
    }

    @Override
    public Amount<Mass> getMassCO2() {
      return massCO2;
    }

    @Override
    public Amount<?> getDpHCFooCO2() {
      return dpHCFooCO2;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesHC() {
      return emissionsChargesHC;
    }

    @Override
    public Amount<Money> getEmissionsConstantHC() {
      return emissionsConstantHC;
    }

    @Override
    public Amount<Mass> getMassHC() {
      return massHC;
    }

    @Override
    public Amount<?> getDpHCFooHC() {
      return dpHCFooHC;
    }

    @Override
    public Amount<?> getAirframeLabourRate() {
      return airframeLabourRate;
    }

    @Override
    public Amount<?> getEngineLabourRate() {
      return engineLabourRate;
    }

    @Override
    public Map<MethodEnum, Amount<Money>> getEnginePrice() {
      return enginePrice;
    }

    @Override
    public List<CostsEnum> getTaskList() {
      return taskList;
    }

    @Override
    public Map<CostsDerivedDataEnum, MethodEnum> getDerivedDataMethodMap() {
      return derivedDataMethodMap;
    }

    @Override
    public List<CostsPlotEnum> getPlotList() {
      return plotList;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACCostsManager_Builder.Value)) {
        return false;
      }
      IACCostsManager_Builder.Value other = (IACCostsManager_Builder.Value) obj;
      return Objects.equals(aircraft, other.aircraft)
          && Objects.equals(operatingConditions, other.operatingConditions)
          && Objects.equals(maximumTakeOffMass, other.maximumTakeOffMass)
          && Objects.equals(operatingEmptyMass, other.operatingEmptyMass)
          && Objects.equals(payload, other.payload)
          && Objects.equals(range, other.range)
          && Objects.equals(blockFuelMass, other.blockFuelMass)
          && Objects.equals(flightTime, other.flightTime)
          && Objects.equals(utilization, other.utilization)
          && Objects.equals(lifeSpan, other.lifeSpan)
          && Objects.equals(residualValue, other.residualValue)
          && Objects.equals(aircraftPrice, other.aircraftPrice)
          && Objects.equals(airframeRelativeSparesCosts, other.airframeRelativeSparesCosts)
          && Objects.equals(enginesRelativeSparesCosts, other.enginesRelativeSparesCosts)
          && Objects.equals(interestRate, other.interestRate)
          && Objects.equals(insuranceRate, other.insuranceRate)
          && Objects.equals(cabinLabourRate, other.cabinLabourRate)
          && Objects.equals(cockpitLabourRate, other.cockpitLabourRate)
          && Objects.equals(fuelUnitPrice, other.fuelUnitPrice)
          && Objects.equals(landingCharges, other.landingCharges)
          && Objects.equals(navigationCharges, other.navigationCharges)
          && Objects.equals(groundHandlingCharges, other.groundHandlingCharges)
          && Objects.equals(noiseCharges, other.noiseCharges)
          && Objects.equals(noiseConstant, other.noiseConstant)
          && Objects.equals(noiseDepartureThreshold, other.noiseDepartureThreshold)
          && Objects.equals(noiseArrivalThreshold, other.noiseArrivalThreshold)
          && Objects.equals(approachCertifiedNoiseLevel, other.approachCertifiedNoiseLevel)
          && Objects.equals(lateralCertifiedNoiseLevel, other.lateralCertifiedNoiseLevel)
          && Objects.equals(flyoverCertifiedNoiseLevel, other.flyoverCertifiedNoiseLevel)
          && Objects.equals(emissionsChargesNOx, other.emissionsChargesNOx)
          && Objects.equals(emissionsConstantNOx, other.emissionsConstantNOx)
          && Objects.equals(massNOx, other.massNOx)
          && Objects.equals(dpHCFooNOx, other.dpHCFooNOx)
          && Objects.equals(emissionsChargesCO, other.emissionsChargesCO)
          && Objects.equals(emissionsConstantCO, other.emissionsConstantCO)
          && Objects.equals(massCO, other.massCO)
          && Objects.equals(dpHCFooCO, other.dpHCFooCO)
          && Objects.equals(emissionsChargesCO2, other.emissionsChargesCO2)
          && Objects.equals(emissionsConstantCO2, other.emissionsConstantCO2)
          && Objects.equals(massCO2, other.massCO2)
          && Objects.equals(dpHCFooCO2, other.dpHCFooCO2)
          && Objects.equals(emissionsChargesHC, other.emissionsChargesHC)
          && Objects.equals(emissionsConstantHC, other.emissionsConstantHC)
          && Objects.equals(massHC, other.massHC)
          && Objects.equals(dpHCFooHC, other.dpHCFooHC)
          && Objects.equals(airframeLabourRate, other.airframeLabourRate)
          && Objects.equals(engineLabourRate, other.engineLabourRate)
          && Objects.equals(enginePrice, other.enginePrice)
          && Objects.equals(taskList, other.taskList)
          && Objects.equals(derivedDataMethodMap, other.derivedDataMethodMap)
          && Objects.equals(plotList, other.plotList);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          aircraft,
          operatingConditions,
          maximumTakeOffMass,
          operatingEmptyMass,
          payload,
          range,
          blockFuelMass,
          flightTime,
          utilization,
          lifeSpan,
          residualValue,
          aircraftPrice,
          airframeRelativeSparesCosts,
          enginesRelativeSparesCosts,
          interestRate,
          insuranceRate,
          cabinLabourRate,
          cockpitLabourRate,
          fuelUnitPrice,
          landingCharges,
          navigationCharges,
          groundHandlingCharges,
          noiseCharges,
          noiseConstant,
          noiseDepartureThreshold,
          noiseArrivalThreshold,
          approachCertifiedNoiseLevel,
          lateralCertifiedNoiseLevel,
          flyoverCertifiedNoiseLevel,
          emissionsChargesNOx,
          emissionsConstantNOx,
          massNOx,
          dpHCFooNOx,
          emissionsChargesCO,
          emissionsConstantCO,
          massCO,
          dpHCFooCO,
          emissionsChargesCO2,
          emissionsConstantCO2,
          massCO2,
          dpHCFooCO2,
          emissionsChargesHC,
          emissionsConstantHC,
          massHC,
          dpHCFooHC,
          airframeLabourRate,
          engineLabourRate,
          enginePrice,
          taskList,
          derivedDataMethodMap,
          plotList);
    }

    @Override
    public String toString() {
      return "IACCostsManager{"
          + "aircraft="
          + aircraft
          + ", "
          + "operatingConditions="
          + operatingConditions
          + ", "
          + "maximumTakeOffMass="
          + maximumTakeOffMass
          + ", "
          + "operatingEmptyMass="
          + operatingEmptyMass
          + ", "
          + "payload="
          + payload
          + ", "
          + "range="
          + range
          + ", "
          + "blockFuelMass="
          + blockFuelMass
          + ", "
          + "flightTime="
          + flightTime
          + ", "
          + "utilization="
          + utilization
          + ", "
          + "lifeSpan="
          + lifeSpan
          + ", "
          + "residualValue="
          + residualValue
          + ", "
          + "aircraftPrice="
          + aircraftPrice
          + ", "
          + "airframeRelativeSparesCosts="
          + airframeRelativeSparesCosts
          + ", "
          + "enginesRelativeSparesCosts="
          + enginesRelativeSparesCosts
          + ", "
          + "interestRate="
          + interestRate
          + ", "
          + "insuranceRate="
          + insuranceRate
          + ", "
          + "cabinLabourRate="
          + cabinLabourRate
          + ", "
          + "cockpitLabourRate="
          + cockpitLabourRate
          + ", "
          + "fuelUnitPrice="
          + fuelUnitPrice
          + ", "
          + "landingCharges="
          + landingCharges
          + ", "
          + "navigationCharges="
          + navigationCharges
          + ", "
          + "groundHandlingCharges="
          + groundHandlingCharges
          + ", "
          + "noiseCharges="
          + noiseCharges
          + ", "
          + "noiseConstant="
          + noiseConstant
          + ", "
          + "noiseDepartureThreshold="
          + noiseDepartureThreshold
          + ", "
          + "noiseArrivalThreshold="
          + noiseArrivalThreshold
          + ", "
          + "approachCertifiedNoiseLevel="
          + approachCertifiedNoiseLevel
          + ", "
          + "lateralCertifiedNoiseLevel="
          + lateralCertifiedNoiseLevel
          + ", "
          + "flyoverCertifiedNoiseLevel="
          + flyoverCertifiedNoiseLevel
          + ", "
          + "emissionsChargesNOx="
          + emissionsChargesNOx
          + ", "
          + "emissionsConstantNOx="
          + emissionsConstantNOx
          + ", "
          + "massNOx="
          + massNOx
          + ", "
          + "dpHCFooNOx="
          + dpHCFooNOx
          + ", "
          + "emissionsChargesCO="
          + emissionsChargesCO
          + ", "
          + "emissionsConstantCO="
          + emissionsConstantCO
          + ", "
          + "massCO="
          + massCO
          + ", "
          + "dpHCFooCO="
          + dpHCFooCO
          + ", "
          + "emissionsChargesCO2="
          + emissionsChargesCO2
          + ", "
          + "emissionsConstantCO2="
          + emissionsConstantCO2
          + ", "
          + "massCO2="
          + massCO2
          + ", "
          + "dpHCFooCO2="
          + dpHCFooCO2
          + ", "
          + "emissionsChargesHC="
          + emissionsChargesHC
          + ", "
          + "emissionsConstantHC="
          + emissionsConstantHC
          + ", "
          + "massHC="
          + massHC
          + ", "
          + "dpHCFooHC="
          + dpHCFooHC
          + ", "
          + "airframeLabourRate="
          + airframeLabourRate
          + ", "
          + "engineLabourRate="
          + engineLabourRate
          + ", "
          + "enginePrice="
          + enginePrice
          + ", "
          + "taskList="
          + taskList
          + ", "
          + "derivedDataMethodMap="
          + derivedDataMethodMap
          + ", "
          + "plotList="
          + plotList
          + "}";
    }
  }

  private static final class Partial implements IACCostsManager {
    private final Aircraft aircraft;
    private final OperatingConditions operatingConditions;
    private final Amount<Mass> maximumTakeOffMass;
    private final Amount<Mass> operatingEmptyMass;
    private final Amount<Mass> payload;
    private final Amount<Length> range;
    private final Amount<Mass> blockFuelMass;
    private final Amount<Duration> flightTime;
    private final Map<MethodEnum, Amount<?>> utilization;
    private final Amount<Duration> lifeSpan;
    private final Double residualValue;
    private final Map<MethodEnum, Amount<Money>> aircraftPrice;
    private final Double airframeRelativeSparesCosts;
    private final Double enginesRelativeSparesCosts;
    private final Double interestRate;
    private final Double insuranceRate;
    private final Amount<?> cabinLabourRate;
    private final Amount<?> cockpitLabourRate;
    private final Amount<?> fuelUnitPrice;
    private final Map<MethodEnum, Amount<?>> landingCharges;
    private final Map<MethodEnum, Amount<?>> navigationCharges;
    private final Map<MethodEnum, Amount<?>> groundHandlingCharges;
    private final Map<MethodEnum, Amount<?>> noiseCharges;
    private final Amount<Money> noiseConstant;
    private final Amount<Dimensionless> noiseDepartureThreshold;
    private final Amount<Dimensionless> noiseArrivalThreshold;
    private final Amount<Dimensionless> approachCertifiedNoiseLevel;
    private final Amount<Dimensionless> lateralCertifiedNoiseLevel;
    private final Amount<Dimensionless> flyoverCertifiedNoiseLevel;
    private final Map<MethodEnum, Amount<?>> emissionsChargesNOx;
    private final Amount<Money> emissionsConstantNOx;
    private final Amount<Mass> massNOx;
    private final Amount<?> dpHCFooNOx;
    private final Map<MethodEnum, Amount<?>> emissionsChargesCO;
    private final Amount<Money> emissionsConstantCO;
    private final Amount<Mass> massCO;
    private final Amount<?> dpHCFooCO;
    private final Map<MethodEnum, Amount<?>> emissionsChargesCO2;
    private final Amount<Money> emissionsConstantCO2;
    private final Amount<Mass> massCO2;
    private final Amount<?> dpHCFooCO2;
    private final Map<MethodEnum, Amount<?>> emissionsChargesHC;
    private final Amount<Money> emissionsConstantHC;
    private final Amount<Mass> massHC;
    private final Amount<?> dpHCFooHC;
    private final Amount<?> airframeLabourRate;
    private final Amount<?> engineLabourRate;
    private final Map<MethodEnum, Amount<Money>> enginePrice;
    private final List<CostsEnum> taskList;
    private final Map<CostsDerivedDataEnum, MethodEnum> derivedDataMethodMap;
    private final List<CostsPlotEnum> plotList;
    private final EnumSet<IACCostsManager_Builder.Property> _unsetProperties;

    Partial(IACCostsManager_Builder builder) {
      this.aircraft = builder.aircraft;
      this.operatingConditions = builder.operatingConditions;
      this.maximumTakeOffMass = builder.maximumTakeOffMass;
      this.operatingEmptyMass = builder.operatingEmptyMass;
      this.payload = builder.payload;
      this.range = builder.range;
      this.blockFuelMass = builder.blockFuelMass;
      this.flightTime = builder.flightTime;
      this.utilization = ImmutableMap.copyOf(builder.utilization);
      this.lifeSpan = builder.lifeSpan;
      this.residualValue = builder.residualValue;
      this.aircraftPrice = ImmutableMap.copyOf(builder.aircraftPrice);
      this.airframeRelativeSparesCosts = builder.airframeRelativeSparesCosts;
      this.enginesRelativeSparesCosts = builder.enginesRelativeSparesCosts;
      this.interestRate = builder.interestRate;
      this.insuranceRate = builder.insuranceRate;
      this.cabinLabourRate = builder.cabinLabourRate;
      this.cockpitLabourRate = builder.cockpitLabourRate;
      this.fuelUnitPrice = builder.fuelUnitPrice;
      this.landingCharges = ImmutableMap.copyOf(builder.landingCharges);
      this.navigationCharges = ImmutableMap.copyOf(builder.navigationCharges);
      this.groundHandlingCharges = ImmutableMap.copyOf(builder.groundHandlingCharges);
      this.noiseCharges = ImmutableMap.copyOf(builder.noiseCharges);
      this.noiseConstant = builder.noiseConstant;
      this.noiseDepartureThreshold = builder.noiseDepartureThreshold;
      this.noiseArrivalThreshold = builder.noiseArrivalThreshold;
      this.approachCertifiedNoiseLevel = builder.approachCertifiedNoiseLevel;
      this.lateralCertifiedNoiseLevel = builder.lateralCertifiedNoiseLevel;
      this.flyoverCertifiedNoiseLevel = builder.flyoverCertifiedNoiseLevel;
      this.emissionsChargesNOx = ImmutableMap.copyOf(builder.emissionsChargesNOx);
      this.emissionsConstantNOx = builder.emissionsConstantNOx;
      this.massNOx = builder.massNOx;
      this.dpHCFooNOx = builder.dpHCFooNOx;
      this.emissionsChargesCO = ImmutableMap.copyOf(builder.emissionsChargesCO);
      this.emissionsConstantCO = builder.emissionsConstantCO;
      this.massCO = builder.massCO;
      this.dpHCFooCO = builder.dpHCFooCO;
      this.emissionsChargesCO2 = ImmutableMap.copyOf(builder.emissionsChargesCO2);
      this.emissionsConstantCO2 = builder.emissionsConstantCO2;
      this.massCO2 = builder.massCO2;
      this.dpHCFooCO2 = builder.dpHCFooCO2;
      this.emissionsChargesHC = ImmutableMap.copyOf(builder.emissionsChargesHC);
      this.emissionsConstantHC = builder.emissionsConstantHC;
      this.massHC = builder.massHC;
      this.dpHCFooHC = builder.dpHCFooHC;
      this.airframeLabourRate = builder.airframeLabourRate;
      this.engineLabourRate = builder.engineLabourRate;
      this.enginePrice = ImmutableMap.copyOf(builder.enginePrice);
      this.taskList = ImmutableList.copyOf(builder.taskList);
      this.derivedDataMethodMap = ImmutableMap.copyOf(builder.derivedDataMethodMap);
      this.plotList = ImmutableList.copyOf(builder.plotList);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public Aircraft getAircraft() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)) {
        throw new UnsupportedOperationException("aircraft not set");
      }
      return aircraft;
    }

    @Override
    public OperatingConditions getOperatingConditions() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)) {
        throw new UnsupportedOperationException("operatingConditions not set");
      }
      return operatingConditions;
    }

    @Override
    public Amount<Mass> getMaximumTakeOffMass() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)) {
        throw new UnsupportedOperationException("maximumTakeOffMass not set");
      }
      return maximumTakeOffMass;
    }

    @Override
    public Amount<Mass> getOperatingEmptyMass() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)) {
        throw new UnsupportedOperationException("operatingEmptyMass not set");
      }
      return operatingEmptyMass;
    }

    @Override
    public Amount<Mass> getPayload() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)) {
        throw new UnsupportedOperationException("payload not set");
      }
      return payload;
    }

    @Override
    public Amount<Length> getRange() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)) {
        throw new UnsupportedOperationException("range not set");
      }
      return range;
    }

    @Override
    public Amount<Mass> getBlockFuelMass() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)) {
        throw new UnsupportedOperationException("blockFuelMass not set");
      }
      return blockFuelMass;
    }

    @Override
    public Amount<Duration> getFlightTime() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)) {
        throw new UnsupportedOperationException("flightTime not set");
      }
      return flightTime;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getUtilization() {
      return utilization;
    }

    @Override
    public Amount<Duration> getLifeSpan() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)) {
        throw new UnsupportedOperationException("lifeSpan not set");
      }
      return lifeSpan;
    }

    @Override
    public Double getResidualValue() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)) {
        throw new UnsupportedOperationException("residualValue not set");
      }
      return residualValue;
    }

    @Override
    public Map<MethodEnum, Amount<Money>> getAircraftPrice() {
      return aircraftPrice;
    }

    @Override
    public Double getAirframeRelativeSparesCosts() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)) {
        throw new UnsupportedOperationException("airframeRelativeSparesCosts not set");
      }
      return airframeRelativeSparesCosts;
    }

    @Override
    public Double getEnginesRelativeSparesCosts() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)) {
        throw new UnsupportedOperationException("enginesRelativeSparesCosts not set");
      }
      return enginesRelativeSparesCosts;
    }

    @Override
    public Double getInterestRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)) {
        throw new UnsupportedOperationException("interestRate not set");
      }
      return interestRate;
    }

    @Override
    public Double getInsuranceRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)) {
        throw new UnsupportedOperationException("insuranceRate not set");
      }
      return insuranceRate;
    }

    @Override
    public Amount<?> getCabinLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)) {
        throw new UnsupportedOperationException("cabinLabourRate not set");
      }
      return cabinLabourRate;
    }

    @Override
    public Amount<?> getCockpitLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)) {
        throw new UnsupportedOperationException("cockpitLabourRate not set");
      }
      return cockpitLabourRate;
    }

    @Override
    public Amount<?> getFuelUnitPrice() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)) {
        throw new UnsupportedOperationException("fuelUnitPrice not set");
      }
      return fuelUnitPrice;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getLandingCharges() {
      return landingCharges;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getNavigationCharges() {
      return navigationCharges;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getGroundHandlingCharges() {
      return groundHandlingCharges;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getNoiseCharges() {
      return noiseCharges;
    }

    @Override
    public Amount<Money> getNoiseConstant() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CONSTANT)) {
        throw new UnsupportedOperationException("noiseConstant not set");
      }
      return noiseConstant;
    }

    @Override
    public Amount<Dimensionless> getNoiseDepartureThreshold() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD)) {
        throw new UnsupportedOperationException("noiseDepartureThreshold not set");
      }
      return noiseDepartureThreshold;
    }

    @Override
    public Amount<Dimensionless> getNoiseArrivalThreshold() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD)) {
        throw new UnsupportedOperationException("noiseArrivalThreshold not set");
      }
      return noiseArrivalThreshold;
    }

    @Override
    public Amount<Dimensionless> getApproachCertifiedNoiseLevel() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL)) {
        throw new UnsupportedOperationException("approachCertifiedNoiseLevel not set");
      }
      return approachCertifiedNoiseLevel;
    }

    @Override
    public Amount<Dimensionless> getLateralCertifiedNoiseLevel() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL)) {
        throw new UnsupportedOperationException("lateralCertifiedNoiseLevel not set");
      }
      return lateralCertifiedNoiseLevel;
    }

    @Override
    public Amount<Dimensionless> getFlyoverCertifiedNoiseLevel() {
      if (_unsetProperties.contains(
          IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL)) {
        throw new UnsupportedOperationException("flyoverCertifiedNoiseLevel not set");
      }
      return flyoverCertifiedNoiseLevel;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesNOx() {
      return emissionsChargesNOx;
    }

    @Override
    public Amount<Money> getEmissionsConstantNOx() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX)) {
        throw new UnsupportedOperationException("emissionsConstantNOx not set");
      }
      return emissionsConstantNOx;
    }

    @Override
    public Amount<Mass> getMassNOx() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_N_OX)) {
        throw new UnsupportedOperationException("massNOx not set");
      }
      return massNOx;
    }

    @Override
    public Amount<?> getDpHCFooNOx() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX)) {
        throw new UnsupportedOperationException("dpHCFooNOx not set");
      }
      return dpHCFooNOx;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesCO() {
      return emissionsChargesCO;
    }

    @Override
    public Amount<Money> getEmissionsConstantCO() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO)) {
        throw new UnsupportedOperationException("emissionsConstantCO not set");
      }
      return emissionsConstantCO;
    }

    @Override
    public Amount<Mass> getMassCO() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_CO)) {
        throw new UnsupportedOperationException("massCO not set");
      }
      return massCO;
    }

    @Override
    public Amount<?> getDpHCFooCO() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_CO)) {
        throw new UnsupportedOperationException("dpHCFooCO not set");
      }
      return dpHCFooCO;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesCO2() {
      return emissionsChargesCO2;
    }

    @Override
    public Amount<Money> getEmissionsConstantCO2() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2)) {
        throw new UnsupportedOperationException("emissionsConstantCO2 not set");
      }
      return emissionsConstantCO2;
    }

    @Override
    public Amount<Mass> getMassCO2() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_C_O2)) {
        throw new UnsupportedOperationException("massCO2 not set");
      }
      return massCO2;
    }

    @Override
    public Amount<?> getDpHCFooCO2() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2)) {
        throw new UnsupportedOperationException("dpHCFooCO2 not set");
      }
      return dpHCFooCO2;
    }

    @Override
    public Map<MethodEnum, Amount<?>> getEmissionsChargesHC() {
      return emissionsChargesHC;
    }

    @Override
    public Amount<Money> getEmissionsConstantHC() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC)) {
        throw new UnsupportedOperationException("emissionsConstantHC not set");
      }
      return emissionsConstantHC;
    }

    @Override
    public Amount<Mass> getMassHC() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_HC)) {
        throw new UnsupportedOperationException("massHC not set");
      }
      return massHC;
    }

    @Override
    public Amount<?> getDpHCFooHC() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_HC)) {
        throw new UnsupportedOperationException("dpHCFooHC not set");
      }
      return dpHCFooHC;
    }

    @Override
    public Amount<?> getAirframeLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)) {
        throw new UnsupportedOperationException("airframeLabourRate not set");
      }
      return airframeLabourRate;
    }

    @Override
    public Amount<?> getEngineLabourRate() {
      if (_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)) {
        throw new UnsupportedOperationException("engineLabourRate not set");
      }
      return engineLabourRate;
    }

    @Override
    public Map<MethodEnum, Amount<Money>> getEnginePrice() {
      return enginePrice;
    }

    @Override
    public List<CostsEnum> getTaskList() {
      return taskList;
    }

    @Override
    public Map<CostsDerivedDataEnum, MethodEnum> getDerivedDataMethodMap() {
      return derivedDataMethodMap;
    }

    @Override
    public List<CostsPlotEnum> getPlotList() {
      return plotList;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IACCostsManager_Builder.Partial)) {
        return false;
      }
      IACCostsManager_Builder.Partial other = (IACCostsManager_Builder.Partial) obj;
      return Objects.equals(aircraft, other.aircraft)
          && Objects.equals(operatingConditions, other.operatingConditions)
          && Objects.equals(maximumTakeOffMass, other.maximumTakeOffMass)
          && Objects.equals(operatingEmptyMass, other.operatingEmptyMass)
          && Objects.equals(payload, other.payload)
          && Objects.equals(range, other.range)
          && Objects.equals(blockFuelMass, other.blockFuelMass)
          && Objects.equals(flightTime, other.flightTime)
          && Objects.equals(utilization, other.utilization)
          && Objects.equals(lifeSpan, other.lifeSpan)
          && Objects.equals(residualValue, other.residualValue)
          && Objects.equals(aircraftPrice, other.aircraftPrice)
          && Objects.equals(airframeRelativeSparesCosts, other.airframeRelativeSparesCosts)
          && Objects.equals(enginesRelativeSparesCosts, other.enginesRelativeSparesCosts)
          && Objects.equals(interestRate, other.interestRate)
          && Objects.equals(insuranceRate, other.insuranceRate)
          && Objects.equals(cabinLabourRate, other.cabinLabourRate)
          && Objects.equals(cockpitLabourRate, other.cockpitLabourRate)
          && Objects.equals(fuelUnitPrice, other.fuelUnitPrice)
          && Objects.equals(landingCharges, other.landingCharges)
          && Objects.equals(navigationCharges, other.navigationCharges)
          && Objects.equals(groundHandlingCharges, other.groundHandlingCharges)
          && Objects.equals(noiseCharges, other.noiseCharges)
          && Objects.equals(noiseConstant, other.noiseConstant)
          && Objects.equals(noiseDepartureThreshold, other.noiseDepartureThreshold)
          && Objects.equals(noiseArrivalThreshold, other.noiseArrivalThreshold)
          && Objects.equals(approachCertifiedNoiseLevel, other.approachCertifiedNoiseLevel)
          && Objects.equals(lateralCertifiedNoiseLevel, other.lateralCertifiedNoiseLevel)
          && Objects.equals(flyoverCertifiedNoiseLevel, other.flyoverCertifiedNoiseLevel)
          && Objects.equals(emissionsChargesNOx, other.emissionsChargesNOx)
          && Objects.equals(emissionsConstantNOx, other.emissionsConstantNOx)
          && Objects.equals(massNOx, other.massNOx)
          && Objects.equals(dpHCFooNOx, other.dpHCFooNOx)
          && Objects.equals(emissionsChargesCO, other.emissionsChargesCO)
          && Objects.equals(emissionsConstantCO, other.emissionsConstantCO)
          && Objects.equals(massCO, other.massCO)
          && Objects.equals(dpHCFooCO, other.dpHCFooCO)
          && Objects.equals(emissionsChargesCO2, other.emissionsChargesCO2)
          && Objects.equals(emissionsConstantCO2, other.emissionsConstantCO2)
          && Objects.equals(massCO2, other.massCO2)
          && Objects.equals(dpHCFooCO2, other.dpHCFooCO2)
          && Objects.equals(emissionsChargesHC, other.emissionsChargesHC)
          && Objects.equals(emissionsConstantHC, other.emissionsConstantHC)
          && Objects.equals(massHC, other.massHC)
          && Objects.equals(dpHCFooHC, other.dpHCFooHC)
          && Objects.equals(airframeLabourRate, other.airframeLabourRate)
          && Objects.equals(engineLabourRate, other.engineLabourRate)
          && Objects.equals(enginePrice, other.enginePrice)
          && Objects.equals(taskList, other.taskList)
          && Objects.equals(derivedDataMethodMap, other.derivedDataMethodMap)
          && Objects.equals(plotList, other.plotList)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          aircraft,
          operatingConditions,
          maximumTakeOffMass,
          operatingEmptyMass,
          payload,
          range,
          blockFuelMass,
          flightTime,
          utilization,
          lifeSpan,
          residualValue,
          aircraftPrice,
          airframeRelativeSparesCosts,
          enginesRelativeSparesCosts,
          interestRate,
          insuranceRate,
          cabinLabourRate,
          cockpitLabourRate,
          fuelUnitPrice,
          landingCharges,
          navigationCharges,
          groundHandlingCharges,
          noiseCharges,
          noiseConstant,
          noiseDepartureThreshold,
          noiseArrivalThreshold,
          approachCertifiedNoiseLevel,
          lateralCertifiedNoiseLevel,
          flyoverCertifiedNoiseLevel,
          emissionsChargesNOx,
          emissionsConstantNOx,
          massNOx,
          dpHCFooNOx,
          emissionsChargesCO,
          emissionsConstantCO,
          massCO,
          dpHCFooCO,
          emissionsChargesCO2,
          emissionsConstantCO2,
          massCO2,
          dpHCFooCO2,
          emissionsChargesHC,
          emissionsConstantHC,
          massHC,
          dpHCFooHC,
          airframeLabourRate,
          engineLabourRate,
          enginePrice,
          taskList,
          derivedDataMethodMap,
          plotList,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial IACCostsManager{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.AIRCRAFT)
                  ? "aircraft=" + aircraft
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_CONDITIONS)
                  ? "operatingConditions=" + operatingConditions
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.MAXIMUM_TAKE_OFF_MASS)
                  ? "maximumTakeOffMass=" + maximumTakeOffMass
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.OPERATING_EMPTY_MASS)
                  ? "operatingEmptyMass=" + operatingEmptyMass
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.PAYLOAD)
                  ? "payload=" + payload
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.RANGE)
                  ? "range=" + range
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.BLOCK_FUEL_MASS)
                  ? "blockFuelMass=" + blockFuelMass
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.FLIGHT_TIME)
                  ? "flightTime=" + flightTime
                  : null),
              "utilization=" + utilization,
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.LIFE_SPAN)
                  ? "lifeSpan=" + lifeSpan
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.RESIDUAL_VALUE)
                  ? "residualValue=" + residualValue
                  : null),
              "aircraftPrice=" + aircraftPrice,
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.AIRFRAME_RELATIVE_SPARES_COSTS)
                  ? "airframeRelativeSparesCosts=" + airframeRelativeSparesCosts
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.ENGINES_RELATIVE_SPARES_COSTS)
                  ? "enginesRelativeSparesCosts=" + enginesRelativeSparesCosts
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.INTEREST_RATE)
                  ? "interestRate=" + interestRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.INSURANCE_RATE)
                  ? "insuranceRate=" + insuranceRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.CABIN_LABOUR_RATE)
                  ? "cabinLabourRate=" + cabinLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.COCKPIT_LABOUR_RATE)
                  ? "cockpitLabourRate=" + cockpitLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.FUEL_UNIT_PRICE)
                  ? "fuelUnitPrice=" + fuelUnitPrice
                  : null),
              "landingCharges=" + landingCharges,
              "navigationCharges=" + navigationCharges,
              "groundHandlingCharges=" + groundHandlingCharges,
              "noiseCharges=" + noiseCharges,
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_CONSTANT)
                  ? "noiseConstant=" + noiseConstant
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.NOISE_DEPARTURE_THRESHOLD)
                  ? "noiseDepartureThreshold=" + noiseDepartureThreshold
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.NOISE_ARRIVAL_THRESHOLD)
                  ? "noiseArrivalThreshold=" + noiseArrivalThreshold
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.APPROACH_CERTIFIED_NOISE_LEVEL)
                  ? "approachCertifiedNoiseLevel=" + approachCertifiedNoiseLevel
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.LATERAL_CERTIFIED_NOISE_LEVEL)
                  ? "lateralCertifiedNoiseLevel=" + lateralCertifiedNoiseLevel
                  : null),
              (!_unsetProperties.contains(
                      IACCostsManager_Builder.Property.FLYOVER_CERTIFIED_NOISE_LEVEL)
                  ? "flyoverCertifiedNoiseLevel=" + flyoverCertifiedNoiseLevel
                  : null),
              "emissionsChargesNOx=" + emissionsChargesNOx,
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_N_OX)
                  ? "emissionsConstantNOx=" + emissionsConstantNOx
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_N_OX)
                  ? "massNOx=" + massNOx
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_N_OX)
                  ? "dpHCFooNOx=" + dpHCFooNOx
                  : null),
              "emissionsChargesCO=" + emissionsChargesCO,
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_CO)
                  ? "emissionsConstantCO=" + emissionsConstantCO
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_CO)
                  ? "massCO=" + massCO
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_CO)
                  ? "dpHCFooCO=" + dpHCFooCO
                  : null),
              "emissionsChargesCO2=" + emissionsChargesCO2,
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_C_O2)
                  ? "emissionsConstantCO2=" + emissionsConstantCO2
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_C_O2)
                  ? "massCO2=" + massCO2
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_C_O2)
                  ? "dpHCFooCO2=" + dpHCFooCO2
                  : null),
              "emissionsChargesHC=" + emissionsChargesHC,
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.EMISSIONS_CONSTANT_HC)
                  ? "emissionsConstantHC=" + emissionsConstantHC
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.MASS_HC)
                  ? "massHC=" + massHC
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.DP_HC_FOO_HC)
                  ? "dpHCFooHC=" + dpHCFooHC
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.AIRFRAME_LABOUR_RATE)
                  ? "airframeLabourRate=" + airframeLabourRate
                  : null),
              (!_unsetProperties.contains(IACCostsManager_Builder.Property.ENGINE_LABOUR_RATE)
                  ? "engineLabourRate=" + engineLabourRate
                  : null),
              "enginePrice=" + enginePrice,
              "taskList=" + taskList,
              "derivedDataMethodMap=" + derivedDataMethodMap,
              "plotList=" + plotList)
          + "}";
    }
  }
}
