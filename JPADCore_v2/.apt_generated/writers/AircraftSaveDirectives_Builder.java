// Autogenerated code. Do not modify.
package writers;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link AircraftSaveDirectives.Builder},
 * derived from the API of {@link AircraftSaveDirectives}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class AircraftSaveDirectives_Builder {

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    AIRCRAFT_FILE_NAME("aircraftFileName"),
    WING_FILE_NAME("wingFileName"),
    H_TAIL_FILE_NAME("HTailFileName"),
    V_TAIL_FILE_NAME("VTailFileName"),
    CANARD_FILE_NAME("canardFileName"),
    FUSELAGE_FILE_NAME("fuselageFileName"),
    CABIN_CONFIGURATION_FILE_NAME("cabinConfigurationFileName"),
    NACELLE_FILE_NAME("nacelleFileName"),
    ENGINE_FILE_NAME("engineFileName"),
    LANDING_GEAR_FILE_NAME("landingGearFileName"),
    SYSTEM_FILE_NAME("systemFileName"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String aircraftFileName;
  private String wingFileName;
  private String HTailFileName;
  private String VTailFileName;
  private String canardFileName;
  private String fuselageFileName;
  private String cabinConfigurationFileName;
  private String nacelleFileName;
  private String engineFileName;
  private String landingGearFileName;
  private String systemFileName;
  private final ArrayList<String> airfoilFileNames = new ArrayList<>();
  private final EnumSet<AircraftSaveDirectives_Builder.Property> _unsetProperties =
      EnumSet.allOf(AircraftSaveDirectives_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getAircraftFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code aircraftFileName} is null
   */
  public AircraftSaveDirectives.Builder setAircraftFileName(String aircraftFileName) {
    this.aircraftFileName = Preconditions.checkNotNull(aircraftFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.AIRCRAFT_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getAircraftFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapAircraftFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setAircraftFileName(mapper.apply(getAircraftFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getAircraftFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getAircraftFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.AIRCRAFT_FILE_NAME),
        "aircraftFileName not set");
    return aircraftFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getWingFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code wingFileName} is null
   */
  public AircraftSaveDirectives.Builder setWingFileName(String wingFileName) {
    this.wingFileName = Preconditions.checkNotNull(wingFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.WING_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getWingFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapWingFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setWingFileName(mapper.apply(getWingFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getWingFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getWingFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.WING_FILE_NAME),
        "wingFileName not set");
    return wingFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getHTailFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code HTailFileName} is null
   */
  public AircraftSaveDirectives.Builder setHTailFileName(String HTailFileName) {
    this.HTailFileName = Preconditions.checkNotNull(HTailFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.H_TAIL_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getHTailFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapHTailFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setHTailFileName(mapper.apply(getHTailFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getHTailFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getHTailFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.H_TAIL_FILE_NAME),
        "HTailFileName not set");
    return HTailFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getVTailFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code VTailFileName} is null
   */
  public AircraftSaveDirectives.Builder setVTailFileName(String VTailFileName) {
    this.VTailFileName = Preconditions.checkNotNull(VTailFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.V_TAIL_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getVTailFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapVTailFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setVTailFileName(mapper.apply(getVTailFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getVTailFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getVTailFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.V_TAIL_FILE_NAME),
        "VTailFileName not set");
    return VTailFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getCanardFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code canardFileName} is null
   */
  public AircraftSaveDirectives.Builder setCanardFileName(String canardFileName) {
    this.canardFileName = Preconditions.checkNotNull(canardFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.CANARD_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getCanardFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapCanardFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCanardFileName(mapper.apply(getCanardFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getCanardFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getCanardFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.CANARD_FILE_NAME),
        "canardFileName not set");
    return canardFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getFuselageFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fuselageFileName} is null
   */
  public AircraftSaveDirectives.Builder setFuselageFileName(String fuselageFileName) {
    this.fuselageFileName = Preconditions.checkNotNull(fuselageFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.FUSELAGE_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getFuselageFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapFuselageFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setFuselageFileName(mapper.apply(getFuselageFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getFuselageFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getFuselageFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.FUSELAGE_FILE_NAME),
        "fuselageFileName not set");
    return fuselageFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getCabinConfigurationFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code cabinConfigurationFileName} is null
   */
  public AircraftSaveDirectives.Builder setCabinConfigurationFileName(
      String cabinConfigurationFileName) {
    this.cabinConfigurationFileName = Preconditions.checkNotNull(cabinConfigurationFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.CABIN_CONFIGURATION_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getCabinConfigurationFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapCabinConfigurationFileName(
      UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setCabinConfigurationFileName(mapper.apply(getCabinConfigurationFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getCabinConfigurationFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getCabinConfigurationFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(
            AircraftSaveDirectives_Builder.Property.CABIN_CONFIGURATION_FILE_NAME),
        "cabinConfigurationFileName not set");
    return cabinConfigurationFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getNacelleFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code nacelleFileName} is null
   */
  public AircraftSaveDirectives.Builder setNacelleFileName(String nacelleFileName) {
    this.nacelleFileName = Preconditions.checkNotNull(nacelleFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.NACELLE_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getNacelleFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapNacelleFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setNacelleFileName(mapper.apply(getNacelleFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getNacelleFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getNacelleFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.NACELLE_FILE_NAME),
        "nacelleFileName not set");
    return nacelleFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getEngineFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code engineFileName} is null
   */
  public AircraftSaveDirectives.Builder setEngineFileName(String engineFileName) {
    this.engineFileName = Preconditions.checkNotNull(engineFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.ENGINE_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getEngineFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapEngineFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setEngineFileName(mapper.apply(getEngineFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getEngineFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEngineFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.ENGINE_FILE_NAME),
        "engineFileName not set");
    return engineFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getLandingGearFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code landingGearFileName} is null
   */
  public AircraftSaveDirectives.Builder setLandingGearFileName(String landingGearFileName) {
    this.landingGearFileName = Preconditions.checkNotNull(landingGearFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.LANDING_GEAR_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getLandingGearFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapLandingGearFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setLandingGearFileName(mapper.apply(getLandingGearFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getLandingGearFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getLandingGearFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.LANDING_GEAR_FILE_NAME),
        "landingGearFileName not set");
    return landingGearFileName;
  }

  /**
   * Sets the value to be returned by {@link AircraftSaveDirectives#getSystemFileName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code systemFileName} is null
   */
  public AircraftSaveDirectives.Builder setSystemFileName(String systemFileName) {
    this.systemFileName = Preconditions.checkNotNull(systemFileName);
    _unsetProperties.remove(AircraftSaveDirectives_Builder.Property.SYSTEM_FILE_NAME);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link AircraftSaveDirectives#getSystemFileName()}
   * by applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public AircraftSaveDirectives.Builder mapSystemFileName(UnaryOperator<String> mapper) {
    Preconditions.checkNotNull(mapper);
    return setSystemFileName(mapper.apply(getSystemFileName()));
  }

  /**
   * Returns the value that will be returned by {@link AircraftSaveDirectives#getSystemFileName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getSystemFileName() {
    Preconditions.checkState(
        !_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.SYSTEM_FILE_NAME),
        "systemFileName not set");
    return systemFileName;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link AircraftSaveDirectives#getAirfoilFileNames()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public AircraftSaveDirectives.Builder addAirfoilFileNames(String element) {
    this.airfoilFileNames.add(Preconditions.checkNotNull(element));
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link AircraftSaveDirectives#getAirfoilFileNames()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public AircraftSaveDirectives.Builder addAirfoilFileNames(String... elements) {
    airfoilFileNames.ensureCapacity(airfoilFileNames.size() + elements.length);
    for (String element : elements) {
      addAirfoilFileNames(element);
    }
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from
   * {@link AircraftSaveDirectives#getAirfoilFileNames()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public AircraftSaveDirectives.Builder addAllAirfoilFileNames(
      Iterable<? extends String> elements) {
    if (elements instanceof Collection) {
      airfoilFileNames.ensureCapacity(airfoilFileNames.size() + ((Collection<?>) elements).size());
    }
    for (String element : elements) {
      addAirfoilFileNames(element);
    }
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link AircraftSaveDirectives#getAirfoilFileNames()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void
   * consumer, so any value returned from a lambda will be ignored. Take care
   * not to call pure functions, like {@link Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public AircraftSaveDirectives.Builder mutateAirfoilFileNames(
      Consumer<? super List<String>> mutator) {
    // If addAirfoilFileNames is overridden, this method will be updated to delegate to it
    mutator.accept(airfoilFileNames);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link AircraftSaveDirectives#getAirfoilFileNames()}.
   *
   * @return this {@code Builder} object
   */
  public AircraftSaveDirectives.Builder clearAirfoilFileNames() {
    this.airfoilFileNames.clear();
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by
   * {@link AircraftSaveDirectives#getAirfoilFileNames()}.
   * Changes to this builder will be reflected in the view.
   */
  public List<String> getAirfoilFileNames() {
    return Collections.unmodifiableList(airfoilFileNames);
  }

  /**
   * Sets all property values using the given {@code AircraftSaveDirectives} as a template.
   */
  public AircraftSaveDirectives.Builder mergeFrom(AircraftSaveDirectives value) {
    setAircraftFileName(value.getAircraftFileName());
    setWingFileName(value.getWingFileName());
    setHTailFileName(value.getHTailFileName());
    setVTailFileName(value.getVTailFileName());
    setCanardFileName(value.getCanardFileName());
    setFuselageFileName(value.getFuselageFileName());
    setCabinConfigurationFileName(value.getCabinConfigurationFileName());
    setNacelleFileName(value.getNacelleFileName());
    setEngineFileName(value.getEngineFileName());
    setLandingGearFileName(value.getLandingGearFileName());
    setSystemFileName(value.getSystemFileName());
    addAllAirfoilFileNames(value.getAirfoilFileNames());
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public AircraftSaveDirectives.Builder mergeFrom(AircraftSaveDirectives.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    AircraftSaveDirectives_Builder base = (AircraftSaveDirectives_Builder) template;
    if (!base._unsetProperties.contains(
        AircraftSaveDirectives_Builder.Property.AIRCRAFT_FILE_NAME)) {
      setAircraftFileName(template.getAircraftFileName());
    }
    if (!base._unsetProperties.contains(AircraftSaveDirectives_Builder.Property.WING_FILE_NAME)) {
      setWingFileName(template.getWingFileName());
    }
    if (!base._unsetProperties.contains(AircraftSaveDirectives_Builder.Property.H_TAIL_FILE_NAME)) {
      setHTailFileName(template.getHTailFileName());
    }
    if (!base._unsetProperties.contains(AircraftSaveDirectives_Builder.Property.V_TAIL_FILE_NAME)) {
      setVTailFileName(template.getVTailFileName());
    }
    if (!base._unsetProperties.contains(AircraftSaveDirectives_Builder.Property.CANARD_FILE_NAME)) {
      setCanardFileName(template.getCanardFileName());
    }
    if (!base._unsetProperties.contains(
        AircraftSaveDirectives_Builder.Property.FUSELAGE_FILE_NAME)) {
      setFuselageFileName(template.getFuselageFileName());
    }
    if (!base._unsetProperties.contains(
        AircraftSaveDirectives_Builder.Property.CABIN_CONFIGURATION_FILE_NAME)) {
      setCabinConfigurationFileName(template.getCabinConfigurationFileName());
    }
    if (!base._unsetProperties.contains(
        AircraftSaveDirectives_Builder.Property.NACELLE_FILE_NAME)) {
      setNacelleFileName(template.getNacelleFileName());
    }
    if (!base._unsetProperties.contains(AircraftSaveDirectives_Builder.Property.ENGINE_FILE_NAME)) {
      setEngineFileName(template.getEngineFileName());
    }
    if (!base._unsetProperties.contains(
        AircraftSaveDirectives_Builder.Property.LANDING_GEAR_FILE_NAME)) {
      setLandingGearFileName(template.getLandingGearFileName());
    }
    if (!base._unsetProperties.contains(AircraftSaveDirectives_Builder.Property.SYSTEM_FILE_NAME)) {
      setSystemFileName(template.getSystemFileName());
    }
    addAllAirfoilFileNames(((AircraftSaveDirectives_Builder) template).airfoilFileNames);
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public AircraftSaveDirectives.Builder clear() {
    airfoilFileNames.clear();
    return (AircraftSaveDirectives.Builder) this;
  }

  /**
   * Returns a newly-created {@link AircraftSaveDirectives} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public AircraftSaveDirectives build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new AircraftSaveDirectives_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link AircraftSaveDirectives}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public AircraftSaveDirectives buildPartial() {
    return new AircraftSaveDirectives_Builder.Partial(this);
  }

  private static final class Value implements AircraftSaveDirectives {
    private final String aircraftFileName;
    private final String wingFileName;
    private final String HTailFileName;
    private final String VTailFileName;
    private final String canardFileName;
    private final String fuselageFileName;
    private final String cabinConfigurationFileName;
    private final String nacelleFileName;
    private final String engineFileName;
    private final String landingGearFileName;
    private final String systemFileName;
    private final List<String> airfoilFileNames;

    private Value(AircraftSaveDirectives_Builder builder) {
      this.aircraftFileName = builder.aircraftFileName;
      this.wingFileName = builder.wingFileName;
      this.HTailFileName = builder.HTailFileName;
      this.VTailFileName = builder.VTailFileName;
      this.canardFileName = builder.canardFileName;
      this.fuselageFileName = builder.fuselageFileName;
      this.cabinConfigurationFileName = builder.cabinConfigurationFileName;
      this.nacelleFileName = builder.nacelleFileName;
      this.engineFileName = builder.engineFileName;
      this.landingGearFileName = builder.landingGearFileName;
      this.systemFileName = builder.systemFileName;
      this.airfoilFileNames = ImmutableList.copyOf(builder.airfoilFileNames);
    }

    @Override
    public String getAircraftFileName() {
      return aircraftFileName;
    }

    @Override
    public String getWingFileName() {
      return wingFileName;
    }

    @Override
    public String getHTailFileName() {
      return HTailFileName;
    }

    @Override
    public String getVTailFileName() {
      return VTailFileName;
    }

    @Override
    public String getCanardFileName() {
      return canardFileName;
    }

    @Override
    public String getFuselageFileName() {
      return fuselageFileName;
    }

    @Override
    public String getCabinConfigurationFileName() {
      return cabinConfigurationFileName;
    }

    @Override
    public String getNacelleFileName() {
      return nacelleFileName;
    }

    @Override
    public String getEngineFileName() {
      return engineFileName;
    }

    @Override
    public String getLandingGearFileName() {
      return landingGearFileName;
    }

    @Override
    public String getSystemFileName() {
      return systemFileName;
    }

    @Override
    public List<String> getAirfoilFileNames() {
      return airfoilFileNames;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AircraftSaveDirectives_Builder.Value)) {
        return false;
      }
      AircraftSaveDirectives_Builder.Value other = (AircraftSaveDirectives_Builder.Value) obj;
      return Objects.equals(aircraftFileName, other.aircraftFileName)
          && Objects.equals(wingFileName, other.wingFileName)
          && Objects.equals(HTailFileName, other.HTailFileName)
          && Objects.equals(VTailFileName, other.VTailFileName)
          && Objects.equals(canardFileName, other.canardFileName)
          && Objects.equals(fuselageFileName, other.fuselageFileName)
          && Objects.equals(cabinConfigurationFileName, other.cabinConfigurationFileName)
          && Objects.equals(nacelleFileName, other.nacelleFileName)
          && Objects.equals(engineFileName, other.engineFileName)
          && Objects.equals(landingGearFileName, other.landingGearFileName)
          && Objects.equals(systemFileName, other.systemFileName)
          && Objects.equals(airfoilFileNames, other.airfoilFileNames);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          aircraftFileName,
          wingFileName,
          HTailFileName,
          VTailFileName,
          canardFileName,
          fuselageFileName,
          cabinConfigurationFileName,
          nacelleFileName,
          engineFileName,
          landingGearFileName,
          systemFileName,
          airfoilFileNames);
    }

    @Override
    public String toString() {
      return "AircraftSaveDirectives{"
          + "aircraftFileName="
          + aircraftFileName
          + ", "
          + "wingFileName="
          + wingFileName
          + ", "
          + "HTailFileName="
          + HTailFileName
          + ", "
          + "VTailFileName="
          + VTailFileName
          + ", "
          + "canardFileName="
          + canardFileName
          + ", "
          + "fuselageFileName="
          + fuselageFileName
          + ", "
          + "cabinConfigurationFileName="
          + cabinConfigurationFileName
          + ", "
          + "nacelleFileName="
          + nacelleFileName
          + ", "
          + "engineFileName="
          + engineFileName
          + ", "
          + "landingGearFileName="
          + landingGearFileName
          + ", "
          + "systemFileName="
          + systemFileName
          + ", "
          + "airfoilFileNames="
          + airfoilFileNames
          + "}";
    }
  }

  private static final class Partial implements AircraftSaveDirectives {
    private final String aircraftFileName;
    private final String wingFileName;
    private final String HTailFileName;
    private final String VTailFileName;
    private final String canardFileName;
    private final String fuselageFileName;
    private final String cabinConfigurationFileName;
    private final String nacelleFileName;
    private final String engineFileName;
    private final String landingGearFileName;
    private final String systemFileName;
    private final List<String> airfoilFileNames;
    private final EnumSet<AircraftSaveDirectives_Builder.Property> _unsetProperties;

    Partial(AircraftSaveDirectives_Builder builder) {
      this.aircraftFileName = builder.aircraftFileName;
      this.wingFileName = builder.wingFileName;
      this.HTailFileName = builder.HTailFileName;
      this.VTailFileName = builder.VTailFileName;
      this.canardFileName = builder.canardFileName;
      this.fuselageFileName = builder.fuselageFileName;
      this.cabinConfigurationFileName = builder.cabinConfigurationFileName;
      this.nacelleFileName = builder.nacelleFileName;
      this.engineFileName = builder.engineFileName;
      this.landingGearFileName = builder.landingGearFileName;
      this.systemFileName = builder.systemFileName;
      this.airfoilFileNames = ImmutableList.copyOf(builder.airfoilFileNames);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getAircraftFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.AIRCRAFT_FILE_NAME)) {
        throw new UnsupportedOperationException("aircraftFileName not set");
      }
      return aircraftFileName;
    }

    @Override
    public String getWingFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.WING_FILE_NAME)) {
        throw new UnsupportedOperationException("wingFileName not set");
      }
      return wingFileName;
    }

    @Override
    public String getHTailFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.H_TAIL_FILE_NAME)) {
        throw new UnsupportedOperationException("HTailFileName not set");
      }
      return HTailFileName;
    }

    @Override
    public String getVTailFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.V_TAIL_FILE_NAME)) {
        throw new UnsupportedOperationException("VTailFileName not set");
      }
      return VTailFileName;
    }

    @Override
    public String getCanardFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.CANARD_FILE_NAME)) {
        throw new UnsupportedOperationException("canardFileName not set");
      }
      return canardFileName;
    }

    @Override
    public String getFuselageFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.FUSELAGE_FILE_NAME)) {
        throw new UnsupportedOperationException("fuselageFileName not set");
      }
      return fuselageFileName;
    }

    @Override
    public String getCabinConfigurationFileName() {
      if (_unsetProperties.contains(
          AircraftSaveDirectives_Builder.Property.CABIN_CONFIGURATION_FILE_NAME)) {
        throw new UnsupportedOperationException("cabinConfigurationFileName not set");
      }
      return cabinConfigurationFileName;
    }

    @Override
    public String getNacelleFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.NACELLE_FILE_NAME)) {
        throw new UnsupportedOperationException("nacelleFileName not set");
      }
      return nacelleFileName;
    }

    @Override
    public String getEngineFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.ENGINE_FILE_NAME)) {
        throw new UnsupportedOperationException("engineFileName not set");
      }
      return engineFileName;
    }

    @Override
    public String getLandingGearFileName() {
      if (_unsetProperties.contains(
          AircraftSaveDirectives_Builder.Property.LANDING_GEAR_FILE_NAME)) {
        throw new UnsupportedOperationException("landingGearFileName not set");
      }
      return landingGearFileName;
    }

    @Override
    public String getSystemFileName() {
      if (_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.SYSTEM_FILE_NAME)) {
        throw new UnsupportedOperationException("systemFileName not set");
      }
      return systemFileName;
    }

    @Override
    public List<String> getAirfoilFileNames() {
      return airfoilFileNames;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof AircraftSaveDirectives_Builder.Partial)) {
        return false;
      }
      AircraftSaveDirectives_Builder.Partial other = (AircraftSaveDirectives_Builder.Partial) obj;
      return Objects.equals(aircraftFileName, other.aircraftFileName)
          && Objects.equals(wingFileName, other.wingFileName)
          && Objects.equals(HTailFileName, other.HTailFileName)
          && Objects.equals(VTailFileName, other.VTailFileName)
          && Objects.equals(canardFileName, other.canardFileName)
          && Objects.equals(fuselageFileName, other.fuselageFileName)
          && Objects.equals(cabinConfigurationFileName, other.cabinConfigurationFileName)
          && Objects.equals(nacelleFileName, other.nacelleFileName)
          && Objects.equals(engineFileName, other.engineFileName)
          && Objects.equals(landingGearFileName, other.landingGearFileName)
          && Objects.equals(systemFileName, other.systemFileName)
          && Objects.equals(airfoilFileNames, other.airfoilFileNames)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          aircraftFileName,
          wingFileName,
          HTailFileName,
          VTailFileName,
          canardFileName,
          fuselageFileName,
          cabinConfigurationFileName,
          nacelleFileName,
          engineFileName,
          landingGearFileName,
          systemFileName,
          airfoilFileNames,
          _unsetProperties);
    }

    @Override
    public String toString() {
      return "partial AircraftSaveDirectives{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(
                      AircraftSaveDirectives_Builder.Property.AIRCRAFT_FILE_NAME)
                  ? "aircraftFileName=" + aircraftFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.WING_FILE_NAME)
                  ? "wingFileName=" + wingFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.H_TAIL_FILE_NAME)
                  ? "HTailFileName=" + HTailFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.V_TAIL_FILE_NAME)
                  ? "VTailFileName=" + VTailFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.CANARD_FILE_NAME)
                  ? "canardFileName=" + canardFileName
                  : null),
              (!_unsetProperties.contains(
                      AircraftSaveDirectives_Builder.Property.FUSELAGE_FILE_NAME)
                  ? "fuselageFileName=" + fuselageFileName
                  : null),
              (!_unsetProperties.contains(
                      AircraftSaveDirectives_Builder.Property.CABIN_CONFIGURATION_FILE_NAME)
                  ? "cabinConfigurationFileName=" + cabinConfigurationFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.NACELLE_FILE_NAME)
                  ? "nacelleFileName=" + nacelleFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.ENGINE_FILE_NAME)
                  ? "engineFileName=" + engineFileName
                  : null),
              (!_unsetProperties.contains(
                      AircraftSaveDirectives_Builder.Property.LANDING_GEAR_FILE_NAME)
                  ? "landingGearFileName=" + landingGearFileName
                  : null),
              (!_unsetProperties.contains(AircraftSaveDirectives_Builder.Property.SYSTEM_FILE_NAME)
                  ? "systemFileName=" + systemFileName
                  : null),
              "airfoilFileNames=" + airfoilFileNames)
          + "}";
    }
  }
}
