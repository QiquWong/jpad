/*
*   NACA65ASeries -- An arbitrary NACA 65A series airfoil.
*
*   Copyright (C) 2010-2012 by Joseph A. Huwaldt
*   All rights reserved.
*   
*   This library is free software; you can redistribute it and/or
*   modify it under the terms of the GNU Lesser General Public
*   License as published by the Free Software Foundation; either
*   version 2.1 of the License, or (at your option) any later version.
*   
*   This library is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*   Lesser General Public License for more details.
*
*   You should have received a copy of the GNU Lesser General Public License
*   along with this program; if not, write to the Free Software
*   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*   Or visit:  http://www.gnu.org/licenses/lgpl.html
**/
package standaloneutils.aerotools.aero.airfoils;

import java.util.List;
import java.awt.geom.Point2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;


/**
*  <p> This class represents an arbitrary NACA 65A series
*      airfoil section such as a NACA 65A020 airfoil.
*  </p>
*
*  <p> Ported from FORTRAN "NACA6.FOR" to Java by:
*                Joseph A. Huwaldt, June 4, 2010     </p>
*
*  <p> Original FORTRAN "NACA4" code had the following note:  </p>
*
*  <pre>
*         AUTHORS - Charles L.Ladson and Cuyler W. Brooks, NASA Langley
*                   Liam Hardy, NASA Ames
*                   Ralph Carmichael, Public Domain Aeronautical Software
*         Last FORTRAN version:  23Nov96  2.0   RLC
*
*         NOTES - This program has also been known as LADSON and SIXSERIES and
*                 as SIXSERIE on systems with a 8-letter name limit.
*         REFERENCES-  NASA Technical Memorandum TM X-3069 (September, 1974),
*                      by Charles L. Ladson and Cuyler W. Brooks, Jr., NASA Langley Research Center.
*
*                      "Theory of Wing Sections", by Ira Abbott and Albert Von Doenhoff.
*  </pre>
*
*  <p>  Modified by:  Joseph A. Huwaldt  </p>
*
*  @author  Joseph A. Huwaldt   Date:  June 6, 2010
*  @version September 15, 2012
**/
public class NACA65ASeries extends NACA6ASeries {
	
	//-----------------------------------------------------------------------------------
	
	/**
	*  Create a NACA 65A series airfoil with the specified parameters.
	*
	*  @param  CLi        Design lift coefficient (e.g.: 65A206 has CLi = 0.2).
	*  @param  thickness  The thickness to chord ratio (e.g.: 0.20 ==> 20% t/c).
	*  @param  length     The chord length.
	**/
	public NACA65ASeries(double CLi, double thickness, double length) {
		super(CLi, thickness, length);
	}
	
	/**
	*  Returns a String that represents the profile type of this airfoil.
	**/
    @Override
	public String getProfile() {
		return "65A";
	}
	
	//	Phi & eps vectors for 65A series airfoil.
    private static final double[] philde = {
		0.,.01453,.02907,
		.0436,.05814,.07267,.08721,.10175,
		.1163,.13084,.14539,.14877,
		.15214,.15552,.15889,.16227,.16564,
		.16902,.1724,.17578,.17916,
		.18436,.18956,.19477,.19997,.20518,
		.21039,.21559,.2208,.22601,
		.23122,.24077,.25032,.25987,.26941,
		.27896,.28851,.29805,.3076,
		.31714,.32669,.33996,.35322,.36649,
		.37976,.39302,.40629,.41956,
		.43283,.4461,.45937,.46976,.48015,
		.49054,.50093,.51132,.52171,
		.5321,.54249,.55288,.56327,.57223,
		.58118,.59014,.59909,.60805,
		.617,.62596,.63491,.64387,.65282,
		.66829,.68376,.69923,.7147,
		.73017,.74564,.7611,.77657,.79204,
		.8075,.82106,.83461,.84816,
		.86172,.87527,.88882,.90237,.91593,
		.92948,.94303,.95538,.96772,
		.98007,.99242,1.00476,1.01711,1.02945,
		1.0418,1.05415,1.06649,1.0781,
		1.08971,1.10132,1.11293,1.12454,
		1.13615,1.14776,1.15937,1.17098,
		1.18259,1.19373,1.20486,1.216,1.22713,
		1.23827,1.2494,1.26054,1.27167,
		1.28281,1.29394,1.30473,1.31552,
		1.32631,1.33711,1.3479,1.35869,
		1.36948,1.38027,1.39106,1.40185,
		1.41248,1.42312,1.43375,1.44438,
		1.45501,1.46564,1.47628,1.48691,
		1.49754,1.50817,1.51872,1.52927,
		1.53983,1.55038,1.56093,1.57148,
		1.58203,1.59258,1.60314,1.61369,
		1.62418,1.63467,1.64516,1.65565,
		1.66614,1.67663,1.68712,1.69762,
		1.70811,1.7186,1.72914,1.73967,1.7502,
		1.76074,1.77127,1.78181,1.79234,
		1.80288,1.81341,1.82395,1.8346,
		1.84526,1.85591,1.86657,1.87722,
		1.88788,1.89853,1.90919,1.91985,
		1.9305,1.94138,1.95225,1.96313,
		1.97401,1.98488,1.99576,2.00664,
		2.01751,2.02839,2.03927,2.04786,
		2.05645,2.06504,2.07363,2.08222,
		2.09081,2.0994,2.10799,2.11658,
		2.12517,2.13979,2.15441,2.16903,
		2.18365,2.19826,2.21288,2.2275,
		2.24211,2.25673,2.27134,2.28424,
		2.29714,2.31003,2.32292,2.33582,
		2.34871,2.3616,2.37449,2.38739,
		2.40028,2.4149,2.42952,2.44413,
		2.45875,2.47336,2.48798,2.50259,
		2.51719,2.5318,2.5464,2.56435,2.58229,
		2.60023,2.61816,2.6361,2.65402,
		2.67195,2.68987,2.70779,2.72571,
		2.76731,2.80891,2.8505,2.89209,
		2.93368,2.97526,3.01684,3.05843,
		3.10001,3.14159 };
		
    private static final double[] epslde = {
		0.,.00137,.00274,
		.0041,.00545,.00679,.00811,.00941,
		.0107,.01195,.01318,.01346,
		.01374,.01401,.01427,.01453,.01477,
		.015,.01521,.01541,.01559,
		.01583,.01602,.01618,.0163,.0164,
		.01648,.01654,.0166,.01665,
		.01671,.01683,.01698,.01715,.01732,
		.01749,.01766,.01782,.01796,
		.01807,.01814,.01819,.01816,.01807,
		.01793,.01775,.01755,.01732,
		.01708,.01684,.01661,.01644,.01628,
		.01614,.01601,.01589,.01578,
		.01569,.01561,.01554,.01549,.01546,
		.01543,.01541,.01541,.01541,
		.01542,.01544,.01547,.01551,.01555,
		.01565,.01577,.0159,.01607,
		.01625,.01645,.01668,.01693,.0172,
		.0175,.01778,.01807,.01837,
		.01869,.01902,.01936,.0197,.02005,
		.0204,.02076,.02108,.02141,
		.02174,.02207,.0224,.02274,.02309,
		.02344,.02381,.02418,.02454,
		.02491,.02528,.02567,.02607,.02647,
		.02689,.02731,.02775,.02819,
		.02863,.02907,.02952,.02998,.03044,
		.03091,.03138,.03185,.03232,
		.0328,.03326,.03371,.03417,.03463,
		.0351,.03557,.03604,.03652,
		.03701,.0375,.038,.03851,.03902,
		.03954,.04007,.0406,.04114,
		.04169,.04224,.04279,.04335,.04391,
		.04447,.04502,.04558,.04614,
		.04669,.04723,.04777,.0483,.04882,
		.04933,.04984,.05033,.05082,
		.0513,.05177,.05224,.0527,.05316,
		.05361,.05406,.05449,.05493,
		.05535,.05577,.05618,.05657,.05696,
		.05734,.05771,.05807,.05842,
		.05876,.05908,.05939,.05969,.05997,
		.06023,.06049,.06073,.06095,
		.06116,.06135,.06153,.0617,.06185,
		.06199,.06212,.06224,.06232,
		.0624,.06247,.06254,.06259,.06264,
		.06268,.06272,.06274,.06276,
		.06277,.06275,.06271,.06264,.06255,
		.06242,.06226,.06207,.06185,
		.06159,.06134,.06106,.06075,.06042,
		.06007,.0597,.05932,.05891,
		.0585,.05807,.05756,.05704,.0565,
		.05592,.05531,.05466,.05397,
		.05323,.05244,.05159,.05046,.04925,
		.04795,.04659,.04517,.0437,
		.0422,.04065,.03909,.03751,.03383,
		.03013,.0264,.02266,.01891,
		.01514,.01136,.00758,.00379,0. };
	
	/**
	*  Fill in phi, eps vectors for 65A series airfoil.
	*
	*  @param phi  An existing array with 201 elements to be filled in
	*              by this method.
	*  @param eps  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phep(double[] phi, double[] eps) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		
		spline(251,philde,epslde,bb,cc,dd);
		for (int i=0; i < 201; ++i) {
			phi[i] = i*Math.PI/200.;
			eps[i] = seval(251,phi[i],philde,epslde,bb,cc,dd);
		}
	}
	
	
	//	Phi & eps vectors for 65A series airfoil.
    private static final double[] philds = {
		0.,.01455,.0291,
		.04364,.05819,.07273,.08727,.10181,
		.11634,.13087,.14539,.14877,
		.15214,.15552,.1589,.16227,.16565,
		.16903,.1724,.17578,.17916,
		.18436,.18956,.19477,.19997,.20518,
		.21039,.2156,.2208,.22601,
		.23122,.24077,.25032,.25986,.26941,
		.27896,.2885,.29805,.3076,
		.31714,.32669,.33995,.35322,.36648,
		.37974,.39301,.40628,.41955,
		.43282,.44609,.45937,.46975,.48014,
		.49053,.50092,.51131,.5217,
		.5321,.54249,.55288,.56327,.57223,
		.58118,.59014,.59909,.60805,
		.617,.62596,.63491,.64387,.65282,
		.66829,.68376,.69923,.7147,
		.73016,.74563,.7611,.77657,.79204,
		.8075,.82106,.83461,.84816,
		.86171,.87527,.88882,.90237,.91592,
		.92948,.94303,.95538,.96772,
		.98007,.99241,1.00476,1.01711,1.02945,
		1.0418,1.05414,1.06649,1.0781,
		1.08971,1.10132,1.11293,1.12454,
		1.13615,1.14776,1.15937,1.17098,
		1.18259,1.19372,1.20486,1.21599,
		1.22713,1.23827,1.2494,1.26054,
		1.27167,1.28281,1.29394,1.30473,
		1.31552,1.32631,1.3371,1.3479,1.35869,
		1.36948,1.38027,1.39106,1.40185,
		1.41248,1.42311,1.43375,1.44438,
		1.45501,1.46564,1.47628,1.48691,
		1.49754,1.50817,1.51872,1.52928,
		1.53983,1.55038,1.56094,1.57149,
		1.58204,1.59259,1.60314,1.61369,
		1.62418,1.63468,1.64517,1.65566,
		1.66616,1.67665,1.68714,1.69763,
		1.70811,1.7186,1.72914,1.73968,
		1.75021,1.76075,1.77128,1.78182,
		1.79235,1.80289,1.81342,1.82395,
		1.83461,1.84527,1.85592,1.86658,
		1.87723,1.88789,1.89854,1.9092,
		1.91985,1.9305,1.94138,1.95226,
		1.96314,1.97402,1.98489,1.99577,
		2.00664,2.01752,2.02839,2.03927,
		2.05056,2.06185,2.07314,2.08444,
		2.09573,2.10702,2.11831,2.1296,
		2.14089,2.15217,2.16409,2.17601,
		2.18793,2.19985,2.21176,2.22368,
		2.2356,2.24751,2.25943,2.27134,
		2.28424,2.29713,2.31002,2.32292,
		2.33581,2.3487,2.36159,2.37449,
		2.38738,2.40028,2.41489,2.4295,
		2.44411,2.45872,2.47334,2.48795,
		2.50256,2.51717,2.53178,2.5464,
		2.56432,2.58225,2.60018,2.6181,
		2.63603,2.65396,2.67189,2.68983,
		2.70777,2.72571,2.76723,2.80877,
		2.85033,2.8919,2.9335,2.9751,3.01671,
		3.05834,3.09996,3.14159 };
		
    private static final double[] psilds = {
		.14761,.14748,.14709,
		.14649,.1457,.14476,.14369,
		.14253,.14131,.14007,.13882,.13854,
		.13826,.13798,.1377,.13743,
		.13716,.1369,.13665,.1364,.13616,
		.13581,.13547,.13515,.13484,
		.13455,.13426,.13398,.13371,.13345,
		.13318,.1327,.13221,.13172,
		.13124,.13075,.13026,.12976,.12926,
		.12876,.12825,.12753,.12681,
		.1261,.12541,.12475,.12415,.12359,
		.12311,.1227,.12239,.12221,
		.12209,.12202,.12199,.12199,.12203,
		.12209,.12216,.12224,.12233,
		.1224,.12246,.12253,.12259,.12265,
		.12271,.12277,.12283,.12289,
		.12295,.12305,.12316,.12326,.12337,
		.12348,.12359,.1237,.12381,
		.12391,.12401,.1241,.12418,.12426,
		.12434,.12441,.12448,.12455,
		.12461,.12467,.12472,.12477,.12482,
		.12486,.12489,.12492,.12495,
		.12498,.125,.12501,.12502,.12503,
		.12503,.12502,.12501,.125,
		.12498,.12495,.12492,.12489,.12485,
		.12481,.12476,.12471,.12465,
		.12459,.12452,.12445,.12437,.12428,
		.12419,.12409,.12398,.12387,
		.12375,.12362,.12349,.12334,.12319,
		.12303,.12286,.12268,.12249,
		.12229,.12208,.12186,.12163,.12138,
		.12113,.12085,.12057,.12027,
		.11996,.11964,.1193,.11894,.11857,
		.11818,.11778,.11736,.11693,
		.11648,.11602,.11554,.11504,.11453,
		.114,.11346,.11291,.11234,
		.11175,.11115,.11054,.10991,.10928,
		.10863,.10797,.1073,.10662,
		.10594,.10524,.10453,.10381,.10308,
		.10235,.10161,.10086,.1001,
		.09933,.09856,.09778,.09698,.09617,
		.09535,.09452,.09369,.09285,
		.09201,.09116,.0903,.08943,.08853,
		.08763,.08671,.08579,.08487,
		.08394,.08301,.08207,.08113,.08019,
		.07919,.07818,.07717,.07616,
		.07515,.07413,.07311,.07209,.07106,
		.07004,.06892,.06781,.0667,
		.06559,.06448,.06338,.06229,.06119,
		.06011,.05904,.05783,.05664,
		.05545,.05427,.05309,.05191,.05072,
		.04953,.04834,.04713,.04564,
		.04413,.04263,.04114,.03967,.03823,
		.03683,.03549,.03421,.033,
		.03052,.02844,.02675,.02539,.02434,
		.02355,.02301,.02266,.02248,
		.02242 };
	
	/**
	*  Fill in the psi vector for a 65A series airfoil.
	*
	*  @param phi  An array filled in by phep().
	*  @param psi  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phps(double[] phi, double[] psi) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		spline(251, philds, psilds, bb, cc, dd);
		for (int i=0; i < 201; ++i) {
			psi[i] = seval(251, phi[i], philds, psilds, bb, cc, dd); 
		}
	}
	
	/**
	*  Simple method to test this class.
	**/
	public static void main(String[] args) {
	
		DecimalFormat nf = (DecimalFormat)NumberFormat.getInstance();
		nf.setMaximumFractionDigits(5);
		nf.setMinimumFractionDigits(5);
		
		System.out.println("Start NACA65ASeries...");
		
		System.out.println("Creating a NACA 65A206 airfoil...");
		Airfoil af = new NACA65ASeries(0.2, 0.06, 1);
		
		System.out.println("Airfoil = " + af.toString());
		
		//	Output the upper surface of the airfoil.
		List<Point2D> upper = af.getUpper();
		List<Double> ypArr = af.getUpperYp();
		System.out.println("upper.size() = " + upper.size() + ", ypArr.size() = " + ypArr.size());
		
		System.out.println("        X    \t    Y    \t    dy/dx");
		int length = upper.size();
		for (int i=0; i < length; ++i) {
			Point2D o = upper.get(i);
			System.out.println("    " + nf.format(o.getX()) + "\t" + nf.format(o.getY()) +
									"\t" + nf.format(ypArr.get(i)));
		}
		
		System.out.println("# ordinates = " + length);
		System.out.println("Done!");
	}
}


