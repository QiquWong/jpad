/*
*   NACA67Series -- An arbitrary NACA 67 series airfoil.
*
*   Copyright (C) 2010-2012 by Joseph A. Huwaldt
*   All rights reserved.
*   
*   This library is free software; you can redistribute it and/or
*   modify it under the terms of the GNU Lesser General Public
*   License as published by the Free Software Foundation; either
*   version 2.1 of the License, or (at your option) any later version.
*   
*   This library is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*   Lesser General Public License for more details.
*
*   You should have received a copy of the GNU Lesser General Public License
*   along with this program; if not, write to the Free Software
*   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*   Or visit:  http://www.gnu.org/licenses/lgpl.html
**/
package standaloneutils.aerotools.aero.airfoils;

import java.util.List;
import java.awt.geom.Point2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;


/**
*  <p> This class represents an arbitrary NACA 67 series
*      airfoil section such as a NACA 67-020 airfoil.
*  </p>
*
*  <p> Ported from FORTRAN "NACA6.FOR" to Java by:
*                Joseph A. Huwaldt, June 4, 2010     </p>
*
*  <p> Original FORTRAN "NACA4" code had the following note:  </p>
*
*  <pre>
*         AUTHORS - Charles L.Ladson and Cuyler W. Brooks, NASA Langley
*                   Liam Hardy, NASA Ames
*                   Ralph Carmichael, Public Domain Aeronautical Software
*         Last FORTRAN version:  23Nov96  2.0   RLC
*
*         NOTES - This program has also been known as LADSON and SIXSERIES and
*                 as SIXSERIE on systems with a 8-letter name limit.
*         REFERENCES-  NASA Technical Memorandum TM X-3069 (September, 1974),
*                      by Charles L. Ladson and Cuyler W. Brooks, Jr., NASA Langley Research Center.
*
*                      "Theory of Wing Sections", by Ira Abbott and Albert Von Doenhoff.
*  </pre>
*
*  <p>  Modified by:  Joseph A. Huwaldt  </p>
*
*  @author  Joseph A. Huwaldt   Date:  June 6, 2010
*  @version September 15, 2012
**/
public class NACA67Series extends NACA6Series {
	
	//-----------------------------------------------------------------------------------
	
	/**
	*  Create a NACA 67 series airfoil with the specified parameters.
	*
	*  @param  CLi        Design lift coefficient (e.g.: 67-206 has CLi = 0.2).
	*  @param  thickness  The thickness to chord ratio (e.g.: 0.20 ==> 20% t/c).
	*  @param  length     The chord length.
	**/
	public NACA67Series(double CLi, double thickness, double length) {
		super(CLi, thickness, length);
	}
	
	/**
	*  Returns a String that represents the profile type of this airfoil.
	**/
    @Override
	public String getProfile() {
		return "67";
	}
	
	//	Phi & eps vectors for 67 series airfoil.
    private static final double[] philde = {
		0.,.01495,.0299,
		.04485,.0598,.07476,.08971,.10468,
		.11964,.13461,.14959,.1528,
		.15601,.15922,.16243,.16565,.16886,
		.17207,.17529,.1785,.18172,
		.18687,.19201,.19716,.20231,.20747,
		.21262,.21777,.22293,.22808,
		.23323,.24276,.25229,.26182,.27135,
		.28088,.29041,.29994,.30947,
		.319,.32853,.3418,.35507,.36834,
		.38162,.39489,.40817,.42144,
		.43472,.44799,.46127,.47164,.48201,
		.49238,.50274,.51311,.52348,
		.53385,.54422,.55458,.56495,.57385,
		.58275,.59165,.60055,.60945,
		.61835,.62725,.63615,.64505,.65395,
		.66928,.68461,.69994,.71527,
		.7306,.74593,.76126,.77658,.79191,
		.80724,.82061,.83397,.84734,
		.8607,.87407,.88743,.9008,.91416,
		.92753,.94089,.95309,.9653,
		.9775,.9897,1.0019,1.0141,1.0263,
		1.0385,1.0507,1.06289,1.07435,
		1.0858,1.09726,1.10871,1.12017,
		1.13162,1.14308,1.15453,1.16599,
		1.17744,1.1884,1.19936,1.21033,
		1.22129,1.23225,1.24321,1.25417,
		1.26513,1.27609,1.28706,1.2977,
		1.30835,1.319,1.32965,1.3403,1.35094,
		1.36159,1.37224,1.38289,1.39353,
		1.40401,1.4145,1.42498,1.43546,
		1.44594,1.45642,1.4669,1.47738,
		1.48786,1.49834,1.50878,1.51921,
		1.52965,1.54008,1.55052,1.56095,
		1.57139,1.58182,1.59226,1.60269,
		1.61319,1.62369,1.6342,1.6447,1.6552,
		1.6657,1.6762,1.6867,1.6972,
		1.7077,1.71841,1.72913,1.73984,
		1.75056,1.76127,1.77199,1.7827,
		1.79341,1.80413,1.81484,1.82589,
		1.83694,1.84799,1.85904,1.87009,
		1.88113,1.89218,1.90323,1.91427,
		1.92531,1.93688,1.94844,1.95999,
		1.97155,1.98311,1.99467,2.00622,
		2.01778,2.02933,2.04089,2.05305,
		2.06522,2.07739,2.08956,2.10172,
		2.11389,2.12606,2.13824,2.15041,
		2.16259,2.17534,2.1881,2.20085,
		2.21361,2.22637,2.23914,2.2519,
		2.26467,2.27744,2.29021,2.30376,
		2.31733,2.33089,2.34445,2.35802,
		2.37159,2.38516,2.39874,2.41232,
		2.4259,2.44078,2.45566,2.47054,
		2.48542,2.50029,2.51515,2.53,2.54483,
		2.55965,2.57444,2.59147,2.60847,
		2.62544,2.64239,2.65933,2.67625,
		2.69317,2.71007,2.72698,2.74389,
		2.78356,2.82326,2.86298,2.90274,
		2.94251,2.98231,3.02211,3.06193,
		3.10176,3.14159 };
		
    private static final double[] epslde = {
		0.,.00161,.00322,
		.00482,.0064,.00796,.00949,.011,
		.01246,.01388,.01525,.01554,
		.01582,.0161,.01637,.01664,.0169,
		.01714,.01738,.01761,.01782,
		.01813,.01841,.01865,.01888,.01908,
		.01927,.01945,.01962,.01979,
		.01996,.02029,.02063,.02097,.02131,
		.02164,.02195,.02224,.02249,
		.02269,.02285,.02298,.02301,.02296,
		.02284,.02267,.02245,.0222,
		.02194,.02168,.02143,.02125,.02108,
		.02093,.02079,.02067,.02055,
		.02045,.02035,.02026,.02017,.0201,
		.02004,.01998,.01992,.01987,
		.01983,.01979,.01975,.01972,.0197,
		.01967,.01966,.01967,.01969,
		.01973,.01978,.01985,.01992,.02001,
		.0201,.02019,.02029,.02039,
		.02051,.02062,.02075,.02088,.02102,
		.02117,.02133,.02148,.02164,
		.0218,.02198,.02216,.02234,.02254,
		.02274,.02295,.02316,.02337,
		.02359,.02381,.02404,.02427,.02451,
		.02476,.02501,.02527,.02553,
		.02579,.02606,.02632,.0266,.02688,
		.02716,.02745,.02775,.02805,
		.02836,.02866,.02897,.02928,.0296,
		.02992,.03025,.03059,.03093,
		.03128,.03163,.03199,.03235,.03271,
		.03309,.03346,.03385,.03424,
		.03464,.03505,.03546,.03588,.0363,
		.03673,.03717,.03762,.03807,
		.03852,.03899,.03945,.03993,.04041,
		.0409,.04139,.0419,.04241,
		.04293,.04346,.044,.04455,.04511,
		.0457,.04629,.0469,.04752,
		.04815,.0488,.04945,.05011,.05078,
		.05145,.05216,.05288,.0536,
		.05434,.05509,.05584,.05661,.05739,
		.05818,.05899,.05985,.06072,
		.0616,.0625,.0634,.06432,.06524,
		.06617,.06711,.06805,.06905,
		.07005,.07105,.07204,.07302,.07398,
		.07493,.07586,.07677,.07765,
		.07854,.07939,.0802,.08097,.08171,
		.0824,.08305,.08365,.08421,
		.08471,.0852,.08563,.08601,.08634,
		.08662,.08685,.08703,.08716,
		.08726,.08731,.08731,.08725,.0871,
		.08684,.08646,.08594,.08525,
		.08439,.08333,.08205,.08029,.07826,
		.07599,.07351,.07088,.06811,
		.06526,.06235,.05943,.05653,.04995,
		.04366,.03763,.03183,.02623,
		.02079,.01548,.01026,.00511,0. };
	
	/**
	*  Fill in phi, eps vectors for 67 series airfoil.
	*
	*  @param phi  An existing array with 201 elements to be filled in
	*              by this method.
	*  @param eps  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phep(double[] phi, double[] eps) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		
		spline(251,philde,epslde,bb,cc,dd);
		for (int i=0; i < 201; ++i) {
			phi[i] = i*Math.PI/200.;
			eps[i] = seval(251,phi[i],philde,epslde,bb,cc,dd);
		}
	}
	
	
	//	Phi & eps vectors for 67 series airfoil.
    private static final double[] philds = {
		0.,.01499,.02998,
		.04497,.05995,.07492,.08988,.10483,
		.11976,.13468,.14959,.1528,
		.15601,.15923,.16244,.16565,.16886,
		.17208,.17529,.1785,.18172,
		.18686,.19201,.19716,.20231,.20746,
		.21262,.21777,.22293,.22808,
		.23323,.24277,.25229,.26182,.27135,
		.28088,.29041,.29993,.30946,
		.31899,.32853,.34178,.35505,.36832,
		.38159,.39486,.40814,.42142,
		.4347,.44798,.46127,.47164,.482,
		.49237,.50274,.51311,.52348,
		.53384,.54421,.55458,.56495,.57385,
		.58275,.59165,.60055,.60945,
		.61835,.62725,.63615,.64505,.65395,
		.66928,.68461,.69994,.71527,
		.7306,.74593,.76125,.77658,.79191,
		.80724,.82061,.83397,.84734,
		.8607,.87407,.88743,.9008,.91416,
		.92753,.94089,.95309,.96529,
		.97749,.98969,1.00189,1.01409,1.02629,
		1.03849,1.05069,1.06289,1.07435,
		1.0858,1.09726,1.10871,1.12017,
		1.13162,1.14308,1.15453,1.16599,
		1.17744,1.1884,1.19936,1.21032,
		1.22129,1.23225,1.24321,1.25417,
		1.26513,1.27609,1.28706,1.2977,
		1.30835,1.319,1.32965,1.34029,1.35094,
		1.36159,1.37224,1.38289,1.39353,
		1.40401,1.41449,1.42498,1.43546,
		1.44594,1.45642,1.4669,1.47738,
		1.48786,1.49834,1.50878,1.51921,
		1.52965,1.54008,1.55052,1.56095,
		1.57139,1.58182,1.59226,1.60269,
		1.61319,1.62369,1.63419,1.64469,
		1.65519,1.66569,1.67619,1.68669,
		1.69719,1.7077,1.71841,1.72912,
		1.73984,1.75055,1.76127,1.77198,
		1.7827,1.79341,1.80412,1.81484,
		1.82589,1.83694,1.84798,1.85903,
		1.87008,1.88113,1.89218,1.90322,
		1.91427,1.92531,1.93688,1.94844,1.96,
		1.97156,1.98312,1.99468,2.00623,
		2.01779,2.02934,2.04089,2.05308,
		2.06526,2.07745,2.08962,2.1018,
		2.11397,2.12613,2.13829,2.15044,
		2.16259,2.17538,2.18816,2.20093,
		2.2137,2.22646,2.23922,2.25197,
		2.26472,2.27746,2.29021,2.30379,
		2.31737,2.33095,2.34453,2.3581,
		2.37167,2.38523,2.39879,2.41235,
		2.4259,2.44078,2.45566,2.47053,
		2.48539,2.50025,2.5151,2.52995,
		2.54478,2.55962,2.57444,2.59138,
		2.60831,2.62523,2.64216,2.65909,
		2.67603,2.69297,2.70993,2.7269,
		2.74389,2.78335,2.8229,2.86255,
		2.90227,2.94205,2.98189,3.02178,
		3.0617,3.10164,3.14159 };
		
    private static final double[] psilds = {
		.18028,.18026,.18018,
		.18002,.17976,.17938,.17885,
		.17815,.17725,.17614,.1748,.17447,
		.17414,.1738,.17345,.1731,
		.17276,.17241,.17207,.17174,.17141,
		.17092,.17045,.17001,.16959,
		.16918,.16879,.1684,.16802,.16764,
		.16726,.16653,.16578,.16502,
		.16426,.16349,.16272,.16196,.16121,
		.16048,.15978,.15885,.15798,
		.15717,.15641,.15572,.15507,.15449,
		.15396,.15348,.15306,.15277,
		.15251,.15228,.15207,.15188,.15171,
		.15156,.15142,.15129,.15116,
		.15105,.15095,.15085,.15075,.15066,
		.15057,.15049,.15041,.15034,
		.15027,.15016,.15007,.15,.14994,
		.1499,.14986,.14984,.14982,
		.14982,.14982,.14982,.14983,.14985,
		.14986,.14988,.14991,.14993,
		.14996,.14999,.15002,.15005,.15008,
		.15011,.15014,.15018,.15021,
		.15024,.15028,.15031,.15035,.15038,
		.15042,.15045,.15048,.15052,
		.15056,.15059,.15063,.15067,.1507,
		.15074,.15077,.15081,.15084,
		.15088,.15091,.15094,.15096,.15099,
		.15101,.15103,.15104,.15106,
		.15107,.15108,.15108,.15109,.15109,
		.1511,.1511,.1511,.1511,.1511,
		.15109,.15109,.15108,.15107,
		.15106,.15104,.15102,.151,.15097,
		.15094,.1509,.15086,.15081,
		.15076,.15071,.15065,.15059,.15053,
		.15046,.15038,.1503,.15022,
		.15013,.15003,.14993,.14982,.1497,
		.14957,.14943,.14929,.14914,
		.14897,.1488,.14862,.14842,.14822,
		.148,.14776,.14752,.14725,
		.14698,.14669,.14639,.14607,.14574,
		.14539,.14502,.14462,.1442,
		.14376,.14329,.14279,.14227,.14171,
		.14111,.14048,.13981,.13905,
		.13825,.13739,.13648,.13551,.13449,
		.13341,.13227,.13106,.1298,
		.12839,.12692,.12538,.1238,.12216,
		.12048,.11876,.117,.11523,
		.11343,.1115,.10955,.10758,.10559,
		.10358,.10154,.09948,.09738,
		.09526,.0931,.0907,.08825,.08576,
		.08324,.08068,.07808,.07545,
		.07278,.07008,.06735,.0642,.06102,
		.05782,.05463,.05145,.0483,
		.04518,.04212,.03912,.0362,.02979,
		.02391,.01859,.01386,.00977,
		.00635,.00362,.00163,4.1e-4,0. };
	
	/**
	*  Fill in the psi vector for a 67 series airfoil.
	*
	*  @param phi  An array filled in by phep().
	*  @param psi  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phps(double[] phi, double[] psi) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		spline(251, philds, psilds, bb, cc, dd);
		for (int i=0; i < 201; ++i) {
			psi[i] = seval(251, phi[i], philds, psilds, bb, cc, dd); 
		}
	}
	
	/**
	*  Simple method to test this class.
	**/
	public static void main(String[] args) {
	
		DecimalFormat nf = (DecimalFormat)NumberFormat.getInstance();
		nf.setMaximumFractionDigits(5);
		nf.setMinimumFractionDigits(5);
		
		System.out.println("Start NACA67Series...");
		
		System.out.println("Creating a NACA 67-212 airfoil...");
		Airfoil af = new NACA67Series(0.2, 0.12, 1);
		
		System.out.println("Airfoil = " + af.toString());
		
		//	Output the upper surface of the airfoil.
		List<Point2D> upper = af.getUpper();
		List<Double> ypArr = af.getUpperYp();
		System.out.println("upper.size() = " + upper.size() + ", ypArr.size() = " + ypArr.size());
		
		System.out.println("        X    \t    Y    \t    dy/dx");
		int length = upper.size();
		for (int i=0; i < length; ++i) {
			Point2D o = upper.get(i);
			System.out.println("    " + nf.format(o.getX()) + "\t" + nf.format(o.getY()) +
									"\t" + nf.format(ypArr.get(i)));
		}
		
		System.out.println("# ordinates = " + length);
		System.out.println("Done!");
	}
}


