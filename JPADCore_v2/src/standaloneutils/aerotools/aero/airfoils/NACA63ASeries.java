/*
*   NACA63ASeries -- An arbitrary NACA 63A series airfoil.
*
*   Copyright (C) 2010-2012, by Joseph A. Huwaldt
*   All rights reserved.
*   
*   This library is free software; you can redistribute it and/or
*   modify it under the terms of the GNU Lesser General Public
*   License as published by the Free Software Foundation; either
*   version 2.1 of the License, or (at your option) any later version.
*   
*   This library is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*   Lesser General Public License for more details.
*
*   You should have received a copy of the GNU Lesser General Public License
*   along with this program; if not, write to the Free Software
*   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*   Or visit:  http://www.gnu.org/licenses/lgpl.html
**/
package standaloneutils.aerotools.aero.airfoils;

import java.util.List;
import java.awt.geom.Point2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;


/**
*  <p> This class represents an arbitrary NACA 63A series
*      airfoil section such as a NACA 63A020 airfoil.
*  </p>
*
*  <p> Ported from FORTRAN "NACA6.FOR" to Java by:
*                Joseph A. Huwaldt, June 4, 2010     </p>
*
*  <p> Original FORTRAN "NACA4" code had the following note:  </p>
*
*  <pre>
*         AUTHORS - Charles L.Ladson and Cuyler W. Brooks, NASA Langley
*                   Liam Hardy, NASA Ames
*                   Ralph Carmichael, Public Domain Aeronautical Software
*         Last FORTRAN version:  23Nov96  2.0   RLC
*
*         NOTES - This program has also been known as LADSON and SIXSERIES and
*                 as SIXSERIE on systems with a 8-letter name limit.
*         REFERENCES-  NASA Technical Memorandum TM X-3069 (September, 1974),
*                      by Charles L. Ladson and Cuyler W. Brooks, Jr., NASA Langley Research Center.
*
*                      "Theory of Wing Sections", by Ira Abbott and Albert Von Doenhoff.
*  </pre>
*
*  <p>  Modified by:  Joseph A. Huwaldt  </p>
*
*  @author  Joseph A. Huwaldt   Date:  June 6, 2010
*  @version September 15, 2012
**/
public class NACA63ASeries extends NACA6ASeries {
	
	//-----------------------------------------------------------------------------------
	
	/**
	*  Create a NACA 63A series airfoil with the specified parameters.
	*
	*  @param  CLi        Design lift coefficient (e.g.: 63A206 has CLi = 0.2).
	*  @param  thickness  The thickness to chord ratio (e.g.: 0.20 ==> 20% t/c).
	*  @param  length     The chord length.
	**/
	public NACA63ASeries(double CLi, double thickness, double length) {
		super(CLi, thickness, length);
	}
	
	/**
	*  Returns a String that represents the profile type of this airfoil.
	**/
    @Override
	public String getProfile() {
		return "63A";
	}
	
	//	Phi & eps vectors for 63A series airfoil.
    private static final double[] philde = {
		0.,.01459,.02917,
		.04376,.05835,.07294,.08754,.10213,
		.11673,.13133,.14594,.14925,
		.15256,.15587,.15919,.1625,.16581,
		.16912,.17244,.17575,.17907,
		.1842,.18933,.19447,.1996,.20474,
		.20988,.21501,.22015,.22529,
		.23043,.24002,.2496,.25918,.26877,
		.27835,.28793,.29751,.30709,
		.31667,.32626,.33981,.35335,.36691,
		.38046,.39401,.40756,.42111,
		.43466,.44821,.46176,.47241,.48306,
		.49371,.50436,.51501,.52566,
		.53631,.54696,.55761,.56826,.57741,
		.58655,.5957,.60485,.61399,
		.62314,.63229,.64143,.65058,.65973,
		.67542,.69111,.7068,.72249,
		.73818,.75386,.76955,.78524,.80093,
		.81662,.83032,.84402,.85772,
		.87143,.88513,.89883,.91253,.92623,
		.93993,.95363,.96612,.9786,
		.99109,1.00358,1.01607,1.02856,
		1.04104,1.05353,1.06602,1.0785,
		1.09023,1.10196,1.11369,1.12541,
		1.13714,1.14887,1.1606,1.17232,
		1.18405,1.19577,1.20699,1.21821,
		1.22942,1.24064,1.25186,1.26307,
		1.27429,1.28551,1.29672,1.30794,
		1.31876,1.32958,1.34041,1.35123,
		1.36205,1.37288,1.3837,1.39453,
		1.40535,1.41617,1.42675,1.43732,
		1.44789,1.45847,1.46904,1.47961,
		1.49019,1.50076,1.51133,1.52191,
		1.53232,1.54273,1.55315,1.56356,
		1.57397,1.58439,1.5948,1.60522,
		1.61563,1.62605,1.63637,1.64669,
		1.65701,1.66733,1.67765,1.68797,
		1.69829,1.70862,1.71894,1.72926,
		1.73961,1.74996,1.76031,1.77066,
		1.78101,1.79136,1.80171,1.81206,
		1.82241,1.83276,1.84322,1.85368,
		1.86414,1.87461,1.88507,1.89553,1.906,
		1.91646,1.92692,1.93738,1.94807,
		1.95875,1.96943,1.98011,1.9908,
		2.00148,2.01216,2.02284,2.03353,
		2.04421,2.05529,2.06637,2.07745,
		2.08853,2.09961,2.11068,2.12176,
		2.13284,2.14392,2.155,2.16671,2.17842,
		2.19013,2.20184,2.21355,2.22526,
		2.23697,2.24868,2.26038,2.27209,
		2.28483,2.29758,2.31032,2.32306,
		2.3358,2.34855,2.36129,2.37403,
		2.38677,2.39951,2.41402,2.42853,
		2.44304,2.45755,2.47205,2.48656,
		2.50106,2.51556,2.53005,2.54455,
		2.56243,2.58031,2.59819,2.61606,
		2.63393,2.6518,2.66966,2.68753,
		2.70539,2.72325,2.76507,2.8069,
		2.84873,2.89056,2.9324,2.97423,
		3.01607,3.05791,3.09975,3.14159 };
		
    private static final double[] epslde = {
		0.,.00138,.00276,
		.00413,.00548,.00683,.00815,.00945,
		.01072,.01196,.01317,.01344,
		.0137,.01396,.01421,.01445,.01469,
		.0149,.0151,.01529,.01546,
		.01568,.01585,.01599,.0161,.01617,
		.01623,.01628,.01631,.01635,
		.01638,.01647,.01657,.0167,.01684,
		.01698,.01713,.01728,.01741,
		.01754,.01764,.01775,.01781,.01785,
		.01787,.01787,.01788,.01788,
		.01791,.01796,.01804,.01814,.01826,
		.01841,.01857,.01875,.01895,
		.01917,.01939,.01963,.01987,.02009,
		.02031,.02053,.02075,.02098,
		.02121,.02144,.02168,.02192,.02216,
		.02257,.02299,.02342,.02385,
		.02429,.02475,.02521,.02569,.02618,
		.02669,.02715,.02762,.0281,
		.02859,.02909,.0296,.03011,.03063,
		.03115,.03168,.03216,.03265,
		.03314,.03363,.03412,.03462,.03513,
		.03564,.03616,.03669,.03719,
		.03769,.03821,.03873,.03925,.03979,
		.04033,.04087,.04143,.04198,
		.04253,.04307,.04362,.04418,.04473,
		.04528,.04584,.04639,.04694,
		.04749,.04801,.04853,.04904,.04955,
		.05005,.05056,.05106,.05155,
		.05205,.05254,.05302,.0535,.05398,
		.05445,.05492,.05538,.05585,
		.0563,.05676,.05721,.05764,.05807,
		.0585,.05892,.05933,.05973,
		.06012,.0605,.06088,.06124,.06158,
		.06192,.06224,.06255,.06286,
		.06315,.06344,.06372,.06399,.06425,
		.06451,.06476,.065,.06523,
		.06546,.06567,.06588,.06608,.06626,
		.06643,.0666,.06675,.06689,
		.06702,.06714,.06724,.06733,.0674,
		.06746,.06751,.06754,.06755,
		.06756,.06754,.06752,.06748,.06742,
		.06736,.06728,.06718,.06707,
		.06695,.06681,.06667,.0665,.06632,
		.06613,.06593,.06571,.06548,
		.06522,.06494,.06464,.06434,.06401,
		.06367,.06332,.06295,.06257,
		.06217,.06173,.06126,.06078,.06029,
		.05979,.05927,.05875,.05821,
		.05767,.05712,.05648,.05583,.05517,
		.05448,.05376,.053,.05222,
		.05138,.0505,.04957,.04834,.04703,
		.04565,.04421,.04273,.0412,
		.03965,.03807,.03649,.03491,.03125,
		.02764,.02408,.02056,.01708,
		.01363,.0102,.00679,.00339,0. };
	
	/**
	*  Fill in phi, eps vectors for 63A series airfoil.
	*
	*  @param phi  An existing array with 201 elements to be filled in
	*              by this method.
	*  @param eps  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phep(double[] phi, double[] eps) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		
		spline(251,philde,epslde,bb,cc,dd);
		for (int i=0; i < 201; ++i) {
			phi[i] = i*Math.PI/200.;
			eps[i] = seval(251,phi[i],philde,epslde,bb,cc,dd);
		}
	}
	
	
	//	Phi & eps vectors for 63A series airfoil.
    private static final double[] philds = {
		0.,.01461,.02922,
		.04383,.05843,.07303,.08763,.10222,
		.1168,.13138,.14594,.14925,
		.15257,.15588,.15919,.1625,.16582,
		.16913,.17244,.17576,.17907,
		.1842,.18933,.19447,.1996,.20474,
		.20987,.21501,.22015,.22529,
		.23043,.24001,.24958,.25916,.26875,
		.27833,.28791,.2975,.30708,
		.31667,.32626,.3398,.35335,.3669,
		.38045,.39401,.40756,.42111,
		.43466,.44821,.46176,.47241,.48306,
		.49371,.50436,.51501,.52566,
		.53631,.54696,.55761,.56826,.57741,
		.58655,.5957,.60485,.61399,
		.62314,.63229,.64143,.65058,.65973,
		.67541,.6911,.70679,.72248,
		.73817,.75386,.76955,.78524,.80093,
		.81662,.83032,.84402,.85772,
		.87142,.88512,.89882,.91253,.92623,
		.93993,.95363,.96612,.9786,
		.99109,1.00358,1.01607,1.02855,
		1.04104,1.05353,1.06602,1.0785,
		1.09023,1.10196,1.11369,1.12541,
		1.13714,1.14887,1.16059,1.17232,
		1.18405,1.19577,1.20699,1.21821,
		1.22943,1.24064,1.25186,1.26308,
		1.27429,1.28551,1.29672,1.30794,
		1.31876,1.32959,1.34041,1.35124,
		1.36206,1.37289,1.38371,1.39453,
		1.40535,1.41617,1.42675,1.43733,
		1.4479,1.45847,1.46905,1.47962,
		1.49019,1.50077,1.51134,1.52191,
		1.53232,1.54274,1.55316,1.56357,
		1.57399,1.5844,1.59481,1.60523,
		1.61564,1.62605,1.63637,1.6467,
		1.65702,1.66734,1.67766,1.68798,
		1.6983,1.70862,1.71894,1.72926,
		1.73961,1.74996,1.76031,1.77067,
		1.78101,1.79136,1.80171,1.81206,
		1.82241,1.83276,1.84322,1.85369,
		1.86415,1.87461,1.88508,1.89554,1.906,
		1.91646,1.92692,1.93738,1.94807,
		1.95875,1.96943,1.98012,1.9908,
		2.00148,2.01216,2.02284,2.03353,
		2.04421,2.05529,2.06637,2.07744,
		2.08852,2.0996,2.11068,2.12176,
		2.13284,2.14392,2.155,2.16671,2.17841,
		2.19012,2.20183,2.21354,2.22525,
		2.23696,2.24867,2.26038,2.27209,
		2.28483,2.29757,2.31031,2.32305,
		2.33579,2.34854,2.36128,2.37402,
		2.38676,2.39951,2.41401,2.42851,
		2.44302,2.45752,2.47203,2.48653,
		2.50103,2.51554,2.53004,2.54455,
		2.56241,2.58028,2.59814,2.61601,
		2.63388,2.65175,2.66962,2.6875,
		2.70537,2.72325,2.76503,2.80682,
		2.84864,2.89046,2.9323,2.97414,3.016,
		3.05786,3.09973,3.14159 };
		
    private static final double[] psilds = {
		.15517,.15507,.15478,
		.15431,.15368,.1529,.15199,
		.15097,.14984,.14863,.14735,.14705,
		.14675,.14645,.14615,.14585,
		.14555,.14525,.14496,.14468,.1444,
		.14397,.14357,.14318,.14281,
		.14245,.1421,.14177,.14145,.14115,
		.14086,.14035,.13987,.13944,
		.13904,.13867,.13833,.13802,.13773,
		.13746,.13722,.1369,.13662,
		.13637,.13614,.13594,.13577,.13562,
		.13548,.13537,.13527,.1352,
		.13514,.13509,.13504,.135,.13496,
		.13492,.13489,.13486,.13483,
		.13481,.13478,.13476,.13474,.13471,
		.13469,.13467,.13464,.13462,
		.1346,.13456,.13452,.13447,.13442,
		.13438,.13432,.13427,.1342,
		.13414,.13406,.134,.13392,.13384,
		.13376,.13367,.13357,.13347,
		.13336,.13324,.13312,.13299,.13287,
		.13274,.1326,.13245,.1323,
		.13214,.13197,.1318,.13162,.13145,
		.13127,.13108,.13089,.13068,
		.13047,.13024,.13001,.12976,.1295,
		.12923,.12896,.12867,.12837,
		.12806,.12774,.12741,.12706,.1267,
		.12634,.12597,.1256,.12521,
		.12481,.1244,.12398,.12355,.1231,
		.12264,.12217,.1217,.12121,
		.12072,.12021,.11969,.11916,.11862,
		.11807,.1175,.11693,.11636,
		.11577,.11518,.11458,.11397,.11335,
		.11272,.11208,.11143,.11078,
		.11012,.10945,.10878,.1081,.10741,
		.10671,.10601,.1053,.10458,
		.10385,.10312,.10238,.10164,.10089,
		.10013,.09936,.0986,.09782,
		.09704,.09625,.09545,.09465,.09384,
		.09302,.0922,.09137,.09054,
		.08971,.08887,.08802,.08716,.08629,
		.08541,.08454,.08366,.08278,
		.08189,.081,.08012,.07923,.0783,
		.07738,.07646,.07553,.07461,
		.07369,.07278,.07186,.07095,.07005,
		.0691,.06815,.06721,.06628,
		.06535,.06443,.06351,.06259,.06168,
		.06078,.0598,.05882,.05785,
		.05688,.05593,.05497,.05403,.05309,
		.05216,.05123,.05019,.04916,
		.04813,.04711,.04608,.04506,.04403,
		.04299,.04195,.0409,.03958,
		.03826,.03694,.03563,.03435,.03311,
		.03191,.03077,.0297,.02871,
		.02675,.02524,.02412,.02333,.02282,
		.02253,.0224,.02238,.02241,
		.02243 };
	
	/**
	*  Fill in the psi vector for a 63A series airfoil.
	*
	*  @param phi  An array filled in by phep().
	*  @param psi  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phps(double[] phi, double[] psi) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		spline(251, philds, psilds, bb, cc, dd);
		for (int i=0; i < 201; ++i) {
			psi[i] = seval(251, phi[i], philds, psilds, bb, cc, dd); 
		}
	}
	
	/**
	*  Simple method to test this class.
	**/
	public static void main(String[] args) {
	
		DecimalFormat nf = (DecimalFormat)NumberFormat.getInstance();
		nf.setMaximumFractionDigits(5);
		nf.setMinimumFractionDigits(5);
		
		System.out.println("Start NACA63ASeries...");
		
		System.out.println("Creating a NACA 63A206 airfoil...");
		Airfoil af = new NACA63ASeries(0.2, 0.06, 1);
		
		System.out.println("Airfoil = " + af.toString());
		
		//	Output the upper surface of the airfoil.
		List<Point2D> upper = af.getUpper();
		List<Double> ypArr = af.getUpperYp();
		System.out.println("upper.size() = " + upper.size() + ", ypArr.size() = " + ypArr.size());
		
		System.out.println("        X    \t    Y    \t    dy/dx");
		int length = upper.size();
		for (int i=0; i < length; ++i) {
			Point2D o = upper.get(i);
			System.out.println("    " + nf.format(o.getX()) + "\t" + nf.format(o.getY()) +
									"\t" + nf.format(ypArr.get(i)));
		}
		
		System.out.println("# ordinates = " + length);
		System.out.println("Done!");
	}
}


