/*
*   NACA64ASeries -- An arbitrary NACA 64A series airfoil.
*
*   Copyright (C) 2010-2012 by Joseph A. Huwaldt
*   All rights reserved.
*   
*   This library is free software; you can redistribute it and/or
*   modify it under the terms of the GNU Lesser General Public
*   License as published by the Free Software Foundation; either
*   version 2.1 of the License, or (at your option) any later version.
*   
*   This library is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*   Lesser General Public License for more details.
*
*   You should have received a copy of the GNU Lesser General Public License
*   along with this program; if not, write to the Free Software
*   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*   Or visit:  http://www.gnu.org/licenses/lgpl.html
**/
package standaloneutils.aerotools.aero.airfoils;

import java.util.List;
import java.awt.geom.Point2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;


/**
*  <p> This class represents an arbitrary NACA 64A series
*      airfoil section such as a NACA 64A020 airfoil.
*  </p>
*
*  <p> Ported from FORTRAN "NACA6.FOR" to Java by:
*                Joseph A. Huwaldt, June 4, 2010     </p>
*
*  <p> Original FORTRAN "NACA4" code had the following note:  </p>
*
*  <pre>
*         AUTHORS - Charles L.Ladson and Cuyler W. Brooks, NASA Langley
*                   Liam Hardy, NASA Ames
*                   Ralph Carmichael, Public Domain Aeronautical Software
*         Last FORTRAN version:  23Nov96  2.0   RLC
*
*         NOTES - This program has also been known as LADSON and SIXSERIES and
*                 as SIXSERIE on systems with a 8-letter name limit.
*         REFERENCES-  NASA Technical Memorandum TM X-3069 (September, 1974),
*                      by Charles L. Ladson and Cuyler W. Brooks, Jr., NASA Langley Research Center.
*
*                      "Theory of Wing Sections", by Ira Abbott and Albert Von Doenhoff.
*  </pre>
*
*  <p>  Modified by:  Joseph A. Huwaldt  </p>
*
*  @author  Joseph A. Huwaldt   Date:  June 6, 2010
*  @version September 15, 2012
**/
public class NACA64ASeries extends NACA6ASeries {
	
	//-----------------------------------------------------------------------------------
	
	/**
	*  Create a NACA 64A series airfoil with the specified parameters.
	*
	*  @param  CLi        Design lift coefficient (e.g.: 64A206 has CLi = 0.2).
	*  @param  thickness  The thickness to chord ratio (e.g.: 0.20 ==> 20% t/c).
	*  @param  length     The chord length.
	**/
	public NACA64ASeries(double CLi, double thickness, double length) {
		super(CLi, thickness, length);
	}
	
	/**
	*  Returns a String that represents the profile type of this airfoil.
	**/
    @Override
	public String getProfile() {
		return "64A";
	}
	
	//	Phi & eps vectors for 64A series airfoil.
    private static final double[] philde = {
		0.,.01468,.02936,
		.04403,.05872,.0734,.08808,.10277,
		.11746,.13216,.14686,.15019,
		.15352,.15685,.16018,.16351,.16684,
		.17017,.1735,.17684,.18017,
		.18528,.19039,.19551,.20062,.20574,
		.21086,.21598,.22109,.22621,
		.23133,.2409,.25046,.26003,.26959,
		.27915,.28871,.29827,.30783,
		.31739,.32695,.3404,.35384,.36728,
		.38072,.39417,.40761,.42105,
		.4345,.44794,.46139,.47194,.48249,
		.49304,.50359,.51414,.52469,
		.53523,.54578,.55633,.56688,.57595,
		.58502,.5941,.60317,.61224,
		.62131,.63038,.63945,.64852,.65759,
		.67317,.68874,.70432,.71989,
		.73546,.75104,.76661,.78218,.79776,
		.81333,.82695,.84057,.85419,
		.86781,.88142,.89504,.90866,.92228,
		.93589,.94951,.96194,.97437,
		.98679,.99922,1.01165,1.02407,1.0365,
		1.04892,1.06135,1.07377,1.08546,
		1.09714,1.10882,1.1205,1.13219,
		1.14387,1.15555,1.16723,1.17891,
		1.19059,1.2018,1.21301,1.22423,
		1.23544,1.24665,1.25786,1.26907,
		1.28028,1.29149,1.3027,1.31357,
		1.32444,1.33531,1.34618,1.35705,
		1.36792,1.37878,1.38965,1.40052,
		1.41139,1.42204,1.43268,1.44333,
		1.45397,1.46462,1.47527,1.48591,
		1.49656,1.50721,1.51785,1.52834,
		1.53883,1.54932,1.5598,1.57029,
		1.58078,1.59127,1.60176,1.61225,
		1.62274,1.63312,1.64349,1.65387,
		1.66425,1.67463,1.68501,1.69539,
		1.70577,1.71615,1.72653,1.73692,
		1.74732,1.75771,1.76811,1.77851,
		1.7889,1.7993,1.8097,1.82009,1.83049,
		1.841,1.8515,1.86201,1.87252,
		1.88303,1.89354,1.90405,1.91455,
		1.92506,1.93557,1.9463,1.95704,
		1.96777,1.9785,1.98923,1.99996,
		2.01069,2.02142,2.03215,2.04288,
		2.05401,2.06514,2.07627,2.0874,
		2.09853,2.10965,2.12078,2.13191,
		2.14304,2.15416,2.16592,2.17767,
		2.18943,2.20118,2.21293,2.22469,
		2.23644,2.24819,2.25994,2.27169,
		2.28447,2.29725,2.31002,2.32279,
		2.33557,2.34834,2.36111,2.37389,
		2.38666,2.39943,2.41397,2.4285,
		2.44304,2.45757,2.4721,2.48663,
		2.50115,2.51568,2.5302,2.54471,
		2.56262,2.58052,2.59842,2.61631,
		2.6342,2.65209,2.66997,2.68785,
		2.70573,2.72362,2.76541,2.8072,
		2.84899,2.89079,2.93259,2.97439,
		3.01619,3.05799,3.09979,3.14159 };
		
    private static final double[] epslde = {
		0.,.00149,.00297,
		.00445,.00591,.00736,.00878,.01018,
		.01156,.0129,.0142,.01449,
		.01477,.01505,.01532,.01558,.01583,
		.01606,.01628,.01648,.01667,
		.0169,.01709,.01724,.01736,.01745,
		.01752,.01758,.01762,.01767,
		.01772,.01782,.01796,.01811,.01828,
		.01845,.01861,.01877,.01891,
		.01903,.01912,.01919,.0192,.01916,
		.01908,.01897,.01886,.01874,
		.01862,.01854,.01848,.01846,.01847,
		.01851,.01856,.01864,.01873,
		.01883,.01895,.01907,.01921,.01933,
		.01945,.01958,.01972,.01985,
		.01999,.02013,.02028,.02043,.02058,
		.02084,.02111,.02139,.02169,
		.02199,.02231,.02264,.02299,.02335,
		.02373,.02408,.02444,.02482,
		.0252,.0256,.02601,.02643,.02685,
		.02728,.02772,.02812,.02852,
		.02893,.02935,.02977,.0302,.03064,
		.03108,.03153,.03198,.03242,
		.03286,.03332,.03378,.03425,.03472,
		.03521,.03571,.03622,.03674,
		.03724,.03776,.03828,.03882,.03936,
		.0399,.04045,.041,.04156,.04212,
		.04266,.0432,.04375,.04429,
		.04484,.04539,.04594,.04649,.04704,
		.0476,.04814,.04869,.04923,
		.04978,.05032,.05087,.05141,.05194,
		.05248,.05301,.05352,.05403,
		.05454,.05504,.05552,.056,.05647,
		.05693,.05738,.05781,.05822,
		.05862,.05901,.05939,.05976,.06011,
		.06045,.06079,.06111,.06143,
		.06174,.06204,.06233,.06262,.06289,
		.06316,.06341,.06365,.06389,
		.06411,.06432,.06452,.06471,.06489,
		.06505,.0652,.06534,.06546,
		.06557,.06567,.06575,.06582,.06587,
		.06591,.06594,.06595,.06594,
		.06593,.0659,.06586,.0658,.06573,
		.06565,.06555,.06544,.06531,
		.06517,.06502,.06485,.06466,.06445,
		.06422,.06398,.06371,.06344,
		.06314,.06283,.06251,.06216,.0618,
		.0614,.06097,.06053,.06007,
		.0596,.05912,.05862,.05811,.0576,
		.05707,.05646,.05584,.0552,
		.05454,.05384,.05312,.05235,.05154,
		.05068,.04977,.04856,.04728,
		.04592,.04451,.04304,.04154,.04,
		.03844,.03687,.0353,.03165,
		.02804,.02446,.02091,.01739,.01389,
		.0104,.00693,.00346,0. };
	
	/**
	*  Fill in phi, eps vectors for 64A series airfoil.
	*
	*  @param phi  An existing array with 201 elements to be filled in
	*              by this method.
	*  @param eps  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phep(double[] phi, double[] eps) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		
		spline(251,philde,epslde,bb,cc,dd);
		for (int i=0; i < 201; ++i) {
			phi[i] = i*Math.PI/200.;
			eps[i] = seval(251,phi[i],philde,epslde,bb,cc,dd);
		}
	}
	
	
	//	Phi & eps vectors for 64A series airfoil.
    private static final double[] philds = {
		0.,.0147,.0294,
		.0441,.0588,.07349,.08818,.10286,
		.11753,.1322,.14686,.15019,
		.15352,.15685,.16019,.16352,.16685,
		.17018,.17351,.17684,.18017,
		.18528,.1904,.19551,.20063,.20574,
		.21086,.21598,.22109,.22621,
		.23133,.24088,.25044,.26,.26956,
		.27912,.28869,.29825,.30782,
		.31739,.32695,.34039,.35384,.36728,
		.38072,.39416,.40761,.42105,
		.4345,.44794,.46139,.47194,.48249,
		.49303,.50358,.51413,.52468,
		.53523,.54578,.55633,.56688,.57595,
		.58502,.59409,.60317,.61224,
		.62131,.63038,.63945,.64852,.65759,
		.67316,.68874,.70431,.71989,
		.73546,.75103,.76661,.78218,.79776,
		.81333,.82695,.84057,.85418,
		.8678,.88142,.89504,.90866,.92228,
		.93589,.94951,.96194,.97436,
		.98679,.99922,1.01164,1.02407,1.0365,
		1.04892,1.06135,1.07377,1.08546,
		1.09714,1.10882,1.1205,1.13218,
		1.14386,1.15554,1.16723,1.17891,
		1.19059,1.2018,1.21301,1.22422,
		1.23543,1.24665,1.25786,1.26907,
		1.28028,1.29149,1.3027,1.31357,
		1.32444,1.33531,1.34618,1.35705,
		1.36792,1.37879,1.38966,1.40052,
		1.41139,1.42204,1.43269,1.44334,
		1.45398,1.46463,1.47528,1.48592,
		1.49657,1.50721,1.51785,1.52835,
		1.53884,1.54933,1.55982,1.5703,
		1.58079,1.59128,1.60177,1.61225,
		1.62274,1.63312,1.6435,1.65388,
		1.66426,1.67464,1.68502,1.6954,
		1.70578,1.71615,1.72653,1.73693,
		1.74732,1.75772,1.76812,1.77851,
		1.78891,1.79931,1.8097,1.82009,
		1.83049,1.841,1.85151,1.86202,1.87253,
		1.88304,1.89354,1.90405,1.91456,
		1.92507,1.93557,1.94631,1.95704,
		1.96777,1.9785,1.98923,1.99996,
		2.01069,2.02142,2.03215,2.04288,
		2.05401,2.06514,2.07627,2.0874,
		2.09852,2.10965,2.12078,2.13191,
		2.14304,2.15416,2.16592,2.17767,
		2.18942,2.20117,2.21293,2.22468,
		2.23643,2.24819,2.25994,2.27169,
		2.28447,2.29724,2.31001,2.32278,
		2.33556,2.34833,2.36111,2.37388,
		2.38666,2.39943,2.41396,2.42849,
		2.44302,2.45754,2.47207,2.4866,
		2.50113,2.51566,2.53019,2.54471,
		2.5626,2.58049,2.59837,2.61626,
		2.63415,2.65203,2.66993,2.68782,
		2.70572,2.72362,2.76535,2.80711,
		2.84888,2.89067,2.93247,2.97428,
		3.0161,3.05793,3.09976,3.14159 };
		
    private static final double[] psilds = {
		.15365,.15355,.15324,
		.15275,.15209,.15129,.15035,
		.1493,.14816,.14693,.14565,.14535,
		.14505,.14475,.14444,.14414,
		.14384,.14353,.14323,.14293,.14263,
		.14218,.14174,.1413,.14087,
		.14044,.14003,.13963,.13924,.13886,
		.13849,.13783,.13722,.13665,
		.13612,.13562,.13516,.13473,.13432,
		.13395,.13359,.13313,.13271,
		.13233,.13199,.13167,.13139,.13113,
		.1309,.13069,.13051,.13037,
		.13024,.13013,.13003,.12993,.12985,
		.12977,.12971,.12966,.12961,
		.12958,.12955,.12953,.12952,.12951,
		.1295,.12949,.12949,.12949,
		.12949,.12948,.12947,.12947,.12946,
		.12945,.12944,.12943,.12942,
		.12941,.1294,.12939,.12939,.12938,
		.12937,.12936,.12934,.12932,
		.1293,.12927,.12923,.1292,.12915,
		.1291,.12905,.12899,.12892,
		.12885,.12878,.12869,.12861,.12852,
		.12843,.12833,.12822,.12811,
		.128,.12788,.12775,.12761,.12747,
		.12733,.12718,.12702,.12685,
		.12668,.1265,.12631,.12611,.1259,
		.12569,.12547,.12524,.125,
		.12475,.12448,.1242,.1239,.12358,
		.12325,.12289,.12252,.12212,
		.12171,.12128,.12083,.12036,.11988,
		.11938,.11887,.11834,.11781,
		.11727,.11672,.11615,.11557,.11499,
		.11439,.11378,.11316,.11253,
		.11189,.11125,.11059,.10993,.10925,
		.10857,.10788,.10719,.10648,
		.10577,.10505,.10433,.1036,.10286,
		.10212,.10137,.10061,.09985,
		.09908,.09831,.09752,.09672,.09592,
		.09512,.09431,.09349,.09267,
		.09184,.09101,.09017,.08931,.08845,
		.08758,.0867,.08583,.08495,
		.08406,.08318,.08229,.0814,.08048,
		.07955,.07863,.0777,.07678,
		.07585,.07493,.07401,.07309,.07217,
		.0712,.07023,.06927,.06831,
		.06735,.06639,.06545,.0645,.06356,
		.06262,.06161,.0606,.0596,
		.05861,.05762,.05664,.05567,.0547,
		.05375,.05279,.05172,.05066,
		.0496,.04855,.04749,.04644,.04538,
		.04432,.04324,.04216,.04081,
		.03945,.03809,.03675,.03543,.03414,
		.03291,.03173,.03061,.02958,
		.02751,.02589,.02465,.02374,.02312,
		.02273,.02252,.02243,.02242,
		.02243 };
	
	/**
	*  Fill in the psi vector for a 64A series airfoil.
	*
	*  @param phi  An array filled in by phep().
	*  @param psi  An existing array with 201 elements to be filled in
	*              by this method.
	**/
    @Override
	protected final void phps(double[] phi, double[] psi) {
		double[] bb = new double[251];
		double[] cc = new double[251];
		double[] dd = new double[251];
		spline(251, philds, psilds, bb, cc, dd);
		for (int i=0; i < 201; ++i) {
			psi[i] = seval(251, phi[i], philds, psilds, bb, cc, dd); 
		}
	}
	
	/**
	*  Simple method to test this class.
	**/
	public static void main(String[] args) {
	
		DecimalFormat nf = (DecimalFormat)NumberFormat.getInstance();
		nf.setMaximumFractionDigits(5);
		nf.setMinimumFractionDigits(5);
		
		System.out.println("Start NACA64ASeries...");
		
		System.out.println("Creating a NACA 64A206 airfoil...");
		Airfoil af = new NACA64ASeries(0.2, 0.06, 1);
		
		System.out.println("Airfoil = " + af.toString());
		
		//	Output the upper surface of the airfoil.
		List<Point2D> upper = af.getUpper();
		List<Double> ypArr = af.getUpperYp();
		System.out.println("upper.size() = " + upper.size() + ", ypArr.size() = " + ypArr.size());
		
		System.out.println("        X    \t    Y    \t    dy/dx");
		int length = upper.size();
		for (int i=0; i < length; ++i) {
			Point2D o = upper.get(i);
			System.out.println("    " + nf.format(o.getX()) + "\t" + nf.format(o.getY()) +
									"\t" + nf.format(ypArr.get(i)));
		}
		
		System.out.println("# ordinates = " + length);
		System.out.println("Done!");
	}
}


