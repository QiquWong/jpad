package standaloneutils.launchers;

import java.io.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class can be used to execute a system command from a Java application.
 * See the documentation for the public methods of this class for more
 * information.
 * 
 * See this URL:
 * 
 * http://devdaily.com/java/java-processbuilder-process-system-exec
 *
 * 2010 alvin j. alexander, devdaily.com.
 * 
 * 
 */
public class SystemCommandExecutor {
	
	private ProcessBuilder processBuilder;
	Map<String, String> environment = new HashMap<String, String>();
	private List<String> commandInformation;
	private String adminPassword;
	private ThreadedStreamHandler inputStreamHandler;
	private ThreadedStreamHandler errorStreamHandler;

	/**
	 * Pass in the system command you want to run as a List of Strings, as shown here:
	 * 
	 * List<String> commands = new ArrayList<String>();
	 * commands.add("/sbin/ping");
	 * commands.add("-c");
	 * commands.add("5");
	 * commands.add("www.google.com");
	 * SystemCommandExecutor commandExecutor = new SystemCommandExecutor(commands);
	 * commandExecutor.executeCommand();
	 * 
	 * @param commandInformation The command you want to run.
	 */
	public SystemCommandExecutor(final List<String> cmdInfo) {
		if (cmdInfo==null) throw new NullPointerException("SystemCommandExecutor :: The commandInformation is required.");
		this.commandInformation = cmdInfo;
		this.adminPassword = null;
		// Create the process builder at object construction time
		processBuilder = new ProcessBuilder(commandInformation);
		environment = processBuilder.environment();
	}

	public void setEnvironmentVariable(String varName, String value) {
		if (environment != null) {
			environment.put(varName, value);
		}
	}
	
	public int executeCommand() throws IOException, InterruptedException {
		
		int exitValue = -99;

		try {
			
			Process process = processBuilder.start();

			// you need this if you're going to write something to the command's input stream
			// (such as when invoking the 'sudo' command, and it prompts you for a password).
			OutputStream stdOutput = process.getOutputStream();

			// i'm currently doing these on a separate line here in case i need to set them to null
			// to get the threads to stop.
			// see http://java.sun.com/j2se/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html
			InputStream inputStream = process.getInputStream();
			InputStream errorStream = process.getErrorStream();

			// these need to run as java threads to get the standard output and error from the command.
			// the inputstream handler gets a reference to our stdOutput in case we need to write
			// something to it, such as with the sudo command
			inputStreamHandler = new ThreadedStreamHandler(inputStream, stdOutput, adminPassword);
			errorStreamHandler = new ThreadedStreamHandler(errorStream);

			// TODO the inputStreamHandler has a nasty side-effect of hanging if the given password is wrong; fix it
			inputStreamHandler.start();
			errorStreamHandler.start();

			// TODO a better way to do this?
			exitValue = process.waitFor();

			// TODO a better way to do this?
			inputStreamHandler.interrupt();
			errorStreamHandler.interrupt();
			inputStreamHandler.join();
			errorStreamHandler.join();
		}
		catch (IOException e) {
			// TODO deal with this here, or just throw it?
			throw e;
		}
		catch (InterruptedException e) {
			// generated by process.waitFor() call
			// TODO deal with this here, or just throw it?
			throw e;
		}
		finally {
			//return exitValue;
		}
		return exitValue;
	}

	Map<String, String> getEnvironment() {
		if (processBuilder != null)
			return processBuilder.environment();
		else
			return null;
	}
	
	/**
	 * Get the standard output (stdout) from the command you just exec'd.
	 */
	public StringBuilder getStandardOutputFromCommand() {
		return inputStreamHandler.getOutputBuffer();
	}

	/**
	 * Get the standard error (stderr) from the command you just exec'd.
	 */
	public StringBuilder getStandardErrorFromCommand() {
		return errorStreamHandler.getOutputBuffer();
	}

	public ProcessBuilder getProcessBuilder() {
		return processBuilder;
	}
}







