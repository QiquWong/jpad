/*
 *
 * Gradle script by Agostino De Marco
 *
 * http://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-dependency-management/
 *
 
 * https://docs.gradle.org/current/userguide/multi_project_builds.html
 
 
  gradle -q pre_config
  gradle -q :JPADUtils:pre_config

 */

 buildscript {
	repositories { mavenCentral() }
	dependencies { classpath group: 'commons-io', name: 'commons-io', version: '1.3.2' }
}
// shadow plugin: https://github.com/johnrengelman/shadow
plugins {
  id 'java' // or 'groovy' Must be explicitly applied
  id 'com.github.johnrengelman.shadow' version '1.2.2'
}
/* // https://github.com/danthegoodman/gradle-capsule-plugin
plugins {
  id "us.kirchmeier.capsule" version "1.0-rc1"
}
*/

apply plugin: 'application'
apply plugin: 'java'

compileJava.enabled = false // DON'T WANT TO COMPILE


//-----------------------------------------------------------------------------
// Absolute paths to directories

/*
// also
project.ext.set("<variableName>", <assignment>)
*/

ext {
	jpadDir = project.projectDir.getAbsolutePath()
	jpadLibraryDir = project.projectDir.getAbsolutePath() + File.separator + "${JPAD_LIBRARY_DIR}"
	occjavaDir = project.jpadLibraryDir + File.separator + "occjava" + File.separator + "Win64"
	hdfDir = project.jpadLibraryDir + File.separator + "hdf"
	
	execEnvironmentVariables = ['MMGT_OPT': '0','occjavaDir': project.occjavaDir,'Path': project.occjavaDir + ";" + project.hdfDir]
	// NOTE: 'MMGT_OPT' and 'occjavaDir' are required by OpenCascade
	// 	     'Path' is set to point to DLL/LIB files needed by natively compiled libraries
	//       Add paths to this as required when extending the project
	
	// DLL/LIB
	// dllFileTree = fileTree("$project.jpadLibraryDir").include('**/*.dll')
	// libFileTree = fileTree("$project.jpadLibraryDir").include('**/*.lib')
	//-------
	// look after each native dependency
	dllHdfFileTree = fileTree("$project.hdfDir").include('*.dll')
	libHdfFileTree = fileTree("$project.hdfDir").include('*.lib')
	jarHdfFileTree = fileTree("$project.hdfDir").include('*.jar')
	dllOccJavaFileTree = fileTree("$project.occjavaDir").include('*.dll')
	libOccJavaFileTree = fileTree("$project.occjavaDir").include('*.lib')
	jarOccJavaFileTree = fileTree("$project.occjavaDir").include('*.jar')
	
	JARS_FROM_JPADAircraft_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADAircraft = files()
	
	JARS_FROM_JPADCad_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADCad = files()
	
	JARS_FROM_JPADCalculators_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADCalculators = files()
	
	JARS_FROM_JPADConfigs_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADConfigs = files()
	
	JARS_FROM_JPADDatabases_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADDatabases = files()
	
	JARS_FROM_JPADDatabasesIO_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADDatabasesIO = files()
	
	JARS_FROM_JPADUtils_ECLIPSE_CLASSPATH = new ArrayList<String>() // empty List<String>
	jars_JPADUtils = files()
	
	// NOTE: add variables as required when extending the project
	//       JARS_FROM_JPAD<name>_ECLIPSE_CLASSPATH
	//       jars_JPAD<name>

}

//-----------------------------------------------------------------------------
// Managing multiple projects

allprojects {
    task pre_configure << {

		// injection
		task -> println "[:pre_configure (allprojects)] $task.project.name" 
		
		println "----------------------------------------------------------"
		println "[DIRECTORIES]"
		println "jpadLibraryDir = " + project.jpadLibraryDir
		println "occjavaDir     = " + project.occjavaDir
		println "hdfDir         = " + project.hdfDir
		println "execEnvironmentVariables = " + project.execEnvironmentVariables
		println "----------------------------------------------------------"
		println "[DLL and LIB]"
		libOccJavaFileTree.visit { FileVisitDetails fileDetails -> 
			if (fileDetails.directory) {
				// do nothing
			} else { // it's a file
				// TODO: keep out of the list 'tigl' files
				println fileDetails.file.path 
			}
		}
		libHdfFileTree.visit { FileVisitDetails fileDetails -> 
			if (fileDetails.directory) {
				// do nothing
			} else { // it's a file
				// TODO: keep out of the list 'tigl' files
				println fileDetails.file.path 
			}
		}
		println "----------------------------------------------------------"
		
		// Collect JARs of every single subproject (in subdirs)
		jars_JPADAircraft    = get_JARS_from_Eclipse_Classpath("JPADAircraft")
		jars_JPADCad         = get_JARS_from_Eclipse_Classpath("JPADCad")
		jars_JPADCalculators = get_JARS_from_Eclipse_Classpath("JPADCalculators")
		jars_JPADConfigs     = get_JARS_from_Eclipse_Classpath("JPADConfigs")
		jars_JPADDatabases   = get_JARS_from_Eclipse_Classpath("JPADDatabases")
		jars_JPADDatabasesIO = get_JARS_from_Eclipse_Classpath("JPADDatabasesIO")
		jars_JPADUtils       = get_JARS_from_Eclipse_Classpath("JPADUtils")

		println "----------------------------------------------------------"

		// jars_JPADAircraft.collect { relativePath(it) }.sort().each { println it } // print FileCollection
		// println "JARS_FROM_JPADUtils_ECLIPSE_CLASSPATH = " + project.JARS_FROM_JPADUtils_ECLIPSE_CLASSPATH // print List<String>
		
		//jars_JPADUtils.collect { relativePath(it) }.sort().each { println it } // print FileCollection
		println "JPADUtils dependencies:"
		jars_JPADUtils.collect { it.getName() }.sort().each { println it } // print FileCollection
		println "----------------------------------------------------------"

	}
}

// evaluationDependsOn(':JPADConfigs', ':JPADUtils', ':JPADDatabases', ':JPADCalculators', ':JPADDatabasesIO')

/*
// specific task in subproject
project(':JPADUtils').pre_configure << {
    println "- I'm the utility-related project."
}
*/
/*
// specific task in subproject from main project
configure(subprojects.findAll {it.name == 'JPADDatabasesIO'}) {
    pre_configure << {println '\n\n\n\n- this configures JPADDatabasesIO.\n\n\n'}
}
*/

//-----------------------------------------------------------------------------
// Get dependencies from .classpath file generated by Eclipse 
// in a generic subdir
// 
// http://www.javaworld.com/article/2073128/slurping-xml-with-groovy.html
// http://groovy.codehaus.org/Strings+and+GString

FileCollection get_JARS_from_Eclipse_Classpath(String subdir) {

	println "[get_JARS_from_Eclipse_Classpath] --> " + subdir
	// println "subdir absolute--> " + project.projectDir.getAbsolutePath() + File.separator + subdir + File.separator
	def classpathFullPath = project.projectDir.getAbsolutePath() + File.separator + subdir + File.separator + '.classpath'
	// def classpathNode = new XmlSlurper().parse(subdir + File.separator + '.classpath')
	def classpathNode = new XmlSlurper().parse(classpathFullPath)
	
	def myTextFileFullPath = project.projectDir.getAbsolutePath() + File.separator + subdir + File.separator + 'jar_files.txt'	
	File myTextFile = new File(myTextFileFullPath)
	// File myTextFile = new File(project.projectDir.getAbsolutePath() + File.separator + subdir + File.separator + 'jar_files.txt')
	BufferedWriter myWriter = myTextFile.newWriter()
	
	FileCollection fileList = files()
	
	classpathNode.classpathentry.each { 
		if (it.@kind.text().equals("var")) {
			
			String entryPath = it.@path.text()
			
			if (entryPath.indexOf('LIBRARY_FOLDER/') != -1) {
				entryPath =  project.jpadLibraryDir + "/" + entryPath.replaceAll( 'LIBRARY_FOLDER/', '' )
			}
			
			if (entryPath.indexOf('ECLIPSE_FOLDER/') != -1) {
				entryPath = "${ECLIPSE_FOLDER}" + "/" + entryPath.replaceAll( 'ECLIPSE_FOLDER/', '' )
			}
			
			if (entryPath.indexOf('JAVA_JDK/') != -1) {
				entryPath = "${JDK_HOME}" + "/" + entryPath.replaceAll( 'JAVA_JDK/', '' )
			}

			// normalize path separators
			entryPath = org.apache.commons.io.FilenameUtils.separatorsToSystem(entryPath) // needs commons-io

			fileList = fileList + files(entryPath)
			
			// println "kind=${it.@kind} -- path=${it.@path}"
			//println "kind=${it.@kind} -- path=" + entryPath
			
			myWriter.writeLine(entryPath)
			
			switch (subdir) {
				case "JPADAircraft":
					JARS_FROM_JPADAircraft_ECLIPSE_CLASSPATH.add(entryPath)
					break
				case "JPADCad":
					JARS_FROM_JPADCad_ECLIPSE_CLASSPATH.add(entryPath)
					break
				case "JPADCalculators":
					JARS_FROM_JPADCalculators_ECLIPSE_CLASSPATH.add(entryPath)
					break
				case "JPADConfigs":
					JARS_FROM_JPADConfigs_ECLIPSE_CLASSPATH.add(entryPath)
					break
				case "JPADDatabases":
					JARS_FROM_JPADDatabases_ECLIPSE_CLASSPATH.add(entryPath)
					break
				case "JPADDatabasesIO":
					JARS_FROM_JPADDatabasesIO_ECLIPSE_CLASSPATH.add(entryPath)
					break
				case "JPADUtils":
					JARS_FROM_JPADUtils_ECLIPSE_CLASSPATH.add(entryPath)
					break
				default :
					break
			}    
		}
	}
	myWriter.close()
	return fileList
}