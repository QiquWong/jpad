/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  #include <SWIG_CGAL/Java/exception.h>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#if !defined(SWIGPYTHON) && !defined(SWIGJAVA)
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 1
#else
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 0
#endif  


  #define CGAL_INTERSECTION_VERSION 1
  #include  <SWIG_CGAL/Kernel/typedefs.h>
  #include  <SWIG_CGAL/Kernel/Point_3.h>
  #include  <SWIG_CGAL/Kernel/Triangle_3.h>
  #include  <SWIG_CGAL/Kernel/Segment_3.h>
  #include  <SWIG_CGAL/Polyhedron_3/all_includes.h>
  #include  <SWIG_CGAL/AABB_tree/all_includes.h>
  #include  <SWIG_CGAL/AABB_tree/Object.h>

typedef SWIG_Polyhedron_3::CGAL_Facet_handle<Polyhedron_3_>  Polyhedron_3_Facet_handle_SWIG_wrapper; 
typedef SWIG_Polyhedron_3::CGAL_Halfedge_handle<Polyhedron_3_>  Polyhedron_3_Halfedge_handle_SWIG_wrapper; 

#include <stdexcept>


#include <utility>

 typedef std::pair<Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper >  Point_and_Polyhedron_3_Facet_handle_SWIG_wrapper; 
 typedef std::pair<Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper >  Point_and_Polyhedron_3_Halfedge_handle_SWIG_wrapper; 
 typedef std::pair<Point_3,int >  Point_and_Integer_SWIG_wrapper; 
 typedef std::pair<Object,Polyhedron_3_Facet_handle_SWIG_wrapper >  Object_and_Polyhedron_3_Facet_handle_SWIG_wrapper; 
 typedef std::pair<Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper >  Object_and_Polyhedron_3_Halfedge_handle_SWIG_wrapper; 
 typedef std::pair<Object,int >  Object_and_Integer_SWIG_wrapper; 
 typedef Optional<Polyhedron_3_Halfedge_handle_SWIG_wrapper >  Optional_Polyhedron_3_Halfedge_handle_SWIG_wrapper; 
 typedef Optional<Polyhedron_3_Facet_handle_SWIG_wrapper >  Optional_Polyhedron_3_Facet_handle_SWIG_wrapper; 
 typedef Optional< int >  Optional_Integer_SWIG_wrapper; 
 typedef Optional< std::pair<Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > >  Optional_Object_and_Polyhedron_3_Halfedge_handle_SWIG_wrapper; 
 typedef Optional< std::pair<Object,Polyhedron_3_Facet_handle_SWIG_wrapper > >  Optional_Object_and_Polyhedron_3_Facet_handle_SWIG_wrapper; 
 typedef Optional< std::pair<Object,int > >  Optional_Object_and_Integer_SWIG_wrapper; 
 typedef std::pair<Object,Polyhedron_3_Facet_handle_SWIG_wrapper > Object_and_Polyhedron_3_Facet_handle; 
 typedef std::pair<Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > Object_and_Polyhedron_3_Halfedge_handle; 
 typedef std::pair<Object,int > Object_and_Integer; 
 typedef AABB_tree_wrapper<CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper >  AABB_tree_Polyhedron_3_Facet_handle_SWIG_wrapper; 
 typedef AABB_tree_wrapper<CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper >  AABB_tree_Polyhedron_3_Halfedge_handle_SWIG_wrapper; 
 typedef AABB_tree_wrapper<CGAL_SSP_Tree,Segment_3,int >  AABB_tree_Segment_3_soup_SWIG_wrapper; 
 typedef AABB_tree_wrapper<CGAL_TSP_Tree,Triangle_3,int >  AABB_tree_Triangle_3_soup_SWIG_wrapper; 

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Object *)new Object();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Point_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Point_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Point_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Point_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Point_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Point_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Point_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Point_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Triangle_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Triangle_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Triangle_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Triangle_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Triangle_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_2 **)&jresult = new Triangle_2((const Triangle_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Triangle_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Triangle_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Triangle_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Triangle_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Triangle_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_3 **)&jresult = new Triangle_3((const Triangle_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Segment_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Segment_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Segment_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Segment_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Segment_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_3 **)&jresult = new Segment_3((const Segment_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Segment_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Segment_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Segment_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Segment_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Line_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Line_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Line_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Line_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Line_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = new Line_3((const Line_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Line_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Line_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Line_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Line_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = new Line_2((const Line_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Plane_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Plane_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Plane_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Plane_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Plane_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = new Plane_3((const Plane_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Ray_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Ray_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Ray_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Ray_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Ray_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = new Ray_2((const Ray_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1is_1Ray_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Ray_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1get_1Ray_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Ray_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Ray_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = new Ray_3((const Ray_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Polyhedron_13_1Facet_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Polyhedron_13_1Facet_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > arg2 ;
  Point_3 *argp1 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *argp2 ;
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try{
      result = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Polyhedron_13_1Facet_1handle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = 0 ;
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper >((std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Facet_1handle_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = (Point_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Facet_1handle_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  result = (Point_3 *)& ((arg1)->first);
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Facet_1handle_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *arg2 = (SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Facet_1handle_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  result = (SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *)& ((arg1)->second);
  *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Point_1and_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > arg2 ;
  Point_3 *argp1 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *argp2 ;
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try{
      result = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = 0 ;
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper >((std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Halfedge_1handle_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = (Point_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Halfedge_1handle_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  result = (Point_3 *)& ((arg1)->first);
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Halfedge_1handle_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *arg2 = (SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Polyhedron_13_1Halfedge_1handle_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  result = (SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *)& ((arg1)->second);
  *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Point_1and_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Point_3,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Integer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Point_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Point_3,int > *)new std::pair< Point_3,int >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Integer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  int arg2 ;
  Point_3 *argp1 ;
  std::pair< Point_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (std::pair< Point_3,int > *)new std::pair< Point_3,int >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Point_1and_1Integer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,int > *arg1 = 0 ;
  std::pair< Point_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Point_3,int > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Point_3,int > *)new std::pair< Point_3,int >((std::pair< Point_3,int > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Integer_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_3,int > *arg1 = (std::pair< Point_3,int > *) 0 ;
  Point_3 *arg2 = (Point_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Integer_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,int > *arg1 = (std::pair< Point_3,int > *) 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,int > **)&jarg1; 
  result = (Point_3 *)& ((arg1)->first);
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Integer_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< Point_3,int > *arg1 = (std::pair< Point_3,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Point_1and_1Integer_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< Point_3,int > *arg1 = (std::pair< Point_3,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Point_1and_1Integer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Point_3,int > *arg1 = (std::pair< Point_3,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Point_3,int > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Polyhedron_13_1Facet_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Polyhedron_13_1Facet_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Object arg1 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > arg2 ;
  Object *argp1 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *argp2 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Object **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Object");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Polyhedron_13_1Facet_1handle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = 0 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper >((std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Facet_1handle_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Object **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Facet_1handle_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  result = (Object *)& ((arg1)->first);
  *(Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Facet_1handle_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *arg2 = (SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Facet_1handle_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  result = (SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *)& ((arg1)->second);
  *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Object_1and_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Object arg1 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > arg2 ;
  Object *argp1 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *argp2 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Object **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Object");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = 0 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper >((std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Halfedge_1handle_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Object **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Halfedge_1handle_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  result = (Object *)& ((arg1)->first);
  *(Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Halfedge_1handle_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *arg2 = (SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Polyhedron_13_1Halfedge_1handle_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  result = (SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *)& ((arg1)->second);
  *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Object_1and_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Integer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Object,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Object,int > *)new std::pair< Object,int >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Integer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Object arg1 ;
  int arg2 ;
  Object *argp1 ;
  std::pair< Object,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Object **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Object");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (std::pair< Object,int > *)new std::pair< Object,int >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Object_1and_1Integer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,int > *arg1 = 0 ;
  std::pair< Object,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Object,int > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Object,int > *)new std::pair< Object,int >((std::pair< Object,int > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Integer_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Object,int > *arg1 = (std::pair< Object,int > *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Object,int > **)&jarg1; 
  arg2 = *(Object **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Integer_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Object,int > *arg1 = (std::pair< Object,int > *) 0 ;
  Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,int > **)&jarg1; 
  result = (Object *)& ((arg1)->first);
  *(Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Integer_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< Object,int > *arg1 = (std::pair< Object,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Object_1and_1Integer_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< Object,int > *arg1 = (std::pair< Object,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Object,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Object_1and_1Integer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Object,int > *arg1 = (std::pair< Object,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Object,int > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Optional_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Halfedge_1handle_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (bool)((Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > const *)arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Halfedge_1handle_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > *) &((Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > const *)arg1)->value();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Halfedge_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = ((Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self **)&jresult = new Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self((const Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Halfedge_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Optional< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Optional_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optional< Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Optional_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *)new Optional< Polyhedron_3_Facet_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Facet_1handle_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (bool)((Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > const *)arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Facet_1handle_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > *) &((Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > const *)arg1)->value();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Facet_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = ((Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self **)&jresult = new Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self((const Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Polyhedron_13_1Facet_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Optional< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Optional_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optional< Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Optional_1Integer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optional< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Optional< int > *)new Optional< int >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Integer_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Optional< int > *arg1 = (Optional< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< int > **)&jarg1; 
  {
    try{
      result = (bool)((Optional< int > const *)arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Integer_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Optional< int > *arg1 = (Optional< int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< int > **)&jarg1; 
  {
    try{
      result = (int *) &((Optional< int > const *)arg1)->value();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Integer_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< int > *arg1 = (Optional< int > *) 0 ;
  Optional< int >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< int > **)&jarg1; 
  {
    try{
      result = ((Optional< int > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< int >::Self **)&jresult = new Optional< int >::Self((const Optional< int >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Integer_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Optional< int > *arg1 = (Optional< int > *) 0 ;
  Optional< int >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Optional< int > **)&jarg1; 
  arg2 = *(Optional< int >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Optional< int >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Optional< int >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Optional_1Integer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optional< int > *arg1 = (Optional< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optional< int > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Optional_1Object_1and_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *)new Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      result = (bool)((Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > const *)arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *) 0 ;
  std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) &((Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > const *)arg1)->value();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *) 0 ;
  Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      result = ((Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self **)&jresult = new Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self((const Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Halfedge_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *) 0 ;
  Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > **)&jarg1; 
  arg2 = *(Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Optional_1Object_1and_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Optional_1Object_1and_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *)new Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Facet_1handle_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      result = (bool)((Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > const *)arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Facet_1handle_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *) 0 ;
  std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      result = (std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > *) &((Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > const *)arg1)->value();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Facet_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *) 0 ;
  Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      result = ((Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self **)&jresult = new Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self((const Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Polyhedron_13_1Facet_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *) 0 ;
  Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > **)&jarg1; 
  arg2 = *(Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Optional< std::pair< Object,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Optional_1Object_1and_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *arg1 = (Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optional< std::pair< Object,Polyhedron_3_Facet_handle_SWIG_wrapper > > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1Optional_1Object_1and_1Integer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Optional< std::pair< Object,int > > *)new Optional< std::pair< Object,int > >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< std::pair< Object,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Integer_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Optional< std::pair< Object,int > > *arg1 = (Optional< std::pair< Object,int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,int > > **)&jarg1; 
  {
    try{
      result = (bool)((Optional< std::pair< Object,int > > const *)arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Integer_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,int > > *arg1 = (Optional< std::pair< Object,int > > *) 0 ;
  std::pair< Object,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,int > > **)&jarg1; 
  {
    try{
      result = (std::pair< Object,int > *) &((Optional< std::pair< Object,int > > const *)arg1)->value();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Object,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Integer_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Optional< std::pair< Object,int > > *arg1 = (Optional< std::pair< Object,int > > *) 0 ;
  Optional< std::pair< Object,int > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Optional< std::pair< Object,int > > **)&jarg1; 
  {
    try{
      result = ((Optional< std::pair< Object,int > > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Optional< std::pair< Object,int > >::Self **)&jresult = new Optional< std::pair< Object,int > >::Self((const Optional< std::pair< Object,int > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_Optional_1Object_1and_1Integer_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Optional< std::pair< Object,int > > *arg1 = (Optional< std::pair< Object,int > > *) 0 ;
  Optional< std::pair< Object,int > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Optional< std::pair< Object,int > > **)&jarg1; 
  arg2 = *(Optional< std::pair< Object,int > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Optional< std::pair< Object,int > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Optional< std::pair< Object,int > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1Optional_1Object_1and_1Integer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Optional< std::pair< Object,int > > *arg1 = (Optional< std::pair< Object,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Optional< std::pair< Object,int > > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Polyhedron_13_1Facet_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Polyhedron_13_1Facet_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::input > arg1 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    Input_iterator_wrapper<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> it_end;
    Input_iterator_wrapper<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> it_begin(jarg1,"(LCGAL/Polyhedron_3/Polyhedron_3_Facet_handle;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *)new AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper >(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1rebuild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::input > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    Input_iterator_wrapper<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> it_end;
    Input_iterator_wrapper<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> it_begin(jarg2,"(LCGAL/Polyhedron_3/Polyhedron_3_Facet_handle;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->rebuild(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1do_1intersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1do_1intersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1do_1intersect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1do_1intersect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1number_1of_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1number_1of_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1number_1of_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1number_1of_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper ::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper ::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper ::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper ::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersected_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersected_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersected_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersected_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1any_1intersection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Facet_handle,std::pair<CGAL::Object,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Facet_handle,std::pair<CGAL::Object,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Facet_handle,std::pair<CGAL::Object,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1all_1intersections_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Facet_handle,std::pair<CGAL::Object,Polyhedron_3_Facet_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Facet_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1squared_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1and_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1and_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (arg1)->closest_point_and_primitive(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1accelerate_1distance_1queries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->accelerate_distance_queries();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1squared_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1and_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1closest_1point_1and_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id const & reference is null");
    return ;
  } 
  arg4 = *(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_PTP_Tree,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Facet_handle< Polyhedron_3_ > >::Point_and_primitive_id const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Facet_1handle_1accelerate_1distance_1queries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg2,"(LCGAL/Kernel/Point_3;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->accelerate_distance_queries(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1AABB_1tree_1Polyhedron_13_1Facet_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AABB_tree_wrapper< CGAL_PTP_Tree,Polyhedron_3_Facet_handle_SWIG_wrapper,Polyhedron_3_Facet_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::input > arg1 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    Input_iterator_wrapper<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> it_end;
    Input_iterator_wrapper<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> it_begin(jarg1,"(LCGAL/Polyhedron_3/Polyhedron_3_Halfedge_handle;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *)new AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper >(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1rebuild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::input > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    Input_iterator_wrapper<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> it_end;
    Input_iterator_wrapper<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> it_begin(jarg2,"(LCGAL/Polyhedron_3/Polyhedron_3_Halfedge_handle;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->rebuild(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1do_1intersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1do_1intersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1do_1intersect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1do_1intersect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1number_1of_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1number_1of_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1number_1of_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1number_1of_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base>(jarg3,"LCGAL/Polyhedron_3/Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersected_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersected_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersected_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersected_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1any_1intersection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Halfedge_handle,std::pair<CGAL::Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Halfedge_handle,std::pair<CGAL::Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Halfedge_handle,std::pair<CGAL::Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1all_1intersections_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Polyhedron_3_Halfedge_handle,std::pair<CGAL::Object,Polyhedron_3_Halfedge_handle_SWIG_wrapper::cpp_base> >(jarg3,"LCGAL/AABB_tree/Object_and_Polyhedron_3_Halfedge_handle;") );
  }
  {
    try{
      (arg1)->all_intersections((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1squared_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1and_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1and_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (arg1)->closest_point_and_primitive(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1accelerate_1distance_1queries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->accelerate_distance_queries();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1squared_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1and_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1closest_1point_1and_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id const & reference is null");
    return ;
  } 
  arg4 = *(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_PSP_Tree,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ >,SWIG_Polyhedron_3::CGAL_Halfedge_handle< Polyhedron_3_ > >::Point_and_primitive_id const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Polyhedron_13_1Halfedge_1handle_1accelerate_1distance_1queries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg2,"(LCGAL/Kernel/Point_3;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->accelerate_distance_queries(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1AABB_1tree_1Polyhedron_13_1Halfedge_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *arg1 = (AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AABB_tree_wrapper< CGAL_PSP_Tree,Polyhedron_3_Halfedge_handle_SWIG_wrapper,Polyhedron_3_Halfedge_handle_SWIG_wrapper > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Segment_13_1soup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *)new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Segment_13_1soup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< Segment_3 >::input > arg1 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    Input_iterator_wrapper<Segment_3,Segment_3::cpp_base> it_end;
    Input_iterator_wrapper<Segment_3,Segment_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Segment_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *)new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1insert_1from_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  boost::shared_ptr< std::vector< Segment_3::cpp_base > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    boost::shared_ptr< std::vector<Segment_3::cpp_base> > res(new std::vector<Segment_3::cpp_base>());
    
    const jsize nb_arrays = jenv->GetArrayLength(jarg2);
    res->resize(nb_arrays);
    
    jboolean is_copy;
    
    for (jsize l=0;l<nb_arrays;++l){
      jdoubleArray line = (jdoubleArray) jenv->GetObjectArrayElement(jarg2,l);
      if (jenv->GetArrayLength(line)!=6){
        throw std::runtime_error("Arrays must be of size 6");
      }
      jdouble* points = jenv->GetDoubleArrayElements(line, &is_copy);
      EPIC_Kernel::Point_3 p1(points[0],points[1],points[2]);
      EPIC_Kernel::Point_3 p2(points[3],points[4],points[5]);
      
      (*res)[l]=Segment_3::cpp_base(p1,p2);
      jenv->ReleaseDoubleArrayElements(line, points, JNI_ABORT);
    }
    arg2=res;
  }
  {
    try{
      (arg1)->insert_from_array(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1rebuild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  SwigValueWrapper< Primitive_iterator_helper< Segment_3 >::input > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    Input_iterator_wrapper<Segment_3,Segment_3::cpp_base> it_end;
    Input_iterator_wrapper<Segment_3,Segment_3::cpp_base> it_begin(jarg2,"(LCGAL/Kernel/Segment_3;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->rebuild(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1do_1intersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1do_1intersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1do_1intersect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1do_1intersect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersected_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersected_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersected_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersected_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1any_1intersection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1all_1intersections_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1squared_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (arg1)->closest_point_and_primitive(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1accelerate_1distance_1queries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->accelerate_distance_queries();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1squared_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id const & reference is null");
    return ;
  } 
  arg4 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int >::Point_and_primitive_id const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Segment_13_1soup_1accelerate_1distance_1queries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg2,"(LCGAL/Kernel/Point_3;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->accelerate_distance_queries(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1AABB_1tree_1Segment_13_1soup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *arg1 = (AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AABB_tree_wrapper< CGAL_SSP_Tree,Segment_3,int > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Triangle_13_1soup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *)new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_new_1AABB_1tree_1Triangle_13_1soup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< Triangle_3 >::input > arg1 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    Input_iterator_wrapper<Triangle_3,Triangle_3::cpp_base> it_end;
    Input_iterator_wrapper<Triangle_3,Triangle_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Triangle_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *)new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1insert_1from_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  boost::shared_ptr< std::vector< Triangle_3::cpp_base > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    boost::shared_ptr< std::vector<Triangle_3::cpp_base> > res(new std::vector<Triangle_3::cpp_base>());
    
    const jsize nb_arrays = jenv->GetArrayLength(jarg2);
    res->resize(nb_arrays);
    
    jboolean is_copy;
    
    for (jsize l=0;l<nb_arrays;++l){
      jdoubleArray line = (jdoubleArray) jenv->GetObjectArrayElement(jarg2,l);
      if (jenv->GetArrayLength(line)!=9){
        throw std::runtime_error("Arrays must be of size 9");
      }
      jdouble* points = jenv->GetDoubleArrayElements(line, &is_copy);
      EPIC_Kernel::Point_3 p1(points[0],points[1],points[2]);
      EPIC_Kernel::Point_3 p2(points[3],points[4],points[5]);
      EPIC_Kernel::Point_3 p3(points[6],points[7],points[8]);
      
      (*res)[l]=Triangle_3::cpp_base(p1,p2,p3);
      jenv->ReleaseDoubleArrayElements(line, points, JNI_ABORT);
    }
    arg2=res;
  }
  {
    try{
      (arg1)->insert_from_array(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1rebuild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  SwigValueWrapper< Primitive_iterator_helper< Triangle_3 >::input > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    Input_iterator_wrapper<Triangle_3,Triangle_3::cpp_base> it_end;
    Input_iterator_wrapper<Triangle_3,Triangle_3::cpp_base> it_begin(jarg2,"(LCGAL/Kernel/Triangle_3;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->rebuild(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1do_1intersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1do_1intersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1do_1intersect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1do_1intersect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->do_intersect((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1number_1of_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (int)(arg1)->number_of_intersected_primitives((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersected_1primitives_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersected_1primitives_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersected_1primitives_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersected_1primitives_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<int,int>(jarg3,"Ljava/lang/Integer;") );
  }
  {
    try{
      (arg1)->all_intersected_primitives((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersected_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersected_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersected_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersected_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersected_primitive((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1any_1intersection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->any_intersection((Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Optional_object_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Segment_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Segment_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Triangle_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Triangle_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Plane_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Plane_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1all_1intersections_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Ray_3 *arg2 = 0 ;
  SwigValueWrapper< Primitive_iterator_helper< int >::output2 > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return ;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Object_and_Integer,std::pair<CGAL::Object,int> >(jarg3,"LCGAL/AABB_tree/Object_and_Integer;") );
  }
  {
    try{
      (arg1)->all_intersections((Ray_3 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1squared_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (arg1)->closest_point_and_primitive(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1accelerate_1distance_1queries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->accelerate_distance_queries();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1squared_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)(arg1)->squared_distance((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point((Point_3 const &)*arg2,(Point_3 const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id **)&jresult = new AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id((const AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1closest_1point_1and_1primitive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  Point_3 *arg2 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id *arg3 = 0 ;
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id const & reference is null");
    return ;
  } 
  arg4 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->closest_point_and_primitive((Point_3 const &)*arg2,(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int >::Point_and_primitive_id const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_AABB_1tree_1Triangle_13_1soup_1accelerate_1distance_1queries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg2,"(LCGAL/Kernel/Point_3;)J");
    arg2=std::make_pair(it_begin,it_end);
  }
  {
    try{
      (arg1)->accelerate_distance_queries(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_AABB_1tree_CGAL_1AABB_1treeJNI_delete_1AABB_1tree_1Triangle_13_1soup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *arg1 = (AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AABB_tree_wrapper< CGAL_TSP_Tree,Triangle_3,int > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


#ifdef __cplusplus
}
#endif

