/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  #include <SWIG_CGAL/Java/exception.h>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#if !defined(SWIGPYTHON) && !defined(SWIGJAVA)
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 1
#else
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 0
#endif  


  #include <SWIG_CGAL/Kernel/Point_2.h>
  #include <SWIG_CGAL/Common/Input_iterator_wrapper.h>

  #if !SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE
  typedef std::pair<Input_iterator_wrapper<Point_2,Point_2::cpp_base>,Input_iterator_wrapper<Point_2,Point_2::cpp_base> > Point_range_2;  
  #else
  typedef Generic_input_iterator<Point_2> Point_range_2;
  #endif
  
  #include <SWIG_CGAL/Kernel/Weighted_point_2.h>
  #include <SWIG_CGAL/Kernel/Segment_2.h>
  #include <SWIG_CGAL/Kernel/Triangle_2.h>
  #include <SWIG_CGAL/Kernel/Ray_2.h>
  #include <SWIG_CGAL/Kernel/Direction_2.h>
  #include <SWIG_CGAL/Kernel/Line_2.h>
  #include <SWIG_CGAL/Kernel/Vector_2.h>
  #include <SWIG_CGAL/Kernel/Point_3.h>
  #include <SWIG_CGAL/Kernel/Weighted_point_3.h>
  #include <SWIG_CGAL/Kernel/Plane_3.h>
  #include <SWIG_CGAL/Kernel/Segment_3.h>
  #include <SWIG_CGAL/Kernel/Triangle_3.h>
  #include <SWIG_CGAL/Kernel/Tetrahedron_3.h>
  #include <SWIG_CGAL/Kernel/Line_3.h>
  #include <SWIG_CGAL/Kernel/Sphere_3.h>
  #include <SWIG_CGAL/Kernel/Ray_3.h>
  #include <SWIG_CGAL/Kernel/Direction_3.h>
  #include <SWIG_CGAL/Kernel/Vector_3.h>
  #include <SWIG_CGAL/Kernel/Object.h>
  #include <SWIG_CGAL/Common/global_function_macros.h>
  #include <SWIG_CGAL/Kernel/global_functions.h>
  #include <SWIG_CGAL/Kernel/enum.h>
  #include <SWIG_CGAL/Kernel/Polygon_2.h>
  #include <SWIG_CGAL/Kernel/Origin.h>
  #include <SWIG_CGAL/Kernel/Iso_rectangle_2.h>
  #include <SWIG_CGAL/Kernel/Iso_cuboid_3.h>
  #include <SWIG_CGAL/Kernel/Bbox_2.h>
  #include <SWIG_CGAL/Kernel/Bbox_3.h>
  #include <SWIG_CGAL/Common/Iterator.h>

SWIGINTERN void Polygon_2_insert__SWIG_1(Polygon_2 *self,int i,Point_range_2 range){
    self->get_data().insert(boost::next(self->get_data().vertices_begin(),i),SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range));
  }
SWIGINTERN Polygon_2 *new_Polygon_2__SWIG_1(Point_range_2 range){return new Polygon_2(Polygon_2::cpp_base(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range)));}
SWIGINTERN SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > Polygon_2_vertices(Polygon_2 *self){return SWIG_CGAL_Iterator<Polygon_2::cpp_base::Vertex_iterator,Point_2>(self->get_data().vertices_begin(),self->get_data().vertices_end());}
SWIGINTERN SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > Polygon_2_edges(Polygon_2 *self){return SWIG_CGAL_Iterator<Polygon_2::cpp_base::Edge_const_iterator,Segment_2>(self->get_data().edges_begin(),self->get_data().edges_end());}
SWIGINTERN SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > Polygon_2_vertices_circulator(Polygon_2 *self){return SWIG_CGAL_Circulator<Polygon_2::cpp_base::Vertex_circulator,Point_2>(self->get_data().vertices_circulator());}
SWIGINTERN SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > Polygon_2_edges_circulator(Polygon_2 *self){return SWIG_CGAL_Circulator<Polygon_2::cpp_base::Edge_const_circulator,Segment_2>(self->get_data().edges_circulator());}

const Origin      ORIGIN      = Origin();
const Null_vector NULL_VECTOR = Null_vector();

 #include <SWIG_CGAL/Common/Reference_wrapper.h> 

  #include <CGAL/Polygon_2_algorithms.h>
  Bounded_side bounded_side_2(Point_range_2 range,const Point_2& p){
    return Bounded_side(CGAL::bounded_side_2(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),EPIC_Kernel()));
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Point_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Point_2 *)new Point_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Point_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Origin *arg1 = 0 ;
  Point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Origin **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Origin const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Point_2 *)new Point_2((Origin const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Point_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  Point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Point_2 *)new Point_2(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1; 
  {
    try{
      result = (double)((Point_2 const *)arg1)->x();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1; 
  {
    try{
      result = (double)((Point_2 const *)arg1)->y();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Bbox_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = new Bbox_2((const Bbox_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Point_2 *arg1 = (Point_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  Point_2 *arg1 = (Point_2 *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      (arg1)->set_coordinates(arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1plus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator +(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1minus_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Origin *arg2 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Origin **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Origin const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -((Origin const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Origin *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Origin **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Origin const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->operator ==((Origin const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_2 const *)arg1)->operator <(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1gt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_2 const *)arg1)->operator >(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1le(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_2 const *)arg1)->operator <=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1ge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_2 const *)arg1)->operator >=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1iplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Point_2 *) &(arg1)->operator +=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1iminus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Point_2 *) &(arg1)->operator -=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1; 
  {
    try{
      result = ((Point_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2::Self **)&jresult = new Point_2::Self((const Point_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Point_2 *arg1 = (Point_2 *) 0 ;
  Point_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1; 
  arg2 = *(Point_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Point_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Point_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Point_2 *arg1 = (Point_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Weighted_1point_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Weighted_point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Weighted_point_2 *)new Weighted_point_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Weighted_1point_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  Weighted_point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Weighted_point_2 *)new Weighted_point_2(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Weighted_1point_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  double arg2 ;
  Weighted_point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Weighted_point_2 *)new Weighted_point_2((Point_2 const &)*arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_2 const *)arg1)->weight();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_2 const *)arg1)->x();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_2 const *)arg1)->y();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      result = ((Weighted_point_2 const *)arg1)->point();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  Weighted_point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  arg2 = *(Weighted_point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Weighted_point_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  Weighted_point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  arg2 = *(Weighted_point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Weighted_point_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  Weighted_point_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      result = ((Weighted_point_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_2::Self **)&jresult = new Weighted_point_2::Self((const Weighted_point_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  Weighted_point_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  arg2 = *(Weighted_point_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Weighted_point_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Weighted_1point_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Weighted_point_2 *arg1 = (Weighted_point_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Weighted_point_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Segment_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Segment_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Segment_2 *)new Segment_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Segment_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Segment_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Segment_2 *)new Segment_2((Point_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1source_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->source();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1source_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->source(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1target_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->target();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1target_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->target(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->min();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->min(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1max_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->max();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1max_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->max(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Segment_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->point((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Segment_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1squared_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->squared_length();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Segment_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  SwigValueWrapper< Direction_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = new Direction_2((const Direction_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1to_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->to_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1to_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1supporting_1line_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->supporting_line();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = new Line_2((const Line_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1supporting_1line_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Line_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->supporting_line(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Bbox_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = new Bbox_2((const Bbox_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1is_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_horizontal();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1is_1vertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_vertical();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1collinear_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->collinear_has_on((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Segment_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Segment_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Segment_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      result = ((Segment_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2::Self **)&jresult = new Segment_2::Self((const Segment_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  Segment_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1; 
  arg2 = *(Segment_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Segment_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Segment_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Segment_2 *arg1 = (Segment_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Segment_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Triangle_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Triangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Triangle_2 *)new Triangle_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Triangle_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  Triangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Triangle_2 *)new Triangle_2((Point_2 const &)*arg1,(Point_2 const &)*arg2,(Point_2 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Triangle_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1has_1on_1positive_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_positive_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1has_1on_1negative_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_negative_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1has_1on_1boundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_boundary((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1has_1on_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_bounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1has_1on_1unbounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_unbounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = (Orientation)(arg1)->orientation();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1oriented_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Oriented_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Oriented_side)(arg1)->oriented_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)(arg1)->bounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Triangle_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_2 **)&jresult = new Triangle_2((const Triangle_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Triangle_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->area();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Bbox_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = new Bbox_2((const Bbox_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Triangle_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Triangle_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Triangle_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      result = ((Triangle_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_2::Self **)&jresult = new Triangle_2::Self((const Triangle_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  Triangle_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1; 
  arg2 = *(Triangle_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Triangle_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Triangle_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Triangle_2 *arg1 = (Triangle_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Triangle_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Ray_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_2 *)new Ray_2((Point_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Direction_2 *arg2 = 0 ;
  Ray_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_2 *)new Ray_2((Point_2 const &)*arg1,(Direction_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Vector_2 *arg2 = 0 ;
  Ray_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_2 *)new Ray_2((Point_2 const &)*arg1,(Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  Ray_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_2 *)new Ray_2((Point_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1source_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (arg1)->source();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1source_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->source(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->point((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Ray_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  SwigValueWrapper< Direction_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = new Direction_2((const Direction_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1to_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (arg1)->to_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1to_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1supporting_1line_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (arg1)->supporting_line();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = new Line_2((const Line_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1supporting_1line_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Line_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->supporting_line(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  SwigValueWrapper< Ray_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = new Ray_2((const Ray_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Ray_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1is_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_horizontal();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1is_1vertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_vertical();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1collinear_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->collinear_has_on((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Ray_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Ray_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  SwigValueWrapper< Ray_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      result = ((Ray_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2::Self **)&jresult = new Ray_2::Self((const Ray_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  Ray_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1; 
  arg2 = *(Ray_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Ray_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Ray_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ray_2 *arg1 = (Ray_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ray_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  Direction_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Direction_2 *)new Direction_2(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = 0 ;
  Direction_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_2 *)new Direction_2((Vector_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Direction_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_2 *)new Direction_2((Line_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Direction_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_2 *)new Direction_2((Ray_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_12_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Direction_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_2 *)new Direction_2((Segment_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1delta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->delta((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1dx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->dx();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1dy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->dy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1counterclockwise_1in_1between(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  Direction_2 *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 const & reference is null");
    return 0;
  } 
  arg3 = *(Direction_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->counterclockwise_in_between((Direction_2 const &)*arg2,(Direction_2 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      result = (arg1)->vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_2 const *)arg1)->operator <(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1gt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_2 const *)arg1)->operator >(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1le(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_2 const *)arg1)->operator <=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1ge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_2 const *)arg1)->operator >=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  SwigValueWrapper< Direction_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      result = (arg1)->operator -();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = new Direction_2((const Direction_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->operator -(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  SwigValueWrapper< Direction_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      result = ((Direction_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2::Self **)&jresult = new Direction_2::Self((const Direction_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  Direction_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_2 **)&jarg1; 
  arg2 = *(Direction_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Direction_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Direction_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Direction_2 *arg1 = (Direction_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Direction_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Line_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      result = (Line_2 *)new Line_2(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Line_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_2 *)new Line_2((Point_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Direction_2 *arg2 = 0 ;
  Line_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_2 *)new Line_2((Point_2 const &)*arg1,(Direction_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Vector_2 *arg2 = 0 ;
  Line_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_2 *)new Line_2((Point_2 const &)*arg1,(Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_12_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Line_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_2 *)new Line_2((Segment_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_12_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Line_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_2 *)new Line_2((Ray_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->a();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->b();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->c();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->point((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Line_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1projection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->projection((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1projection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->projection((Point_2 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1x_1at_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->x_at_y((double const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1y_1at_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->y_at_x((double const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1is_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_horizontal();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1is_1vertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_vertical();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1oriented_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Oriented_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Oriented_side)(arg1)->oriented_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1has_1on_1positive_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_positive_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1has_1on_1negative_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_negative_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1to_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (arg1)->to_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1to_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  SwigValueWrapper< Direction_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = new Direction_2((const Direction_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = new Line_2((const Line_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  Line_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1perpendicular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->perpendicular((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = new Line_2((const Line_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1perpendicular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Line_2 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  arg3 = *(Line_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->perpendicular((Point_2 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Line_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Line_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = (Line_2 *) 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      result = ((Line_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2::Self **)&jresult = new Line_2::Self((const Line_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  Line_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1; 
  arg2 = *(Line_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Line_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Line_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Line_2 *arg1 = (Line_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Line_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Vector_2 *)new Vector_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Null_vector *arg1 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Null_vector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Null_vector const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *)new Vector_2((Null_vector const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *)new Vector_2((Point_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *)new Vector_2((Segment_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *)new Vector_2((Ray_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *)new Vector_2((Line_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (Vector_2 *)new Vector_2(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_12_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Vector_2 *)new Vector_2(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->x();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->y();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1cartesian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->cartesian((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->dimension();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  SwigValueWrapper< Direction_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_2 **)&jresult = new Direction_2((const Direction_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Direction_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Direction_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1perpendicular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Orientation *arg2 = 0 ;
  Orientation temp2 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  temp2 = (Orientation)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->perpendicular((Orientation const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1perpendicular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Orientation *arg2 = 0 ;
  Vector_2 *arg3 = 0 ;
  Orientation temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Vector_2 **)&jarg1; 
  temp2 = (Orientation)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Vector_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->perpendicular((Orientation const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1squared_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->squared_length();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1plus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator +((Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -((Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (arg1)->operator -();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1times_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)((Vector_2 const *)arg1)->operator *((Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1times_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double arg2 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = ((Vector_2 const *)arg1)->operator *(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->operator /((double const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Null_vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Null_vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Null_vector const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->operator ==((Null_vector const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Vector_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Vector_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1iplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *) &(arg1)->operator +=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1iminus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2 *arg2 = 0 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_2 *) &(arg1)->operator -=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1itimes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double arg2 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Vector_2 *) &(arg1)->operator *=(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1idiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  double arg2 ;
  Vector_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Vector_2 *) &(arg1)->operator /=(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      result = ((Vector_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2::Self **)&jresult = new Vector_2::Self((const Vector_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  Vector_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1; 
  arg2 = *(Vector_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Vector_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_12_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      (arg1)->normalize();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Vector_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vector_2 *arg1 = (Vector_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vector_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Point_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Point_3 *)new Point_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Point_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Origin *arg1 = 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Origin **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Origin const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Point_3 *)new Point_3((Origin const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Point_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      result = (Point_3 *)new Point_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      result = (double)((Point_3 const *)arg1)->x();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      result = (double)((Point_3 const *)arg1)->y();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      result = (double)((Point_3 const *)arg1)->z();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Point_3 *arg1 = (Point_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  Point_3 *arg1 = (Point_3 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      (arg1)->set_coordinates(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1plus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator +(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1minus_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Origin *arg2 = 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Origin **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Origin const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -((Origin const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Origin *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Origin **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Origin const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->operator ==((Origin const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_3 const *)arg1)->operator <(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1gt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_3 const *)arg1)->operator >(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1le(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_3 const *)arg1)->operator <=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1ge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_3 const *)arg1)->operator >=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Point_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1iplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Point_3 *) &(arg1)->operator +=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1iminus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Point_3 *) &(arg1)->operator -=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      result = ((Point_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3::Self **)&jresult = new Point_3::Self((const Point_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Point_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Point_3 *arg1 = (Point_3 *) 0 ;
  Point_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1; 
  arg2 = *(Point_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Point_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Point_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Point_3 *arg1 = (Point_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Weighted_1point_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Weighted_point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Weighted_point_3 *)new Weighted_point_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Weighted_1point_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Weighted_point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      result = (Weighted_point_3 *)new Weighted_point_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Weighted_1point_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  double arg2 ;
  Weighted_point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Weighted_point_3 *)new Weighted_point_3((Point_3 const &)*arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_3 const *)arg1)->weight();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_3 const *)arg1)->x();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_3 const *)arg1)->y();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = (double)((Weighted_point_3 const *)arg1)->z();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = ((Weighted_point_3 const *)arg1)->point();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  Weighted_point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  arg2 = *(Weighted_point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Weighted_point_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  Weighted_point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  arg2 = *(Weighted_point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Weighted_point_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  Weighted_point_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      result = ((Weighted_point_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Weighted_point_3::Self **)&jresult = new Weighted_point_3::Self((const Weighted_point_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Weighted_1point_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  Weighted_point_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  arg2 = *(Weighted_point_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Weighted_point_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Weighted_1point_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Weighted_point_3 *arg1 = (Weighted_point_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Weighted_point_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Plane_3 *)new Plane_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (Plane_3 *)new Plane_3(arg1,arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Plane_3 *)new Plane_3((Point_3 const &)*arg1,(Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Vector_3 *arg2 = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Plane_3 *)new Plane_3((Point_3 const &)*arg1,(Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Direction_3 *arg2 = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Plane_3 *)new Plane_3((Point_3 const &)*arg1,(Direction_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Plane_3 *)new Plane_3((Line_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Plane_3 *)new Plane_3((Ray_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Plane_13_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Plane_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Plane_3 *)new Plane_3((Segment_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->a();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->b();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->c();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->d();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1projection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->projection((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1projection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->projection((Point_3 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Plane_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = new Plane_3((const Plane_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Plane_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->point();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1orthogonal_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->orthogonal_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1orthogonal_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->orthogonal_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1perpendicular_1line_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Line_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->perpendicular_line((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = new Line_3((const Line_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1perpendicular_1line_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Line_3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Line_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->perpendicular_line((Point_3 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1orthogonal_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->orthogonal_direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = new Direction_3((const Direction_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1orthogonal_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->orthogonal_direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1base1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->base1();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1base1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->base1(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1base2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->base2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1base2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->base2(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1to_12d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->to_2d((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1to_12d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_2d((Point_3 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1to_13d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_2 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->to_3d((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1to_13d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_2 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_3d((Point_2 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1oriented_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Oriented_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Oriented_side)(arg1)->oriented_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1has_1on_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1has_1on_1positive_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_positive_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1has_1on_1negative_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_negative_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1has_1on_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Plane_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Plane_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Plane_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      result = ((Plane_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3::Self **)&jresult = new Plane_3::Self((const Plane_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Plane_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  Plane_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1; 
  arg2 = *(Plane_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Plane_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Plane_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Plane_3 *arg1 = (Plane_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Plane_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Segment_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Segment_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Segment_3 *)new Segment_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Segment_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Segment_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Segment_3 *)new Segment_3((Point_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1source_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->source();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1source_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->source(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1target_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->target();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1target_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->target(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->min();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->min(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1max_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->max();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1max_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->max(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Segment_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->point((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Segment_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1squared_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->squared_length();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Segment_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_3 **)&jresult = new Segment_3((const Segment_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Segment_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1to_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->to_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1to_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = new Direction_3((const Direction_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1supporting_1line_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Line_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->supporting_line();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = new Line_3((const Line_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1supporting_1line_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Line_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->supporting_line(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Segment_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Segment_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Segment_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      result = ((Segment_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_3::Self **)&jresult = new Segment_3::Self((const Segment_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Segment_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  Segment_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1; 
  arg2 = *(Segment_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Segment_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Segment_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Segment_3 *arg1 = (Segment_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Segment_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Line_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Line_3 *)new Line_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Line_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_3 *)new Line_3((Point_3 const &)*arg1,*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Direction_3 *arg2 = 0 ;
  Line_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_3 *)new Line_3((Point_3 const &)*arg1,*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Vector_3 *arg2 = 0 ;
  Line_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_3 *)new Line_3((Point_3 const &)*arg1,*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_13_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Line_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_3 *)new Line_3((Segment_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Line_13_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Line_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Line_3 *)new Line_3((Ray_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1projection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->projection((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1projection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->projection((Point_3 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->point((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Line_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1perpendicular_1plane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Plane_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->perpendicular_plane((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = new Plane_3((const Plane_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1perpendicular_1plane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Plane_3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Plane_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->perpendicular_plane((Point_3 const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Line_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = new Line_3((const Line_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  Line_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1to_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      result = (arg1)->to_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1to_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = new Direction_3((const Direction_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Line_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Line_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = (Line_3 *) 0 ;
  Line_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      result = ((Line_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3::Self **)&jresult = new Line_3::Self((const Line_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Line_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  Line_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1; 
  arg2 = *(Line_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Line_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Line_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Line_3 *arg1 = (Line_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Line_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  double arg2 ;
  Orientation arg3 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (Orientation)jarg3; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3((Point_3 const &)*arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  double arg2 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3((Point_3 const &)*arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  Point_3 arg2 ;
  Point_3 arg3 ;
  Point_3 arg4 ;
  Point_3 *argp1 ;
  Point_3 *argp2 ;
  Point_3 *argp3 ;
  Point_3 *argp4 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(Point_3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Point_3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(Point_3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg4 = *argp4; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3(arg1,arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  Point_3 arg2 ;
  Point_3 arg3 ;
  Orientation arg4 ;
  Point_3 *argp1 ;
  Point_3 *argp2 ;
  Point_3 *argp3 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(Point_3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Point_3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Orientation)jarg4; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3(arg1,arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  Point_3 arg2 ;
  Point_3 arg3 ;
  Point_3 *argp1 ;
  Point_3 *argp2 ;
  Point_3 *argp3 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(Point_3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Point_3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg3 = *argp3; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  Point_3 arg2 ;
  Orientation arg3 ;
  Point_3 *argp1 ;
  Point_3 *argp2 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(Point_3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Orientation)jarg3; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  Point_3 arg2 ;
  Point_3 *argp1 ;
  Point_3 *argp2 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(Point_3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg2 = *argp2; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Sphere_13_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  Point_3 *argp1 ;
  Sphere_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  {
    try{
      result = (Sphere_3 *)new Sphere_3(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1center_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (arg1)->center();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1center_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->center(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1squared_1radius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->squared_radius();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (Orientation)(arg1)->orientation();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1oriented_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Oriented_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Oriented_side)(arg1)->oriented_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)(arg1)->bounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1has_1on_1positive_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_positive_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1has_1on_1negative_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_negative_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1has_1on_1boundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_boundary((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1has_1on_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_bounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1has_1on_1unbounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_unbounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  SwigValueWrapper< Sphere_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3 **)&jresult = new Sphere_3((const Sphere_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Sphere_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Sphere_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Sphere_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Sphere_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Sphere_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Sphere_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Sphere_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Sphere_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Sphere_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Sphere_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Sphere_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  SwigValueWrapper< Sphere_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      result = ((Sphere_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Sphere_3::Self **)&jresult = new Sphere_3::Self((const Sphere_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Sphere_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  Sphere_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Sphere_3 **)&jarg1; 
  arg2 = *(Sphere_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Sphere_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Sphere_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Sphere_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sphere_3 *arg1 = (Sphere_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sphere_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Triangle_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Triangle_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Triangle_3 *)new Triangle_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Triangle_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Triangle_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Triangle_3 *)new Triangle_3((Point_3 const &)*arg1,(Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Triangle_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1supporting_1plane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Plane_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      result = (arg1)->supporting_plane();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = new Plane_3((const Plane_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1squared_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->squared_area();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Triangle_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1; 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Triangle_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Triangle_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      result = ((Triangle_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_3::Self **)&jresult = new Triangle_3::Self((const Triangle_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Triangle_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  Triangle_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1; 
  arg2 = *(Triangle_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Triangle_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Triangle_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Triangle_3 *arg1 = (Triangle_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Triangle_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Ray_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_3 *)new Ray_3((Point_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Direction_3 *arg2 = 0 ;
  Ray_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_3 *)new Ray_3((Point_3 const &)*arg1,(Direction_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Vector_3 *arg2 = 0 ;
  Ray_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_3 *)new Ray_3((Point_3 const &)*arg1,(Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ray_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Ray_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Ray_3 *)new Ray_3((Point_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1source_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (arg1)->source();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1source_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->source(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->point((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Ray_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = new Direction_3((const Direction_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1to_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (arg1)->to_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1to_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->to_vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1supporting_1line_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Line_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (arg1)->supporting_line();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = new Line_3((const Line_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1supporting_1line_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Line_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->supporting_line(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  SwigValueWrapper< Ray_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = new Ray_3((const Ray_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Ray_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1has_1on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Ray_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Ray_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  SwigValueWrapper< Ray_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      result = ((Ray_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3::Self **)&jresult = new Ray_3::Self((const Ray_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ray_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  Ray_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1; 
  arg2 = *(Ray_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Ray_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Ray_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ray_3 *arg1 = (Ray_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ray_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Direction_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      result = (Direction_3 *)new Direction_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = 0 ;
  Direction_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_3 *)new Direction_3((Vector_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Direction_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_3 *)new Direction_3((Line_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Direction_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_3 *)new Direction_3((Ray_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Direction_13_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Direction_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Direction_3 *)new Direction_3((Segment_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1delta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->delta((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1dx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->dx();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1dy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->dy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1dz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->dz();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = (arg1)->vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vector(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Direction_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = (arg1)->operator -();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = new Direction_3((const Direction_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->operator -(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      result = ((Direction_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3::Self **)&jresult = new Direction_3::Self((const Direction_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Direction_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  Direction_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Direction_3 **)&jarg1; 
  arg2 = *(Direction_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Direction_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Direction_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Direction_3 *arg1 = (Direction_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Direction_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Tetrahedron_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tetrahedron_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Tetrahedron_3 *)new Tetrahedron_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Tetrahedron_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Tetrahedron_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  Tetrahedron_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Tetrahedron_3 *)new Tetrahedron_3((Point_3 const &)*arg1,(Point_3 const &)*arg2,(Point_3 const &)*arg3,(Point_3 const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Tetrahedron_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1has_1on_1positive_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_positive_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1has_1on_1negative_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_negative_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1has_1on_1boundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_boundary((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1has_1on_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_bounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1has_1on_1unbounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_unbounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      result = (Orientation)(arg1)->orientation();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1oriented_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Oriented_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Oriented_side)(arg1)->oriented_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)(arg1)->bounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->volume();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Tetrahedron_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Tetrahedron_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tetrahedron_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Tetrahedron_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Tetrahedron_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Tetrahedron_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tetrahedron_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Tetrahedron_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Tetrahedron_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      result = ((Tetrahedron_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Tetrahedron_3::Self **)&jresult = new Tetrahedron_3::Self((const Tetrahedron_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Tetrahedron_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  Tetrahedron_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  arg2 = *(Tetrahedron_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tetrahedron_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Tetrahedron_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Tetrahedron_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tetrahedron_3 *arg1 = (Tetrahedron_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tetrahedron_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Vector_3 *)new Vector_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Null_vector *arg1 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Null_vector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Null_vector const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *)new Vector_3((Null_vector const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *)new Vector_3((Point_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *)new Vector_3((Segment_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *)new Vector_3((Ray_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *)new Vector_3((Line_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try{
      result = (Vector_3 *)new Vector_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Vector_13_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      result = (Vector_3 *)new Vector_3(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->x();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->y();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->z();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1cartesian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->cartesian((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  SwigValueWrapper< Direction_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (arg1)->direction();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Direction_3 **)&jresult = new Direction_3((const Direction_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Direction_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Direction_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Direction_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->direction(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1squared_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->squared_length();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->dimension();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1plus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator +((Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->operator -((Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (arg1)->operator -();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1times_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)((Vector_3 const *)arg1)->operator *((Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1times_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double arg2 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = ((Vector_3 const *)arg1)->operator *(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->operator /((double const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Null_vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Null_vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Null_vector const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->operator ==((Null_vector const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Vector_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Vector_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1iplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *) &(arg1)->operator +=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1iminus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3 *arg2 = 0 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Vector_3 *) &(arg1)->operator -=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1itimes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double arg2 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Vector_3 *) &(arg1)->operator *=(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1idiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double arg2 ;
  Vector_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (Vector_3 *) &(arg1)->operator /=(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      (arg1)->set_coordinates(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      result = ((Vector_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3::Self **)&jresult = new Vector_3::Self((const Vector_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  Vector_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1; 
  arg2 = *(Vector_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Vector_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Vector_13_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      (arg1)->normalize();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Vector_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vector_3 *arg1 = (Vector_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vector_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Bbox_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bbox_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Bbox_2 *)new Bbox_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Bbox_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Bbox_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (Bbox_2 *)new Bbox_2(arg1,arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = (int)((Bbox_2 const *)arg1)->dimension();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1xmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_2 const *)arg1)->xmin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1ymin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_2 const *)arg1)->ymin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1xmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_2 const *)arg1)->xmax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1ymax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_2 const *)arg1)->ymax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (double)((Bbox_2 const *)arg1)->min(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (double)((Bbox_2 const *)arg1)->max(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1plus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  Bbox_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Bbox_2 const *)arg1)->operator +((Bbox_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = new Bbox_2((const Bbox_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1iplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  Bbox_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bbox_2 *) &(arg1)->operator +=((Bbox_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Bbox_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Bbox_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  Bbox_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      result = ((Bbox_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2::Self **)&jresult = new Bbox_2::Self((const Bbox_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  Bbox_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_2 **)&jarg1; 
  arg2 = *(Bbox_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Bbox_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Bbox_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bbox_2 *arg1 = (Bbox_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bbox_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Bbox_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bbox_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Bbox_3 *)new Bbox_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Bbox_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  Bbox_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try{
      result = (Bbox_3 *)new Bbox_3(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (int)((Bbox_3 const *)arg1)->dimension();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1xmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->xmin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1ymin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->ymin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1zmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->zmin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1xmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->xmax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1ymax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->ymax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1zmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->zmax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->min(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (double)((Bbox_3 const *)arg1)->max(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1plus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Bbox_3 const *)arg1)->operator +((Bbox_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1iplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  Bbox_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bbox_3 *) &(arg1)->operator +=((Bbox_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Bbox_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Bbox_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  Bbox_3::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      result = ((Bbox_3 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3::Self **)&jresult = new Bbox_3::Self((const Bbox_3::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Bbox_13_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  Bbox_3::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bbox_3 **)&jarg1; 
  arg2 = *(Bbox_3::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Bbox_3::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Bbox_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bbox_3 *arg1 = (Bbox_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bbox_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Object(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Object *)new Object();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Point_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Point_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Point_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Point_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Point_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Point_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Point_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Point_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Triangle_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Triangle_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Triangle_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Triangle_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Triangle_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_2 **)&jresult = new Triangle_2((const Triangle_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Triangle_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Triangle_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Triangle_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Triangle_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Triangle_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Triangle_3 **)&jresult = new Triangle_3((const Triangle_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Segment_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Segment_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Segment_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Segment_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Segment_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_3 **)&jresult = new Segment_3((const Segment_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Segment_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Segment_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Segment_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Segment_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Line_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Line_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Line_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Line_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Line_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_3 **)&jresult = new Line_3((const Line_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Line_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Line_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Line_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Line_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Line_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Line_2 **)&jresult = new Line_2((const Line_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Plane_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Plane_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Plane_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  Plane_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Plane_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Plane_3 **)&jresult = new Plane_3((const Plane_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Ray_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Ray_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Ray_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Ray_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Ray_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_2 **)&jresult = new Ray_2((const Ray_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1is_1Ray_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_Ray_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1get_1Ray_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Ray_3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (arg1)->get_Ray_3();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Ray_3 **)&jresult = new Ray_3((const Ray_3 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Object_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Object **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Polygon_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Polygon_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Polygon_2 *)new Polygon_2();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Polygon_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int arg2 ;
  Point_2 arg3 ;
  Point_2 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(Point_2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_2");
    return ;
  }
  arg3 = *argp3; 
  {
    try{
      (arg1)->set(arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int arg2 ;
  Point_2 arg3 ;
  Point_2 *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(Point_2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_2");
    return 0;
  }
  arg3 = *argp3; 
  {
    try{
      result = (int)(arg1)->insert(arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->push_back((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1reverse_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      (arg1)->reverse_orientation();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      (arg1)->erase(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try{
      (arg1)->erase(arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1is_1simple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_simple();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1is_1convex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_convex();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (Orientation)(arg1)->orientation();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1oriented_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Oriented_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Oriented_side)(arg1)->oriented_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)(arg1)->bounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->area();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1left_1vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->left_vertex();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1right_1vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->right_vertex();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1top_1vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->top_vertex();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1bottom_1vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->bottom_vertex();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1is_1counterclockwise_1oriented(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_counterclockwise_oriented();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1is_1clockwise_1oriented(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_clockwise_oriented();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1is_1collinear_1oriented(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_collinear_oriented();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1has_1on_1positive_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_positive_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1has_1on_1negative_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_negative_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1has_1on_1boundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_boundary((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1has_1on_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_bounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1has_1on_1unbounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_unbounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Polygon_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1edge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->edge((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1edge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int *arg2 = 0 ;
  Segment_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Polygon_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Segment_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->edge((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1is_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_empty();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Bbox_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = new Bbox_2((const Bbox_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Polygon_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Polygon_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Polygon_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Polygon_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Polygon_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Polygon_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Polygon_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Polygon_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = (arg1)->toString();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Polygon_2::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = ((Polygon_2 const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Polygon_2::Self **)&jresult = new Polygon_2::Self((const Polygon_2::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  Polygon_2::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = *(Polygon_2::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Polygon_2::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Polygon_2::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  int arg2 ;
  Point_range_2 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    Input_iterator_wrapper<Point_2,Point_2::cpp_base> it_end;
    Input_iterator_wrapper<Point_2,Point_2::cpp_base> it_begin(jarg3,"(LCGAL/Kernel/Point_2;)J");
    arg3=std::make_pair(it_begin,it_end);
  }
  {
    try{
      Polygon_2_insert__SWIG_1(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Polygon_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  Point_range_2 arg1 ;
  Polygon_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    Input_iterator_wrapper<Point_2,Point_2::cpp_base> it_end;
    Input_iterator_wrapper<Point_2,Point_2::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_2;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = (Polygon_2 *)new_Polygon_2__SWIG_1(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Polygon_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1vertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = Polygon_2_vertices(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jresult = new SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >((const SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1edges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = Polygon_2_edges(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jresult = new SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >((const SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1vertices_1circulator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = Polygon_2_vertices_circulator(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jresult = new SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >((const SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1edges_1circulator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      result = Polygon_2_edges_circulator(arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jresult = new SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >((const SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Polygon_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Polygon_2 *arg1 = (Polygon_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Polygon_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Plane_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Plane_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Plane_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Plane_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Point_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Segment_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Triangle_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Triangle_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Triangle_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Triangle_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Triangle_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Line_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_147(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_squared_1distance_1_1SWIG_148(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)squared_distance((Ray_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Plane_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Plane_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Plane_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Plane_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Plane_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_3 const &)*arg1,(Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_cuboid_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_cuboid_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_cuboid_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_cuboid_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Point_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Segment_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_147(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_148(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_149(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_150(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Triangle_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_151(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_152(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_153(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_154(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_155(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_156(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Line_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_157(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_158(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_159(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_160(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_161(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_162(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Ray_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_163(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_rectangle_2 const &)*arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_164(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_rectangle_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_165(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_rectangle_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_166(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_rectangle_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_do_1intersect_1_1SWIG_167(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)do_intersect((Iso_rectangle_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Plane_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Plane_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Plane_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Plane_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Plane_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Plane_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Plane_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Plane_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Plane_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Plane_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_3 const &)*arg1,(Plane_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Triangle_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_3 const &)*arg1,(Triangle_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Segment_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_cuboid_3 const &)*arg1,(Segment_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Line_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_cuboid_3 const &)*arg1,(Line_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Ray_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_cuboid_3 const &)*arg1,(Ray_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_cuboid_3 const &)*arg1,(Iso_cuboid_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Segment_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Segment_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Segment_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Triangle_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Line_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Line_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Line_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Triangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Triangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_2 const &)*arg1,(Triangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_147(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_148(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_149(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_150(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ray_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ray_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Ray_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_151(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Segment_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_rectangle_2 const &)*arg1,(Segment_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_152(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Ray_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Ray_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ray_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_rectangle_2 const &)*arg1,(Ray_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_153(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Line_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Line_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Line_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_rectangle_2 const &)*arg1,(Line_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_intersection_1_1SWIG_154(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  Object result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = intersection((Iso_rectangle_2 const &)*arg1,(Iso_rectangle_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Object **)&jresult = new Object((const Object &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)area((Point_2 const &)*arg1,(Point_2 const &)*arg2,(Point_2 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Point_2 const &)*arg1,(Point_2 const &)*arg2,(Point_2 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  Point_2 *arg4 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg4 = *(Point_2 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Point_2 const &)*arg1,(Point_2 const &)*arg2,(Point_2 const &)*arg3,(Point_2 const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_2 *arg1 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Triangle_2 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Point_3 const &)*arg1,(Point_3 const &)*arg2,(Point_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Point_3 const &)*arg1,(Point_3 const &)*arg2,(Point_3 const &)*arg3,(Point_3 const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Triangle_3 *arg1 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Triangle_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Triangle_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Triangle_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_centroid_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tetrahedron_3 *arg1 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tetrahedron_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tetrahedron_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = centroid((Tetrahedron_3 const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_cross_1product(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector_3 *arg1 = 0 ;
  Vector_3 *arg2 = 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = cross_product((Vector_3 const &)*arg1,(Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_determinant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  Vector_3 *arg1 = 0 ;
  Vector_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)determinant((Vector_3 const &)*arg1,(Vector_3 const &)*arg2,(Vector_3 const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_determinant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Vector_2 *arg1 = 0 ;
  Vector_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)determinant((Vector_2 const &)*arg1,(Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Origin_1plus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Origin *arg1 = (Origin *) 0 ;
  Vector_2 *arg2 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Origin **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Origin const *)arg1)->operator +((Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Origin_1minus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Origin *arg1 = (Origin *) 0 ;
  Vector_2 *arg2 = 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Origin **)&jarg1; 
  arg2 = *(Vector_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Origin const *)arg1)->operator -((Vector_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Origin_1plus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Origin *arg1 = (Origin *) 0 ;
  Vector_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Origin **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Origin const *)arg1)->operator +((Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Origin_1minus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Origin *arg1 = (Origin *) 0 ;
  Vector_3 *arg2 = 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Origin **)&jarg1; 
  arg2 = *(Vector_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Origin const *)arg1)->operator -((Vector_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Origin_1minus_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Origin *arg1 = (Origin *) 0 ;
  Point_2 *arg2 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Origin **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Origin const *)arg1)->operator -((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Origin_1minus_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Origin *arg1 = (Origin *) 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Origin **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Origin const *)arg1)->operator -((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_3 **)&jresult = new Vector_3((const Vector_3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Origin(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Origin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Origin *)new Origin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Origin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Origin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Origin *arg1 = (Origin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Origin **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Null_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Null_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Null_vector *)new Null_vector();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Null_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Null_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Null_vector *arg1 = (Null_vector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Null_vector **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1rectangle_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Iso_rectangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Iso_rectangle_2 *)new Iso_rectangle_2(*arg1,*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_rectangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1rectangle_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  int arg3 ;
  Iso_rectangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try{
      result = (Iso_rectangle_2 *)new Iso_rectangle_2(*arg1,*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_rectangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1rectangle_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Point_2 *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  Point_2 *arg4 = 0 ;
  Iso_rectangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Point_2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  arg4 = *(Point_2 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Iso_rectangle_2 *)new Iso_rectangle_2(*arg1,*arg2,*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_rectangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1rectangle_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Iso_rectangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try{
      result = (Iso_rectangle_2 *)new Iso_rectangle_2(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_rectangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1rectangle_12_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Iso_rectangle_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try{
      result = (Iso_rectangle_2 *)new Iso_rectangle_2(arg1,arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_rectangle_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Iso_rectangle_2 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Iso_rectangle_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Iso_rectangle_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_rectangle_2 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Iso_rectangle_2 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  int *arg2 = 0 ;
  Point_2 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (arg1)->min();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->min(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1max_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (arg1)->max();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1max_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->max(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1xmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->xmin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1ymin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->ymin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1xmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->xmax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1ymax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->ymax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1min_1coord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->min_coord((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1max_1coord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->max_coord((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Bbox_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_2 **)&jresult = new Bbox_2((const Bbox_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Bbox_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Bbox_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)(arg1)->bounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1has_1on_1boundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_boundary((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1has_1on_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_bounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1has_1on_1unbounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  Point_2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_unbounded_side((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1rectangle_12_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->area();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Iso_1rectangle_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Iso_rectangle_2 *arg1 = (Iso_rectangle_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Iso_rectangle_2 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1cuboid_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Iso_cuboid_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Iso_cuboid_3 *)new Iso_cuboid_3(*arg1,*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_cuboid_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1cuboid_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  int arg3 ;
  Iso_cuboid_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try{
      result = (Iso_cuboid_3 *)new Iso_cuboid_3(*arg1,*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_cuboid_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1cuboid_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  Point_3 *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  Point_3 *arg4 = 0 ;
  Point_3 *arg5 = 0 ;
  Point_3 *arg6 = 0 ;
  Iso_cuboid_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(Point_3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg4 = *(Point_3 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg5 = *(Point_3 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  arg6 = *(Point_3 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (Iso_cuboid_3 *)new Iso_cuboid_3(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_cuboid_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1cuboid_13_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  Iso_cuboid_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try{
      result = (Iso_cuboid_3 *)new Iso_cuboid_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_cuboid_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Iso_1cuboid_13_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  Iso_cuboid_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try{
      result = (Iso_cuboid_3 *)new Iso_cuboid_3(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Iso_cuboid_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Iso_cuboid_3 const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Iso_cuboid_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Iso_cuboid_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Iso_cuboid_3 & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((Iso_cuboid_3 const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (arg1)->vertex((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  int *arg2 = 0 ;
  Point_3 *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Point_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex((int const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (arg1)->min();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->min(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1max_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (arg1)->max();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_3 **)&jresult = new Point_3((const Point_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1max_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->max(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1xmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->xmin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1ymin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->ymin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1zmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->zmin();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1xmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->xmax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1ymax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->ymax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1zmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->zmax();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1min_1coord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->min_coord((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1max_1coord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (double)(arg1)->max_coord((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Bbox_3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (arg1)->bbox();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Bbox_3 **)&jresult = new Bbox_3((const Bbox_3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Bbox_3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Bbox_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bbox_3 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->bbox(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1is_1degenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_degenerate();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)(arg1)->bounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1has_1on_1boundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_boundary((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1has_1on_1bounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_bounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1has_1on_1unbounded_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  Point_3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)(arg1)->has_on_unbounded_side((Point_3 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Iso_1cuboid_13_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      result = (double)(arg1)->volume();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Iso_1cuboid_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Iso_cuboid_3 *arg1 = (Iso_cuboid_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Iso_cuboid_3 **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_ORIGIN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Origin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Origin *)&ORIGIN;
  *(Origin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_NULL_1VECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Null_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Null_vector *)&NULL_VECTOR;
  *(Null_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ref_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Reference_wrapper< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Reference_wrapper< int > *)new Reference_wrapper< int >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Reference_wrapper< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Ref_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int temp1 ;
  Reference_wrapper< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  {
    try{
      result = (Reference_wrapper< int > *)new Reference_wrapper< int >((int const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Reference_wrapper< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ref_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Reference_wrapper< int > *arg1 = (Reference_wrapper< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reference_wrapper< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      (arg1)->set(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ref_1int_1object(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Reference_wrapper< int > *arg1 = (Reference_wrapper< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reference_wrapper< int > **)&jarg1; 
  {
    try{
      result = (int)((Reference_wrapper< int > const *)arg1)->object();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ref_1int_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Reference_wrapper< int > *arg1 = (Reference_wrapper< int > *) 0 ;
  Reference_wrapper< int >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reference_wrapper< int > **)&jarg1; 
  {
    try{
      result = ((Reference_wrapper< int > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Reference_wrapper< int >::Self **)&jresult = new Reference_wrapper< int >::Self((const Reference_wrapper< int >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Ref_1int_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Reference_wrapper< int > *arg1 = (Reference_wrapper< int > *) 0 ;
  Reference_wrapper< int >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Reference_wrapper< int > **)&jarg1; 
  arg2 = *(Reference_wrapper< int >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Reference_wrapper< int >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((Reference_wrapper< int >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Ref_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Reference_wrapper< int > *arg1 = (Reference_wrapper< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Reference_wrapper< int > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Polygon_12_1Vertex_1iterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *)new SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self **)&jresult = new SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self((const SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > const *)arg1)->operator ==((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1iterator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > const *)arg1)->operator !=((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Polygon_12_1Vertex_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Vertex_iterator,Point_2 > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Polygon_12_1Edge_1const_1iterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *)new SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  Segment_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self **)&jresult = new SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self((const SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > const *)arg1)->operator ==((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1iterator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > const *)arg1)->operator !=((SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Polygon_12_1Edge_1const_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *arg1 = (SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Iterator< Polygon_2::cpp_base::Edge_const_iterator,Segment_2 > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Polygon_12_1Vertex_1circulator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *)new SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self **)&jresult = new SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self((const SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1prev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  {
    try{
      result = (arg1)->prev();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > const *)arg1)->operator ==((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Vertex_1circulator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > const *)arg1)->operator !=((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Polygon_12_1Vertex_1circulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Vertex_circulator,Point_2 > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_new_1Polygon_12_1Edge_1const_1circulator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *)new SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  Segment_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  arg2 = *(Segment_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Segment_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self **)&jresult = new SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self((const SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1prev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  Segment_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  {
    try{
      result = (arg1)->prev();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Segment_2 **)&jresult = new Segment_2((const Segment_2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > const *)arg1)->operator ==((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_Polygon_12_1Edge_1const_1circulator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > const *)arg1)->operator !=((SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_delete_1Polygon_12_1Edge_1const_1circulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *arg1 = (SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Circulator< Polygon_2::cpp_base::Edge_const_circulator,Segment_2 > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_Kernel_CGAL_1KernelJNI_bounded_1side_12(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Point_range_2 arg1 ;
  Point_2 *arg2 = 0 ;
  Bounded_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  {
    Input_iterator_wrapper<Point_2,Point_2::cpp_base> it_end;
    Input_iterator_wrapper<Point_2,Point_2::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_2;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (Bounded_side)bounded_side_2(arg1,(Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

