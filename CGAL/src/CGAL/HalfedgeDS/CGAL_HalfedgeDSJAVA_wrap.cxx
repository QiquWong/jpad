/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  #include <SWIG_CGAL/Java/exception.h>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#if !defined(SWIGPYTHON) && !defined(SWIGJAVA)
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 1
#else
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 0
#endif  


#include <SWIG_CGAL/HalfedgeDS/typedefs.h>
#include <SWIG_CGAL/HalfedgeDS/all_includes.h>

 typedef HDSHalfedge_wrapper<HDS_d>  HDS_Halfedge_handle_SWIG_wrapper; 
 typedef HDSFace_wrapper<HDS_d>  HDS_Face_handle_SWIG_wrapper; 
 typedef HDSVertex_wrapper<HDS_d>  HDS_Vertex_handle_SWIG_wrapper; 
 typedef SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper<HDS_d> >  HDS_Vertex_iterator_SWIG_wrapper; 
 typedef SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper<HDS_d> >  HDS_Halfedge_iterator_SWIG_wrapper; 
 typedef SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper<HDS_d> >  HDS_Face_iterator_SWIG_wrapper; 
 typedef General_modifier<HDS_d>  HalfedgeDS_modifier_SWIG_wrapper; 
 typedef HalfedgeDS_wrapper<HDS_d>  HalfedgeDS_SWIG_wrapper; 
 typedef HalfedgeDS_decorator_wrapper<HDS_d>  HalfedgeDS_decorator_SWIG_wrapper; 

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HDS_1Halfedge_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (HDSHalfedge_wrapper< HDS_d > *)new HDSHalfedge_wrapper< HDS_d >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1opposite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->opposite();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = new HDSHalfedge_wrapper< HDS_d >((const HDSHalfedge_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1opposite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->opposite(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1next_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = new HDSHalfedge_wrapper< HDS_d >((const HDSHalfedge_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1next_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1set_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_next((HDSHalfedge_wrapper< HDS_d > const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1is_1border(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_border();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1prev_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->prev();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = new HDSHalfedge_wrapper< HDS_d >((const HDSHalfedge_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1prev_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->prev(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1set_1prev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_prev((HDSHalfedge_wrapper< HDS_d > const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->vertex();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSVertex_wrapper< HDS_d > **)&jresult = new HDSVertex_wrapper< HDS_d >((const HDSVertex_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSVertex_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSVertex_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertex(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1set_1vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSVertex_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSVertex_wrapper< HDS_d > const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_vertex((HDSVertex_wrapper< HDS_d > const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1face(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSFace_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->face();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSFace_wrapper< HDS_d > **)&jresult = new HDSFace_wrapper< HDS_d >((const HDSFace_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1set_1face(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSFace_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSFace_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSFace_wrapper< HDS_d > const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_face((HDSFace_wrapper< HDS_d > const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = ((HDSHalfedge_wrapper< HDS_d > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d >::Self **)&jresult = new HDSHalfedge_wrapper< HDS_d >::Self((const HDSHalfedge_wrapper< HDS_d >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((HDSHalfedge_wrapper< HDS_d >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d >::Self & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((HDSHalfedge_wrapper< HDS_d > const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d >::Self & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((HDSHalfedge_wrapper< HDS_d > const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1handle_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)((HDSHalfedge_wrapper< HDS_d > const *)arg1)->hashCode();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HDS_1Halfedge_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HDSHalfedge_wrapper< HDS_d > *arg1 = (HDSHalfedge_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HDS_1Face_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HDSFace_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (HDSFace_wrapper< HDS_d > *)new HDSFace_wrapper< HDS_d >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSFace_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1halfedge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->halfedge();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = new HDSHalfedge_wrapper< HDS_d >((const HDSHalfedge_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1halfedge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->halfedge(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1set_1halfedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_halfedge((HDSHalfedge_wrapper< HDS_d > const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSFace_wrapper< HDS_d >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = ((HDSFace_wrapper< HDS_d > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSFace_wrapper< HDS_d >::Self **)&jresult = new HDSFace_wrapper< HDS_d >::Self((const HDSFace_wrapper< HDS_d >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSFace_wrapper< HDS_d >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSFace_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSFace_wrapper< HDS_d >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((HDSFace_wrapper< HDS_d >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSFace_wrapper< HDS_d >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSFace_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSFace_wrapper< HDS_d >::Self & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((HDSFace_wrapper< HDS_d > const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  HDSFace_wrapper< HDS_d >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSFace_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSFace_wrapper< HDS_d >::Self & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((HDSFace_wrapper< HDS_d > const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1handle_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)((HDSFace_wrapper< HDS_d > const *)arg1)->hashCode();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HDS_1Face_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HDSFace_wrapper< HDS_d > *arg1 = (HDSFace_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HDSFace_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HDS_1Vertex_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (HDSVertex_wrapper< HDS_d > *)new HDSVertex_wrapper< HDS_d >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSVertex_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1halfedge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->halfedge();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = new HDSHalfedge_wrapper< HDS_d >((const HDSHalfedge_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1halfedge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->halfedge(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1set_1halfedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_halfedge((HDSHalfedge_wrapper< HDS_d > const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  Point_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->point();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Point_2 **)&jresult = new Point_2((const Point_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->point(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1set_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->set_point((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = ((HDSVertex_wrapper< HDS_d > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSVertex_wrapper< HDS_d >::Self **)&jresult = new HDSVertex_wrapper< HDS_d >::Self((const HDSVertex_wrapper< HDS_d >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSVertex_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSVertex_wrapper< HDS_d >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((HDSVertex_wrapper< HDS_d >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSVertex_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSVertex_wrapper< HDS_d >::Self & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((HDSVertex_wrapper< HDS_d > const *)arg1)->operator ==(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  HDSVertex_wrapper< HDS_d >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HDSVertex_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSVertex_wrapper< HDS_d >::Self & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((HDSVertex_wrapper< HDS_d > const *)arg1)->operator !=(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1handle_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)((HDSVertex_wrapper< HDS_d > const *)arg1)->hashCode();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HDS_1Vertex_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HDSVertex_wrapper< HDS_d > *arg1 = (HDSVertex_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HDSVertex_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HDS_1Vertex_1iterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *)new SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  HDSVertex_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSVertex_wrapper< HDS_d > **)&jresult = new HDSVertex_wrapper< HDS_d >((const HDSVertex_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  HDSVertex_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(HDSVertex_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSVertex_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self **)&jresult = new SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self((const SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > const *)arg1)->operator ==((SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Vertex_1iterator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > const *)arg1)->operator !=((SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HDS_1Vertex_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Vertex_iterator,HDSVertex_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HDS_1Halfedge_1iterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *)new SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSHalfedge_wrapper< HDS_d > **)&jresult = new HDSHalfedge_wrapper< HDS_d >((const HDSHalfedge_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  HDSHalfedge_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(HDSHalfedge_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSHalfedge_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self **)&jresult = new SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self((const SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > const *)arg1)->operator ==((SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Halfedge_1iterator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > const *)arg1)->operator !=((SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HDS_1Halfedge_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Halfedge_iterator,HDSHalfedge_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HDS_1Face_1iterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *)new SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1slow_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  HDSFace_wrapper< HDS_d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = (arg1)->slow_next();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HDSFace_wrapper< HDS_d > **)&jresult = new HDSFace_wrapper< HDS_d >((const HDSFace_wrapper< HDS_d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  HDSFace_wrapper< HDS_d > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(HDSFace_wrapper< HDS_d > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HDSFace_wrapper< HDS_d > & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->next(*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self **)&jresult = new SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self((const SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->hasNext();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > const *)arg1)->operator ==((SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HDS_1Face_1iterator_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  arg2 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)((SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > const *)arg1)->operator !=((SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HDS_1Face_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *arg1 = (SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL_Iterator< HDS_d::Face_iterator,HDSFace_wrapper< HDS_d > > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HalfedgeDS_1modifier(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  General_modifier< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (General_modifier< HDS_d > *)new General_modifier< HDS_d >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(General_modifier< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1begin_1surface_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Modifier_mode arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Modifier_mode)jarg5; 
  {
    try{
      (arg1)->begin_surface(arg2,arg3,arg4,arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1begin_1surface_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try{
      (arg1)->begin_surface(arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1begin_1surface_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try{
      (arg1)->begin_surface(arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1end_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->end_surface();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1add_1vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  Point_2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->add_vertex((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1begin_1facet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->begin_facet();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1end_1facet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->end_facet();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1add_1vertex_1to_1facet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      (arg1)->add_vertex_to_facet(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1rollback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->rollback();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1modifier_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HalfedgeDS_1modifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  General_modifier< HDS_d > *arg1 = (General_modifier< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(General_modifier< HDS_d > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HalfedgeDS_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (HalfedgeDS_wrapper< HDS_d > *)new HalfedgeDS_wrapper< HDS_d >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HalfedgeDS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  HalfedgeDS_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try{
      result = (HalfedgeDS_wrapper< HDS_d > *)new HalfedgeDS_wrapper< HDS_d >(arg1,arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HalfedgeDS_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = 0 ;
  HalfedgeDS_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (HalfedgeDS_wrapper< HDS_d > *)new HalfedgeDS_wrapper< HDS_d >((HalfedgeDS_wrapper< HDS_d > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  {
    try{
      (arg1)->reserve((int const &)*arg2,(int const &)*arg3,(int const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1size_1of_1vertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size_of_vertices();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1size_1of_1halfedges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size_of_halfedges();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1size_1of_1faces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size_of_faces();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1capacity_1of_1vertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->capacity_of_vertices();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1capacity_1of_1halfedges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->capacity_of_halfedges();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1capacity_1of_1faces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->capacity_of_faces();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->bytes();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1bytes_1reserved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->bytes_reserved();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Vertex_range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->vertices();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Vertex_range **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Vertex_range((const HalfedgeDS_wrapper< HDS_d >::Vertex_range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1halfedges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Halfedge_range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->halfedges();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Halfedge_range **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Halfedge_range((const HalfedgeDS_wrapper< HDS_d >::Halfedge_range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Face_range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->faces();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Face_range **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Face_range((const HalfedgeDS_wrapper< HDS_d >::Face_range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1push_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->vertices_push_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper((const HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1push_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  Point_2 *arg2 = 0 ;
  HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->vertices_push_back((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper((const HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1edges_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->edges_push_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Face_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->faces_push_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Face_wrapper **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Face_wrapper((const HalfedgeDS_wrapper< HDS_d >::Face_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->vertices_pop_front();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->vertices_pop_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertices_erase((HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper *arg2 = 0 ;
  HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertices_erase((HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper const &)*arg2,(HalfedgeDS_wrapper< HDS_d >::Vertex_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1edges_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->edges_pop_front();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1edges_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->edges_pop_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1edges_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->edges_erase((HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1edges_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->edges_erase((HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_wrapper< HDS_d >::Hedge_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->faces_pop_front();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->faces_pop_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Face_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Face_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Face_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->faces_erase((HalfedgeDS_wrapper< HDS_d >::Face_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Face_wrapper *arg2 = 0 ;
  HalfedgeDS_wrapper< HDS_d >::Face_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Face_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Face_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_wrapper< HDS_d >::Face_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Face_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->faces_erase((HalfedgeDS_wrapper< HDS_d >::Face_wrapper const &)*arg2,(HalfedgeDS_wrapper< HDS_d >::Face_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1vertices_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->vertices_clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1edges_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->edges_clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1faces_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->faces_clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1normalize_1border(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->normalize_border();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1size_1of_1border_1halfedges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size_of_border_halfedges();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1size_1of_1border_1edges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (int)(arg1)->size_of_border_edges();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1border_1halfedges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Halfedge_range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->border_halfedges();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Halfedge_range **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Halfedge_range((const HalfedgeDS_wrapper< HDS_d >::Halfedge_range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = ((HalfedgeDS_wrapper< HDS_d > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_wrapper< HDS_d >::Self **)&jresult = new HalfedgeDS_wrapper< HDS_d >::Self((const HalfedgeDS_wrapper< HDS_d >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_wrapper< HDS_d >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_wrapper< HDS_d >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_wrapper< HDS_d >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((HalfedgeDS_wrapper< HDS_d >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1delegate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  General_modifier< HDS_d > arg2 ;
  General_modifier< HDS_d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  argp2 = *(General_modifier< HDS_d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null General_modifier< HDS_d >");
    return ;
  }
  arg2 = *argp2; 
  {
    try{
      (arg1)->delegate(arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HalfedgeDS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HalfedgeDS_wrapper< HDS_d > *arg1 = (HalfedgeDS_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HalfedgeDS_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_new_1HalfedgeDS_1decorator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::HDS_wrapper *arg1 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d >::HDS_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::HDS_wrapper & reference is null");
    return 0;
  } 
  {
    try{
      result = (HalfedgeDS_decorator_wrapper< HDS_d > *)new HalfedgeDS_decorator_wrapper< HDS_d >(*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1vertices_1push_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  Point_2 *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->vertices_push_back((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1vertices_1push_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->vertices_push_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1faces_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->faces_push_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1create_1loop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->create_loop();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1create_1segment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (arg1)->create_segment();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1vertices_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->vertices_pop_front();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1vertices_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->vertices_pop_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1vertices_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertices_erase((HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1vertices_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->vertices_erase((HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Vertex_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1faces_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->faces_pop_front();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1faces_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->faces_pop_back();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1faces_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->faces_erase((HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1faces_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->faces_erase((HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Face_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1erase_1face(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->erase_face((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1erase_1connected_1component(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->erase_connected_component((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jint JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1keep_1largest_1connected_1components(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try{
      result = (int)(arg1)->keep_largest_connected_components((int const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1make_1hole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->make_hole((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1fill_1hole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->fill_hole((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1add_1face_1to_1border(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->add_face_to_border((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1split_1face_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->split_face((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1split_1face_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg4 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->split_face((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1join_1face_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->join_face((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1join_1face_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->join_face((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1split_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->split_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1split_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg4 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->split_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1join_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->join_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1join_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->join_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1create_1center_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->create_center_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1create_1center_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->create_center_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1erase_1center_1vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->erase_center_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1erase_1center_1vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->erase_center_vertex((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1split_1loop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg4 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  arg4 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->split_loop((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1split_1loop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg4 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg4 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg5 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->split_loop((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg4,*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1join_1loop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return 0;
  } 
  {
    try{
      result = (arg1)->join_loop((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jresult = new HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper((const HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1join_1loop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg2 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg3 = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  arg2 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg3 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const & reference is null");
    return ;
  } 
  arg4 = *(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->join_loop((HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg2,(HalfedgeDS_decorator_wrapper< HDS_d >::Hedge_wrapper const &)*arg3,*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1is_1valid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  bool *arg2 = 0 ;
  int *arg3 = 0 ;
  bool temp2 ;
  int temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try{
      result = (bool)(arg1)->is_valid((bool const &)*arg2,(int const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1is_1valid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  {
    try{
      result = (bool)(arg1)->is_valid((bool const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1is_1valid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->is_valid();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1normalized_1border_1is_1valid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  {
    try{
      result = (bool)(arg1)->normalized_border_is_valid((bool const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1normalized_1border_1is_1valid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      result = (bool)(arg1)->normalized_border_is_valid();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_HalfedgeDS_1decorator_1inside_1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      (arg1)->inside_out();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_HalfedgeDS_CGAL_1HalfedgeDSJNI_delete_1HalfedgeDS_1decorator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HalfedgeDS_decorator_wrapper< HDS_d > *arg1 = (HalfedgeDS_decorator_wrapper< HDS_d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HalfedgeDS_decorator_wrapper< HDS_d > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


#ifdef __cplusplus
}
#endif

