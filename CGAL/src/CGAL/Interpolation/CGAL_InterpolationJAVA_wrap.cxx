/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  #include <SWIG_CGAL/Java/exception.h>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#if !defined(SWIGPYTHON) && !defined(SWIGJAVA)
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 1
#else
  #define SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE 0
#endif  


  #include  <SWIG_CGAL/Kernel/typedefs.h>
//needed for triangulation_2 import
  #include <SWIG_CGAL/Triangulation_2/Object.h>
  #include <SWIG_CGAL/Triangulation_2/all_includes.h>
//needed for triangulation_3 import
  #include <SWIG_CGAL/Triangulation_3/all_includes.h>
//include of the package
  #include <SWIG_CGAL/Common/Input_iterator_wrapper.h>
  #include <SWIG_CGAL/Common/Output_iterator_wrapper.h>
  #include <SWIG_CGAL/Common/triple.h>
  #include <SWIG_CGAL/Interpolation/Data_access.h>
  #include <SWIG_CGAL/Interpolation/typedefs.h>

 typedef std::pair<double,bool>  Double_and_bool_SWIG_wrapper; 
 typedef SWIG_CGAL::Triple<double,bool,bool>  Double_bool_bool_SWIG_wrapper; 
 typedef std::pair<Point_2,double>  Point_2_and_double_SWIG_wrapper; 
 typedef std::pair<Weighted_point_2,double>  Weighted_point_2_and_double_SWIG_wrapper; 
 typedef std::pair<Point_3,double>  Point_3_and_double_SWIG_wrapper; 
 typedef Data_access_wrapper<I_DA_PD,Point_2,double>  Data_access_double_2_SWIG_wrapper; 
 typedef Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>  Data_access_vector_2_SWIG_wrapper; 
typedef Delaunay_triangulation_2_wrapper<CGAL_DT2,SWIG_Triangulation_2::CGAL_Vertex_handle<CGAL_DT2,Point_2>,SWIG_Triangulation_2::CGAL_Face_handle<CGAL_DT2,Point_2> >  Delaunay_triangulation_2_SWIG_wrapper; 
typedef std::pair<SWIG_Triangulation_2::CGAL_Face_handle<CGAL_DT2,Point_2>,int>  Delaunay_triangulation_2_Edge_SWIG_wrapper; 

  typedef std::pair<Point_2,double> Point_2_and_double_wrapper;
  typedef std::pair<Point_2::cpp_base,double> Point_2_and_double_base;
  #if !SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE
  typedef std::pair<Input_iterator_wrapper<Delaunay_triangulation_2_Edge_SWIG_wrapper,CGAL_DT2::Edge>,Input_iterator_wrapper<Delaunay_triangulation_2_Edge_SWIG_wrapper,CGAL_DT2::Edge> > DT2_Edge_iterator;
  typedef boost::function_output_iterator< Container_writer<std::pair<Point_2,double>,std::pair<Point_2::cpp_base,double> > > iPoint_2_and_double_output_iterator;
  #else
  typedef Generic_input_iterator< Delaunay_triangulation_2_Edge_SWIG_wrapper > DT2_Edge_iterator;
  typedef Generic_output_iterator< std::pair<Point_2,double> > iPoint_2_and_double_output_iterator;
  #endif  


  std::pair<double,bool> 
  natural_neighbor_coordinates_2(const Delaunay_triangulation_2_SWIG_wrapper& dt,const Point_2& p,iPoint_2_and_double_output_iterator out,const SWIG_Triangulation_2::CGAL_Face_handle<CGAL_DT2,Point_2>& start)
  {
    return internal::extract_pair( CGAL::natural_neighbor_coordinates_2(dt.get_data(),p.get_data(),out,start.get_data()) );
  }

  std::pair<double,bool> 
  natural_neighbor_coordinates_2(const Delaunay_triangulation_2_SWIG_wrapper& dt,const Point_2& p,iPoint_2_and_double_output_iterator out)
  {
    return internal::extract_pair( CGAL::natural_neighbor_coordinates_2(dt.get_data(),p.get_data(),out) );
  }

  std::pair<double,bool>
  natural_neighbor_coordinates_2(const Delaunay_triangulation_2_SWIG_wrapper& dt,const Point_2& p,iPoint_2_and_double_output_iterator out,DT2_Edge_iterator its)
  {
    //we need to make a copy as the algorithm uses operator-- on the iterator, which is not defined in our case.
    std::list<CGAL_DT2::Edge> edges;
    std::copy(SWIG_CGAL::get_begin(its),SWIG_CGAL::get_end(its),std::back_inserter(edges));
    return internal::extract_pair( CGAL::natural_neighbor_coordinates_2(dt.get_data(),p.get_data(),out,edges.begin(),edges.end()) );
  }
  
  std::pair<double,bool> 
  natural_neighbor_coordinates_2(const Delaunay_triangulation_2_SWIG_wrapper& dt,const SWIG_Triangulation_2::CGAL_Vertex_handle<CGAL_DT2,Point_2>& vh,iPoint_2_and_double_output_iterator out)
  {
    return internal::extract_pair( CGAL::natural_neighbor_coordinates_2(dt.get_data(),vh.get_data(),out) );
  }

typedef Regular_triangulation_2_wrapper<CGAL_RT2,SWIG_Triangulation_2::CGAL_Vertex_handle<CGAL_RT2,Weighted_point_2>,SWIG_Triangulation_2::CGAL_Face_handle<CGAL_RT2,Weighted_point_2> >  Regular_triangulation_2_SWIG_wrapper; 
typedef std::pair<SWIG_Triangulation_2::CGAL_Face_handle<CGAL_RT2,Weighted_point_2>,int>  Regular_triangulation_2_Edge_SWIG_wrapper; 
typedef SWIG_Triangulation_2::CGAL_Vertex_handle<CGAL_RT2,Weighted_point_2>  Regular_triangulation_2_Vertex_handle_SWIG_wrapper; 

  #if !SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE
  typedef boost::function_output_iterator< Container_writer<std::pair<Weighted_point_2,double>,std::pair<Weighted_point_2::cpp_base,double> > > iWeighted_point_2_and_double_output_iterator;
  #else
  typedef Generic_output_iterator< std::pair<Weighted_point_2,double> > iWeighted_point_2_and_double_output_iterator;
  #endif

  typedef std::pair<Weighted_point_2,double> Weighted_point_2_and_double_wrapper;
  typedef std::pair<Weighted_point_2::cpp_base,double> Weighted_point_2_and_double_base;
  #if !SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE
  typedef std::pair<Input_iterator_wrapper<Regular_triangulation_2_Edge_SWIG_wrapper,CGAL_RT2::Edge>,Input_iterator_wrapper<Regular_triangulation_2_Edge_SWIG_wrapper,CGAL_RT2::Edge> > RT2_Edge_iterator;
  typedef std::pair<Input_iterator_wrapper<Regular_triangulation_2_Vertex_handle_SWIG_wrapper,CGAL_RT2::Vertex_handle>,Input_iterator_wrapper<Regular_triangulation_2_Vertex_handle_SWIG_wrapper,CGAL_RT2::Vertex_handle> > RT2_Vertex_iterator;
  #else
  typedef Generic_input_iterator<Regular_triangulation_2_Edge_SWIG_wrapper> RT2_Edge_iterator;
  typedef Generic_input_iterator<Regular_triangulation_2_Vertex_handle_SWIG_wrapper> RT2_Vertex_iterator;
  #endif


  std::pair<double,bool> 
  regular_neighbor_coordinates_2(const Regular_triangulation_2_SWIG_wrapper& dt,const Weighted_point_2& p,iWeighted_point_2_and_double_output_iterator out,const SWIG_Triangulation_2::CGAL_Face_handle<CGAL_RT2,Weighted_point_2>& start)
  {
    return internal::extract_pair( CGAL::regular_neighbor_coordinates_2(dt.get_data(),p.get_data(),out,start.get_data()) );
  }

  std::pair<double,bool> 
  regular_neighbor_coordinates_2(const Regular_triangulation_2_SWIG_wrapper& dt,const Weighted_point_2& p,iWeighted_point_2_and_double_output_iterator out)
  {
    return internal::extract_pair( CGAL::regular_neighbor_coordinates_2(dt.get_data(),p.get_data(),out) );
  }

  std::pair<double,bool>
  regular_neighbor_coordinates_2(const Regular_triangulation_2_SWIG_wrapper& dt,const Weighted_point_2& p,iWeighted_point_2_and_double_output_iterator out,RT2_Edge_iterator erange,RT2_Vertex_iterator vrange)
  {
    //we need to make a copy as the algorithm uses operator-- on the iterator, which is not defined in our case.
    std::list<CGAL_RT2::Edge> edges;
    std::copy(SWIG_CGAL::get_begin(erange),SWIG_CGAL::get_end(erange),std::back_inserter(edges));
    return internal::extract_pair( CGAL::regular_neighbor_coordinates_2(dt.get_data(),p.get_data(),out,edges.begin(),edges.end(),SWIG_CGAL::get_begin(vrange),SWIG_CGAL::get_end(vrange)) );
  }
  
  std::pair<double,bool> 
  regular_neighbor_coordinates_2(const Regular_triangulation_2_SWIG_wrapper& dt,const SWIG_Triangulation_2::CGAL_Vertex_handle<CGAL_RT2,Weighted_point_2>& vh,iWeighted_point_2_and_double_output_iterator out)
  {
    return internal::extract_pair( CGAL::regular_neighbor_coordinates_2(dt.get_data(),vh.get_data(),out) );
  }

typedef Delaunay_triangulation_3_wrapper<CGAL_DT3,SWIG_Triangulation_3::CGAL_Vertex_handle<CGAL_DT3,Point_3>,SWIG_Triangulation_3::CGAL_Cell_handle<CGAL_DT3,Point_3>,void* >  Delaunay_triangulation_3_SWIG_wrapper; 

  #if !SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE
  typedef boost::function_output_iterator< Container_writer<Point_3,Point_3::cpp_base > > iPoint_3_output_iterator;
  typedef std::pair<Input_iterator_wrapper<Point_3,Point_3::cpp_base>,Input_iterator_wrapper<Point_3,Point_3::cpp_base> > Point_range_3;
  #else
  typedef Generic_output_iterator< Point_3 > iPoint_3_output_iterator;
  typedef Generic_input_iterator<Point_3> Point_range_3;
  #endif


  void surface_neighbors_3(Point_range_3 range,const Point_3& p,const Vector_3& normal,iPoint_3_output_iterator out){
    CGAL::surface_neighbors_3(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),normal.get_data(),out,EPIC_Kernel());
  }
  
  bool surface_neighbors_certified_3(Point_range_3 range,const Point_3& p,const Vector_3& normal,iPoint_3_output_iterator out){
    return CGAL::surface_neighbors_certified_3(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),normal.get_data(),out,EPIC_Kernel()).second;
  }

  bool surface_neighbors_certified_3(Point_range_3 range,const Point_3& p,const Vector_3& normal,double max_distance,iPoint_3_output_iterator out){
    return CGAL::surface_neighbors_certified_3(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),normal.get_data(),max_distance,out,EPIC_Kernel()).second;
  }
  
  void surface_neighbors_3(const Delaunay_triangulation_3_SWIG_wrapper& dt,const Point_3& p,const Vector_3& normal,iPoint_3_output_iterator out,const SWIG_Triangulation_3::CGAL_Cell_handle<CGAL_DT3,Point_3>& start){
    CGAL::surface_neighbors_3(dt.get_data(),p.get_data(),normal.get_data(),out,start.get_data());
  }
  
  void surface_neighbors_3(const Delaunay_triangulation_3_SWIG_wrapper& dt,const Point_3& p,const Vector_3& normal,iPoint_3_output_iterator out){
    CGAL::surface_neighbors_3(dt.get_data(),p.get_data(),normal.get_data(),out);
  }


  #if !SWIG_CGAL_NON_SUPPORTED_TARGET_LANGUAGE
  typedef boost::function_output_iterator< Container_writer<std::pair<Point_3,double>,std::pair<Point_3::cpp_base,double> > >  iPoint_3_and_double_output_iterator;
  #else
  typedef Generic_output_iterator<std::pair<Point_3,double> >  iPoint_3_and_double_output_iterator;
  #endif
  typedef std::pair<Point_3::cpp_base,double> Point_3_and_double_base;
  typedef std::pair<Point_3,double> Point_3_and_double_wrapper;


  std::pair<double, bool > surface_neighbor_coordinates_3 (Point_range_3 range,const Point_3& p,const Vector_3& normal,iPoint_3_and_double_output_iterator out){
    return internal::extract_pair(CGAL::surface_neighbor_coordinates_3(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),normal.get_data(),out,EPIC_Kernel()));
  }

  SWIG_CGAL::Triple<double, bool, bool > surface_neighbor_coordinates_certified_3 (Point_range_3 range,const Point_3& p,const Vector_3& normal,iPoint_3_and_double_output_iterator out)  {
    return internal::extract_triple(CGAL::surface_neighbor_coordinates_certified_3(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),normal.get_data(),out,EPIC_Kernel()));
  }

  SWIG_CGAL::Triple<double, bool, bool > surface_neighbor_coordinates_certified_3 (Point_range_3 range,const Point_3& p,const Vector_3& normal,double max_distance,iPoint_3_and_double_output_iterator out){
    return internal::extract_triple(CGAL::surface_neighbor_coordinates_certified_3(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),p.get_data(),normal.get_data(),max_distance,out,EPIC_Kernel()));
  }

  std::pair< double, bool > surface_neighbor_coordinates_3(const Delaunay_triangulation_3_SWIG_wrapper& dt,const Point_3& p,const Vector_3& normal,iPoint_3_and_double_output_iterator out,const SWIG_Triangulation_3::CGAL_Cell_handle<CGAL_DT3,Point_3>& start){
    return internal::extract_pair(CGAL::surface_neighbor_coordinates_3(dt.get_data(),p.get_data(),normal.get_data(),out,start.get_data()));
  }

  std::pair< double, bool > surface_neighbor_coordinates_3(const Delaunay_triangulation_3_SWIG_wrapper& dt,const Point_3& p,const Vector_3& normal,iPoint_3_and_double_output_iterator out){
    return internal::extract_pair(CGAL::surface_neighbor_coordinates_3(dt.get_data(),p.get_data(),normal.get_data(),out));
  }


typedef std::pair<Input_iterator_wrapper<std::pair<Point_2,double>,std::pair<Point_2::cpp_base,double> >,Input_iterator_wrapper<std::pair<Point_2,double>,std::pair<Point_2::cpp_base,double> > > Point_2_and_double_range;
typedef std::pair<Point_2,double> Point_2_and_double_wrapper;
typedef std::pair<Point_2::cpp_base,double> Point_2_and_double_base;


  double linear_interpolation(Point_2_and_double_range range,double norm,const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values){
    return CGAL::linear_interpolation(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),norm,function_values.get_data());
  }
  
  std::pair<double,bool> quadratic_interpolation(Point_2_and_double_range range,double norm,const Point_2& p,const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values,const Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>& gradients){
    return CGAL::quadratic_interpolation(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),norm,p.get_data(),function_values.get_data(),gradients.get_data(),CGAL::Interpolation_traits_2<EPIC_Kernel>());
  }
  
  std::pair<double,bool> sibson_c1_interpolation(Point_2_and_double_range range,double norm,const Point_2& p,const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values,const Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>& gradients){
    return CGAL::sibson_c1_interpolation(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),norm,p.get_data(),function_values.get_data(),gradients.get_data(),CGAL::Interpolation_traits_2<EPIC_Kernel>());
  }

  std::pair<double,bool> sibson_c1_interpolation_square(Point_2_and_double_range range,double norm,const Point_2& p,const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values,const Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>& gradients){
    return CGAL::sibson_c1_interpolation_square(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),norm,p.get_data(),function_values.get_data(),gradients.get_data(),CGAL::Interpolation_traits_2<EPIC_Kernel>());
  }

  std::pair<double,bool> farin_c1_interpolation(Point_2_and_double_range range,double norm,const Point_2& p,const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values,const Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>& gradients){
    std::vector<std::pair<Point_2::cpp_base,double> > data;
    std::copy(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),std::back_inserter(data));
    return CGAL::farin_c1_interpolation(data.begin(),data.end(),norm,p.get_data(),function_values.get_data(),gradients.get_data(),CGAL::Interpolation_traits_2<EPIC_Kernel>());
  }

  Vector_2 sibson_gradient_fitting(Point_2_and_double_range range,double norm,const Point_2& p,const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values){
    return Vector_2( CGAL::sibson_gradient_fitting(SWIG_CGAL::get_begin(range),SWIG_CGAL::get_end(range),norm,p.get_data(),function_values.get_data(),CGAL::Interpolation_gradient_fitting_traits_2<EPIC_Kernel>()) );
  }

  void sibson_gradient_fitting_nn_2(const Delaunay_triangulation_2_SWIG_wrapper& dt, Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>& gradients, const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values){
    CGAL::sibson_gradient_fitting_nn_2(dt.get_data(),std::inserter(gradients.get_map(),gradients.get_map().begin()),function_values.get_data(),CGAL::Interpolation_gradient_fitting_traits_2<EPIC_Kernel>());
  }
  
  void sibson_gradient_fitting_rn_2(const Regular_triangulation_2_SWIG_wrapper& rt, Data_access_wrapper<I_DA_PV2,Point_2,Vector_2>& gradients, const Data_access_wrapper<I_DA_PD,Point_2,double>& function_values){
    CGAL::sibson_gradient_fitting_rn_2(rt.get_data(),std::inserter(gradients.get_map(),gradients.get_map().begin()),function_values.get_data(),CGAL::Interpolation_gradient_fitting_traits_2<EPIC_Kernel>());
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Double_1and_1bool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< double,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< double,bool > *)new std::pair< double,bool >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Double_1and_1bool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  bool arg2 ;
  std::pair< double,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try{
      result = (std::pair< double,bool > *)new std::pair< double,bool >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Double_1and_1bool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< double,bool > *arg1 = 0 ;
  std::pair< double,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< double,bool > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< double,bool > *)new std::pair< double,bool >((std::pair< double,bool > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1and_1bool_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< double,bool > *arg1 = (std::pair< double,bool > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,bool > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1and_1bool_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< double,bool > *arg1 = (std::pair< double,bool > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,bool > **)&jarg1; 
  result = (double) ((arg1)->first);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1and_1bool_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::pair< double,bool > *arg1 = (std::pair< double,bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1and_1bool_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::pair< double,bool > *arg1 = (std::pair< double,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,bool > **)&jarg1; 
  result = (bool) ((arg1)->second);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Double_1and_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< double,bool > *arg1 = (std::pair< double,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< double,bool > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  result = (double) ((arg1)->first);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  result = (bool) ((arg1)->second);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1third_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->third = arg2;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1third_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  result = (bool) ((arg1)->third);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Double_1bool_1bool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SWIG_CGAL::Triple< double,bool,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (SWIG_CGAL::Triple< double,bool,bool > *)new SWIG_CGAL::Triple< double,bool,bool >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL::Triple< double,bool,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Double_1bool_1bool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  double temp1 ;
  bool temp2 ;
  bool temp3 ;
  SWIG_CGAL::Triple< double,bool,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  {
    try{
      result = (SWIG_CGAL::Triple< double,bool,bool > *)new SWIG_CGAL::Triple< double,bool,bool >((double const &)*arg1,(bool const &)*arg2,(bool const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL::Triple< double,bool,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  SWIG_CGAL::Triple< double,bool,bool >::Self result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  {
    try{
      result = ((SWIG_CGAL::Triple< double,bool,bool > const *)arg1)->deepcopy();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL::Triple< double,bool,bool >::Self **)&jresult = new SWIG_CGAL::Triple< double,bool,bool >::Self((const SWIG_CGAL::Triple< double,bool,bool >::Self &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Double_1bool_1bool_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  SWIG_CGAL::Triple< double,bool,bool >::Self *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  arg2 = *(SWIG_CGAL::Triple< double,bool,bool >::Self **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_CGAL::Triple< double,bool,bool >::Self const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->deepcopy((SWIG_CGAL::Triple< double,bool,bool >::Self const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Double_1bool_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SWIG_CGAL::Triple< double,bool,bool > *arg1 = (SWIG_CGAL::Triple< double,bool,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SWIG_CGAL::Triple< double,bool,bool > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Point_12_1and_1double_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Point_2,double > *)new std::pair< Point_2,double >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Point_12_1and_1double_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point_2 arg1 ;
  double arg2 ;
  Point_2 *argp1 ;
  std::pair< Point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Point_2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_2");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (std::pair< Point_2,double > *)new std::pair< Point_2,double >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Point_12_1and_1double_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_2,double > *arg1 = 0 ;
  std::pair< Point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_2,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Point_2,double > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Point_2,double > *)new std::pair< Point_2,double >((std::pair< Point_2,double > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_12_1and_1double_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_2,double > *arg1 = (std::pair< Point_2,double > *) 0 ;
  Point_2 *arg2 = (Point_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_2,double > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_12_1and_1double_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_2,double > *arg1 = (std::pair< Point_2,double > *) 0 ;
  Point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_2,double > **)&jarg1; 
  result = (Point_2 *)& ((arg1)->first);
  *(Point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_12_1and_1double_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< Point_2,double > *arg1 = (std::pair< Point_2,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_2,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_12_1and_1double_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< Point_2,double > *arg1 = (std::pair< Point_2,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_2,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Point_12_1and_1double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Point_2,double > *arg1 = (std::pair< Point_2,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Point_2,double > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Weighted_1point_12_1and_1double_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Weighted_point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Weighted_point_2,double > *)new std::pair< Weighted_point_2,double >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Weighted_point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Weighted_1point_12_1and_1double_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Weighted_point_2 arg1 ;
  double arg2 ;
  Weighted_point_2 *argp1 ;
  std::pair< Weighted_point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Weighted_point_2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Weighted_point_2");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (std::pair< Weighted_point_2,double > *)new std::pair< Weighted_point_2,double >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Weighted_point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Weighted_1point_12_1and_1double_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Weighted_point_2,double > *arg1 = 0 ;
  std::pair< Weighted_point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Weighted_point_2,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Weighted_point_2,double > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Weighted_point_2,double > *)new std::pair< Weighted_point_2,double >((std::pair< Weighted_point_2,double > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Weighted_point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Weighted_1point_12_1and_1double_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Weighted_point_2,double > *arg1 = (std::pair< Weighted_point_2,double > *) 0 ;
  Weighted_point_2 *arg2 = (Weighted_point_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Weighted_point_2,double > **)&jarg1; 
  arg2 = *(Weighted_point_2 **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Weighted_1point_12_1and_1double_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Weighted_point_2,double > *arg1 = (std::pair< Weighted_point_2,double > *) 0 ;
  Weighted_point_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Weighted_point_2,double > **)&jarg1; 
  result = (Weighted_point_2 *)& ((arg1)->first);
  *(Weighted_point_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Weighted_1point_12_1and_1double_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< Weighted_point_2,double > *arg1 = (std::pair< Weighted_point_2,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Weighted_point_2,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Weighted_1point_12_1and_1double_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< Weighted_point_2,double > *arg1 = (std::pair< Weighted_point_2,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Weighted_point_2,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Weighted_1point_12_1and_1double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Weighted_point_2,double > *arg1 = (std::pair< Weighted_point_2,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Weighted_point_2,double > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Point_13_1and_1double_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< Point_3,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (std::pair< Point_3,double > *)new std::pair< Point_3,double >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Point_13_1and_1double_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Point_3 arg1 ;
  double arg2 ;
  Point_3 *argp1 ;
  std::pair< Point_3,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Point_3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point_3");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try{
      result = (std::pair< Point_3,double > *)new std::pair< Point_3,double >(arg1,arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Point_13_1and_1double_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,double > *arg1 = 0 ;
  std::pair< Point_3,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< Point_3,double > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (std::pair< Point_3,double > *)new std::pair< Point_3,double >((std::pair< Point_3,double > const &)*arg1);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< Point_3,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_13_1and_1double_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< Point_3,double > *arg1 = (std::pair< Point_3,double > *) 0 ;
  Point_3 *arg2 = (Point_3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< Point_3,double > **)&jarg1; 
  arg2 = *(Point_3 **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_13_1and_1double_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< Point_3,double > *arg1 = (std::pair< Point_3,double > *) 0 ;
  Point_3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,double > **)&jarg1; 
  result = (Point_3 *)& ((arg1)->first);
  *(Point_3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_13_1and_1double_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< Point_3,double > *arg1 = (std::pair< Point_3,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Point_13_1and_1double_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< Point_3,double > *arg1 = (std::pair< Point_3,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< Point_3,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Point_13_1and_1double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< Point_3,double > *arg1 = (std::pair< Point_3,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< Point_3,double > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Data_1access_1double_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Data_access_wrapper< I_DA_PD,Point_2,double > *)new Data_access_wrapper< I_DA_PD,Point_2,double >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Data_1access_1double_12_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg1 = (Data_access_wrapper< I_DA_PD,Point_2,double > *) 0 ;
  Point_2 *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try{
      (arg1)->set((Point_2 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Data_1access_1double_12_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg1 = (Data_access_wrapper< I_DA_PD,Point_2,double > *) 0 ;
  Point_2 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)((Data_access_wrapper< I_DA_PD,Point_2,double > const *)arg1)->get((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Data_1access_1double_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg1 = (Data_access_wrapper< I_DA_PD,Point_2,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_new_1Data_1access_1vector_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *)new Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 >();
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Data_1access_1vector_12_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg1 = (Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *) 0 ;
  Point_2 *arg2 = 0 ;
  Vector_2 arg3 ;
  Vector_2 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return ;
  } 
  argp3 = *(Vector_2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Vector_2");
    return ;
  }
  arg3 = *argp3; 
  {
    try{
      (arg1)->set((Point_2 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_Data_1access_1vector_12_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg1 = (Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *) 0 ;
  Point_2 *arg2 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg1; 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    try{
      result = ((Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const *)arg1)->get((Point_2 const &)*arg2);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_delete_1Data_1access_1vector_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg1 = (Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg1; 
  {
    try{
      delete arg1;
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_natural_1neighbor_1coordinates_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Delaunay_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > arg3 ;
  SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > *arg4 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(Delaunay_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Point_2_and_double_wrapper,Point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Point_2_and_double;") );
  }
  arg4 = *(SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = natural_neighbor_coordinates_2((Delaunay_triangulation_2_wrapper< CGAL_DT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > > const &)*arg1,(Point_2 const &)*arg2,arg3,(SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_natural_1neighbor_1coordinates_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  Delaunay_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > arg3 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Delaunay_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Point_2_and_double_wrapper,Point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Point_2_and_double;") );
  }
  {
    try{
      result = natural_neighbor_coordinates_2((Delaunay_triangulation_2_wrapper< CGAL_DT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > > const &)*arg1,(Point_2 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_natural_1neighbor_1coordinates_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  Delaunay_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Point_2 *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > arg3 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 >,int >,CGAL_DT2::Edge >,Input_iterator_wrapper< std::pair< SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 >,int >,CGAL_DT2::Edge > > > arg4 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Delaunay_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Point_2_and_double_wrapper,Point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Point_2_and_double;") );
  }
  {
    Input_iterator_wrapper<Delaunay_triangulation_2_Edge_SWIG_wrapper,CGAL_DT2::Edge> it_end;
    Input_iterator_wrapper<Delaunay_triangulation_2_Edge_SWIG_wrapper,CGAL_DT2::Edge> it_begin(jarg4,"(LCGAL/Triangulation_2/Delaunay_triangulation_2_Edge;)J");
    arg4=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = natural_neighbor_coordinates_2((Delaunay_triangulation_2_wrapper< CGAL_DT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > > const &)*arg1,(Point_2 const &)*arg2,arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_natural_1neighbor_1coordinates_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  Delaunay_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 > *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > arg3 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Delaunay_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 > const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Point_2_and_double_wrapper,Point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Point_2_and_double;") );
  }
  {
    try{
      result = natural_neighbor_coordinates_2((Delaunay_triangulation_2_wrapper< CGAL_DT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > > const &)*arg1,(SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 > const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_regular_1neighbor_1coordinates_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Regular_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Weighted_point_2 *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Weighted_point_2,double >,std::pair< Weighted_point_2::cpp_base,double > > > arg3 ;
  SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > *arg4 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(Regular_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Regular_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Weighted_point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_2 const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Weighted_point_2_and_double_wrapper,Weighted_point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Weighted_point_2_and_double;") );
  }
  arg4 = *(SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = regular_neighbor_coordinates_2((Regular_triangulation_2_wrapper< CGAL_RT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > > const &)*arg1,(Weighted_point_2 const &)*arg2,arg3,(SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_regular_1neighbor_1coordinates_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  Regular_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Weighted_point_2 *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Weighted_point_2,double >,std::pair< Weighted_point_2::cpp_base,double > > > arg3 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Regular_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Regular_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Weighted_point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_2 const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Weighted_point_2_and_double_wrapper,Weighted_point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Weighted_point_2_and_double;") );
  }
  {
    try{
      result = regular_neighbor_coordinates_2((Regular_triangulation_2_wrapper< CGAL_RT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > > const &)*arg1,(Weighted_point_2 const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_regular_1neighbor_1coordinates_12_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  Regular_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Weighted_point_2 *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Weighted_point_2,double >,std::pair< Weighted_point_2::cpp_base,double > > > arg3 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 >,int >,CGAL_RT2::Edge >,Input_iterator_wrapper< std::pair< SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 >,int >,CGAL_RT2::Edge > > > arg4 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,CGAL_RT2::Vertex_handle >,Input_iterator_wrapper< SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,CGAL_RT2::Vertex_handle > > > arg5 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Regular_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Regular_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Weighted_point_2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Weighted_point_2 const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Weighted_point_2_and_double_wrapper,Weighted_point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Weighted_point_2_and_double;") );
  }
  {
    Input_iterator_wrapper<Regular_triangulation_2_Edge_SWIG_wrapper,CGAL_RT2::Edge> it_end;
    Input_iterator_wrapper<Regular_triangulation_2_Edge_SWIG_wrapper,CGAL_RT2::Edge> it_begin(jarg4,"(LCGAL/Triangulation_2/Regular_triangulation_2_Edge;)J");
    arg4=std::make_pair(it_begin,it_end);
  }
  {
    Input_iterator_wrapper<Regular_triangulation_2_Vertex_handle_SWIG_wrapper,CGAL_RT2::Vertex_handle> it_end;
    Input_iterator_wrapper<Regular_triangulation_2_Vertex_handle_SWIG_wrapper,CGAL_RT2::Vertex_handle> it_begin(jarg5,"(LCGAL/Triangulation_2/Regular_triangulation_2_Vertex_handle;)J");
    arg5=std::make_pair(it_begin,it_end);
  }
  {
    try{
      result = regular_neighbor_coordinates_2((Regular_triangulation_2_wrapper< CGAL_RT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > > const &)*arg1,(Weighted_point_2 const &)*arg2,arg3,arg4,arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_regular_1neighbor_1coordinates_12_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  Regular_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 > *arg2 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Weighted_point_2,double >,std::pair< Weighted_point_2::cpp_base,double > > > arg3 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Regular_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Regular_triangulation_2_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 > const & reference is null");
    return 0;
  } 
  {
    arg3=boost::make_function_output_iterator( Container_writer<Weighted_point_2_and_double_wrapper,Weighted_point_2_and_double_base>(jarg3,"LCGAL/Interpolation/Weighted_point_2_and_double;") );
  }
  {
    try{
      result = regular_neighbor_coordinates_2((Regular_triangulation_2_wrapper< CGAL_RT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > > const &)*arg1,(SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 > const &)*arg2,arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbors_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg1 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< Point_3,Point_3::cpp_base > > arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return ;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<Point_3,Point_3::cpp_base>(jarg4,"LCGAL/Kernel/Point_3;") );
  }
  {
    try{
      surface_neighbors_3(arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbors_1certified_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jboolean jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg1 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< Point_3,Point_3::cpp_base > > arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<Point_3,Point_3::cpp_base>(jarg4,"LCGAL/Kernel/Point_3;") );
  }
  {
    try{
      result = (bool)surface_neighbors_certified_3(arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbors_1certified_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jobject jarg5) {
  jboolean jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg1 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  double arg4 ;
  boost::function_output_iterator< Container_writer< Point_3,Point_3::cpp_base > > arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    arg5=boost::make_function_output_iterator( Container_writer<Point_3,Point_3::cpp_base>(jarg5,"LCGAL/Kernel/Point_3;") );
  }
  {
    try{
      result = (bool)surface_neighbors_certified_3(arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4,arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbors_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jlong jarg5, jobject jarg5_) {
  Delaunay_triangulation_3_SWIG_wrapper *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< Point_3,Point_3::cpp_base > > arg4 ;
  SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(Delaunay_triangulation_3_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_3_SWIG_wrapper const & reference is null");
    return ;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return ;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<Point_3,Point_3::cpp_base>(jarg4,"LCGAL/Kernel/Point_3;") );
  }
  arg5 = *(SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > const & reference is null");
    return ;
  } 
  {
    try{
      surface_neighbors_3((Delaunay_triangulation_3_wrapper< CGAL_DT3,SWIG_Triangulation_3::CGAL_Vertex_handle< CGAL_DT3,Point_3 >,SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 >,void * > const &)*arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4,(SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > const &)*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbors_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  Delaunay_triangulation_3_SWIG_wrapper *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< Point_3,Point_3::cpp_base > > arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Delaunay_triangulation_3_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_3_SWIG_wrapper const & reference is null");
    return ;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return ;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return ;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<Point_3,Point_3::cpp_base>(jarg4,"LCGAL/Kernel/Point_3;") );
  }
  {
    try{
      surface_neighbors_3((Delaunay_triangulation_3_wrapper< CGAL_DT3,SWIG_Triangulation_3::CGAL_Vertex_handle< CGAL_DT3,Point_3 >,SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 >,void * > const &)*arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbor_1coordinates_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg1 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_3,double >,std::pair< Point_3::cpp_base,double > > > arg4 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<std::pair<Point_3,double> ,std::pair<Point_3::cpp_base,double> >(jarg4,"LCGAL/Interpolation/Point_3_and_double;") );
  }
  {
    try{
      result = surface_neighbor_coordinates_3(arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbor_1coordinates_1certified_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg1 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_3,double >,std::pair< Point_3::cpp_base,double > > > arg4 ;
  SWIG_CGAL::Triple< double,bool,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<std::pair<Point_3,double> ,std::pair<Point_3::cpp_base,double> >(jarg4,"LCGAL/Interpolation/Point_3_and_double;") );
  }
  {
    try{
      result = surface_neighbor_coordinates_certified_3(arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL::Triple< double,bool,bool > **)&jresult = new SWIG_CGAL::Triple< double,bool,bool >((const SWIG_CGAL::Triple< double,bool,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbor_1coordinates_1certified_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< Point_3,Point_3::cpp_base >,Input_iterator_wrapper< Point_3,Point_3::cpp_base > > > arg1 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  double arg4 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_3,double >,std::pair< Point_3::cpp_base,double > > > arg5 ;
  SWIG_CGAL::Triple< double,bool,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  {
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_end;
    Input_iterator_wrapper<Point_3,Point_3::cpp_base> it_begin(jarg1,"(LCGAL/Kernel/Point_3;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    arg5=boost::make_function_output_iterator( Container_writer<std::pair<Point_3,double> ,std::pair<Point_3::cpp_base,double> >(jarg5,"LCGAL/Interpolation/Point_3_and_double;") );
  }
  {
    try{
      result = surface_neighbor_coordinates_certified_3(arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4,arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(SWIG_CGAL::Triple< double,bool,bool > **)&jresult = new SWIG_CGAL::Triple< double,bool,bool >((const SWIG_CGAL::Triple< double,bool,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbor_1coordinates_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Delaunay_triangulation_3_SWIG_wrapper *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_3,double >,std::pair< Point_3::cpp_base,double > > > arg4 ;
  SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > *arg5 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(Delaunay_triangulation_3_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_3_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<std::pair<Point_3,double> ,std::pair<Point_3::cpp_base,double> >(jarg4,"LCGAL/Interpolation/Point_3_and_double;") );
  }
  arg5 = *(SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = surface_neighbor_coordinates_3((Delaunay_triangulation_3_wrapper< CGAL_DT3,SWIG_Triangulation_3::CGAL_Vertex_handle< CGAL_DT3,Point_3 >,SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 >,void * > const &)*arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4,(SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 > const &)*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_surface_1neighbor_1coordinates_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  Delaunay_triangulation_3_SWIG_wrapper *arg1 = 0 ;
  Point_3 *arg2 = 0 ;
  Vector_3 *arg3 = 0 ;
  boost::function_output_iterator< Container_writer< std::pair< Point_3,double >,std::pair< Point_3::cpp_base,double > > > arg4 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Delaunay_triangulation_3_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_3_SWIG_wrapper const & reference is null");
    return 0;
  } 
  arg2 = *(Point_3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_3 const & reference is null");
    return 0;
  } 
  arg3 = *(Vector_3 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector_3 const & reference is null");
    return 0;
  } 
  {
    arg4=boost::make_function_output_iterator( Container_writer<std::pair<Point_3,double> ,std::pair<Point_3::cpp_base,double> >(jarg4,"LCGAL/Interpolation/Point_3_and_double;") );
  }
  {
    try{
      result = surface_neighbor_coordinates_3((Delaunay_triangulation_3_wrapper< CGAL_DT3,SWIG_Triangulation_3::CGAL_Vertex_handle< CGAL_DT3,Point_3 >,SWIG_Triangulation_3::CGAL_Cell_handle< CGAL_DT3,Point_3 >,void * > const &)*arg1,(Point_3 const &)*arg2,(Vector_3 const &)*arg3,arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_linear_1interpolation(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > >,Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > > arg1 ;
  double arg2 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  {
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_end;
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_begin(jarg1,"(LCGAL/Interpolation/Point_2_and_double;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = (double)jarg2; 
  arg3 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return 0;
  } 
  {
    try{
      result = (double)linear_interpolation(arg1,arg2,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_quadratic_1interpolation(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > >,Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > > arg1 ;
  double arg2 ;
  Point_2 *arg3 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg4 = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg5 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  {
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_end;
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_begin(jarg1,"(LCGAL/Interpolation/Point_2_and_double;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = (double)jarg2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg4 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return 0;
  } 
  arg5 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = quadratic_interpolation(arg1,arg2,(Point_2 const &)*arg3,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg4,(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const &)*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_sibson_1c1_1interpolation(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > >,Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > > arg1 ;
  double arg2 ;
  Point_2 *arg3 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg4 = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg5 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  {
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_end;
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_begin(jarg1,"(LCGAL/Interpolation/Point_2_and_double;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = (double)jarg2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg4 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return 0;
  } 
  arg5 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = sibson_c1_interpolation(arg1,arg2,(Point_2 const &)*arg3,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg4,(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const &)*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_sibson_1c1_1interpolation_1square(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > >,Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > > arg1 ;
  double arg2 ;
  Point_2 *arg3 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg4 = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg5 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  {
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_end;
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_begin(jarg1,"(LCGAL/Interpolation/Point_2_and_double;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = (double)jarg2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg4 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return 0;
  } 
  arg5 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = sibson_c1_interpolation_square(arg1,arg2,(Point_2 const &)*arg3,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg4,(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const &)*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_farin_1c1_1interpolation(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > >,Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > > arg1 ;
  double arg2 ;
  Point_2 *arg3 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg4 = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg5 = 0 ;
  std::pair< double,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  {
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_end;
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_begin(jarg1,"(LCGAL/Interpolation/Point_2_and_double;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = (double)jarg2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg4 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return 0;
  } 
  arg5 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const & reference is null");
    return 0;
  } 
  {
    try{
      result = farin_c1_interpolation(arg1,arg2,(Point_2 const &)*arg3,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg4,(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > const &)*arg5);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(std::pair< double,bool > **)&jresult = new std::pair< double,bool >((const std::pair< double,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_sibson_1gradient_1fitting(JNIEnv *jenv, jclass jcls, jobject jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > >,Input_iterator_wrapper< std::pair< Point_2,double >,std::pair< Point_2::cpp_base,double > > > > arg1 ;
  double arg2 ;
  Point_2 *arg3 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg4 = 0 ;
  Vector_2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  {
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_end;
    Input_iterator_wrapper<std::pair<Point_2,double> ,std::pair<Point_2::cpp_base,double> > it_begin(jarg1,"(LCGAL/Interpolation/Point_2_and_double;)J");
    arg1=std::make_pair(it_begin,it_end);
  }
  arg2 = (double)jarg2; 
  arg3 = *(Point_2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point_2 const & reference is null");
    return 0;
  } 
  arg4 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return 0;
  } 
  {
    try{
      result = sibson_gradient_fitting(arg1,arg2,(Point_2 const &)*arg3,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg4);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
  *(Vector_2 **)&jresult = new Vector_2((const Vector_2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_sibson_1gradient_1fitting_1nn_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Delaunay_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg2 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Delaunay_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Delaunay_triangulation_2_SWIG_wrapper const & reference is null");
    return ;
  } 
  arg2 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > & reference is null");
    return ;
  } 
  arg3 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return ;
  } 
  {
    try{
      sibson_gradient_fitting_nn_2((Delaunay_triangulation_2_wrapper< CGAL_DT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_DT2,Point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_DT2,Point_2 > > const &)*arg1,*arg2,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


SWIGEXPORT void JNICALL Java_CGAL_Interpolation_CGAL_1InterpolationJNI_sibson_1gradient_1fitting_1rn_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Regular_triangulation_2_SWIG_wrapper *arg1 = 0 ;
  Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > *arg2 = 0 ;
  Data_access_wrapper< I_DA_PD,Point_2,double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Regular_triangulation_2_SWIG_wrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Regular_triangulation_2_SWIG_wrapper const & reference is null");
    return ;
  } 
  arg2 = *(Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PV2,Point_2,Vector_2 > & reference is null");
    return ;
  } 
  arg3 = *(Data_access_wrapper< I_DA_PD,Point_2,double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Data_access_wrapper< I_DA_PD,Point_2,double > const & reference is null");
    return ;
  } 
  {
    try{
      sibson_gradient_fitting_rn_2((Regular_triangulation_2_wrapper< CGAL_RT2,SWIG_Triangulation_2::CGAL_Vertex_handle< CGAL_RT2,Weighted_point_2 >,SWIG_Triangulation_2::CGAL_Face_handle< CGAL_RT2,Weighted_point_2 > > const &)*arg1,*arg2,(Data_access_wrapper< I_DA_PD,Point_2,double > const &)*arg3);
    }
    catch(std::exception& e){
      std::string error_msg("Error in SWIG_CGAL code. Here is the text of the C++ exception:\n");
      error_msg += e.what();
      if ( !throwJavaException(error_msg.c_str()) )
      throw; //rethrow exception that could not be thrown in java
    }
    catch(...){
      if ( !throwJavaException("Unknown error in SWIG_CGAL code") )
      throw; //rethrow exception that could not be thrown in java
    }
  }
}


#ifdef __cplusplus
}
#endif

