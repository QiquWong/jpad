/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package CGAL.Point_set_processing_3;

import CGAL.Kernel.Point_3;
import CGAL.Kernel.Vector_3;
import java.util.Iterator;
import java.util.Collection;

public class CGAL_Point_set_processing_3JNI {

    static {
      try {
          System.loadLibrary("CGAL_Point_set_processing_3");
      } catch (UnsatisfiedLinkError e) {
        System.err.println("Native code library CGAL_Point_set_processing_3 failed to load. \n" + e);
        throw e;
      }
    }
  

    static{
      try {
          System.loadLibrary("CGAL_Java");
      } catch (UnsatisfiedLinkError e) {
        System.err.println("Native code library CGAL_Java failed to load. \n" + e);
        throw e;
      }
    }
  
  public final static native double compute_average_spacing(Iterator<Point_3> jarg1, int jarg2);
  public final static native int grid_simplify_point_set(Iterator<Point_3> jarg1, double jarg2);
  public final static native int random_simplify_point_set(Iterator<Point_3> jarg1, double jarg2);
  public final static native int remove_outliers(Iterator<Point_3> jarg1, int jarg2, double jarg3);
  public final static native void jet_smooth_point_set__SWIG_0(Iterator<Point_3> jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void jet_smooth_point_set__SWIG_1(Iterator<Point_3> jarg1, long jarg2, long jarg3);
  public final static native void jet_smooth_point_set__SWIG_2(Iterator<Point_3> jarg1, long jarg2);
  public final static native void jet_estimate_normals__SWIG_0(Iterator<Point_3> jarg1, Collection<Vector_3> jarg2, long jarg3, long jarg4);
  public final static native void jet_estimate_normals__SWIG_1(Iterator<Point_3> jarg1, Collection<Vector_3> jarg2, long jarg3);
  public final static native int mst_orient_normals(Iterator<Point_3> jarg1, Iterator<Vector_3> jarg2, long jarg3);
  public final static native void pca_estimate_normals(Iterator<Point_3> jarg1, Collection<Vector_3> jarg2, long jarg3);
  public final static native boolean read_off_points(String jarg1, Collection<Point_3> jarg2);
  public final static native boolean read_xyz_points(String jarg1, Collection<Point_3> jarg2);
  public final static native boolean write_off_points(String jarg1, Iterator<Point_3> jarg2);
  public final static native boolean write_xyz_points(String jarg1, Iterator<Point_3> jarg2);
  public final static native boolean read_xyz_points_and_normals(String jarg1, Collection<Point_3> jarg2, Collection<Vector_3> jarg3);
  public final static native boolean read_off_points_and_normals(String jarg1, Collection<Point_3> jarg2, Collection<Vector_3> jarg3);
  public final static native boolean write_off_points_and_normals(String jarg1, Iterator<Point_3> jarg2, Iterator<Vector_3> jarg3);
  public final static native boolean write_xyz_points_and_normals(String jarg1, Iterator<Point_3> jarg2, Iterator<Vector_3> jarg3);
}
