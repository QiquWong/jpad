/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package CGAL.Point_set_processing_3;

import CGAL.Kernel.Point_3;
import CGAL.Kernel.Vector_3;
import java.util.Iterator;
import java.util.Collection;

public class CGAL_Point_set_processing_3 {
  public static double compute_average_spacing(Iterator<Point_3> point_range, int k) {
    return CGAL_Point_set_processing_3JNI.compute_average_spacing(point_range, k);
  }

  public static int grid_simplify_point_set(Iterator<Point_3> point_range, double epsilon) {
    return CGAL_Point_set_processing_3JNI.grid_simplify_point_set(point_range, epsilon);
  }

  public static int random_simplify_point_set(Iterator<Point_3> point_range, double removed_percentage) {
    return CGAL_Point_set_processing_3JNI.random_simplify_point_set(point_range, removed_percentage);
  }

  public static int remove_outliers(Iterator<Point_3> point_range, int k, double threshold_percent) {
    return CGAL_Point_set_processing_3JNI.remove_outliers(point_range, k, threshold_percent);
  }

  public static void jet_smooth_point_set(Iterator<Point_3> point_range, long nb_neighbors, long degree_fitting, long degree_monge) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_0(point_range, nb_neighbors, degree_fitting, degree_monge);
  }

  public static void jet_smooth_point_set(Iterator<Point_3> point_range, long nb_neighbors, long degree_fitting) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_1(point_range, nb_neighbors, degree_fitting);
  }

  public static void jet_smooth_point_set(Iterator<Point_3> point_range, long nb_neighbors) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_2(point_range, nb_neighbors);
  }

  public static void jet_estimate_normals(Iterator<Point_3> point_range, Collection<Vector_3> normal_writer, long k, long degree_fitting) {
    CGAL_Point_set_processing_3JNI.jet_estimate_normals__SWIG_0(point_range, normal_writer, k, degree_fitting);
  }

  public static void jet_estimate_normals(Iterator<Point_3> point_range, Collection<Vector_3> normal_writer, long k) {
    CGAL_Point_set_processing_3JNI.jet_estimate_normals__SWIG_1(point_range, normal_writer, k);
  }

  public static int mst_orient_normals(Iterator<Point_3> point_range, Iterator<Vector_3> normal_range, long k) {
    return CGAL_Point_set_processing_3JNI.mst_orient_normals(point_range, normal_range, k);
  }

  public static void pca_estimate_normals(Iterator<Point_3> point_range, Collection<Vector_3> normal_writer, long k) {
    CGAL_Point_set_processing_3JNI.pca_estimate_normals(point_range, normal_writer, k);
  }

  public static boolean read_off_points(String fname, Collection<Point_3> output) {
    return CGAL_Point_set_processing_3JNI.read_off_points(fname, output);
  }

  public static boolean read_xyz_points(String fname, Collection<Point_3> output) {
    return CGAL_Point_set_processing_3JNI.read_xyz_points(fname, output);
  }

  public static boolean write_off_points(String fname, Iterator<Point_3> input) {
    return CGAL_Point_set_processing_3JNI.write_off_points(fname, input);
  }

  public static boolean write_xyz_points(String fname, Iterator<Point_3> input) {
    return CGAL_Point_set_processing_3JNI.write_xyz_points(fname, input);
  }

  public static boolean read_xyz_points_and_normals(String fname, Collection<Point_3> point_writer, Collection<Vector_3> normal_writer) {
    return CGAL_Point_set_processing_3JNI.read_xyz_points_and_normals(fname, point_writer, normal_writer);
  }

  public static boolean read_off_points_and_normals(String fname, Collection<Point_3> point_writer, Collection<Vector_3> normal_writer) {
    return CGAL_Point_set_processing_3JNI.read_off_points_and_normals(fname, point_writer, normal_writer);
  }

  public static boolean write_off_points_and_normals(String fname, Iterator<Point_3> points, Iterator<Vector_3> normals) {
    return CGAL_Point_set_processing_3JNI.write_off_points_and_normals(fname, points, normals);
  }

  public static boolean write_xyz_points_and_normals(String fname, Iterator<Point_3> points, Iterator<Vector_3> normals) {
    return CGAL_Point_set_processing_3JNI.write_xyz_points_and_normals(fname, points, normals);
  }

}
